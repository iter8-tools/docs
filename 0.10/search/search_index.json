{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Iter8 \u00b6","title":"Home"},{"location":"#iter8","text":"","title":"Iter8"},{"location":"contributing/","text":"Overview \u00b6 Welcome! We are delighted that you want to contribute to Iter8! \ud83d\udc96 As you get started, you are in the best position to give us feedback on key areas including: Problems found during setup of Iter8 Gaps in our quick start tutorial and other documentation Bugs in our test and automation scripts If anything doesn't make sense, or doesn't work when you run it, please open a bug report and let us know! Ways to contribute \u00b6 We welcome many different types of contributions including: Tutorials and other documentation Core Iter8 module with experiment charts CI, builds, and tests Web design Reviewing pull requests Communication, social media, blog posts Ask for help \u00b6 The best ways to reach us with a question is to ask... On the original GitHub issue In the #development channel in the Iter8 Slack workspace During our community meetings Find an issue \u00b6 Iter8 issues are tracked here . Issued labeled good first issue have extra information to help you make your first contribution. Issues labeled help wanted are issues suitable for someone who has already submitted their first pull request and is good to move on to the second one. Sometimes there won\u2019t be any issues with these labels. That\u2019s ok! There is likely still something for you to work on. If you want to contribute but you don\u2019t know where to start or can't find a suitable issue, you can reach out to us over the Iter8 Slack workspace for help finding something to work on. Once you see an issue that you'd like to work on, please post a comment saying that you want to work on it. Something like \"I want to work on this\" is fine. Pull request lifecycle \u00b6 Your PR is associated with one (and infrequently, with more than one) GitHub issue . You can start the submission of your PR as soon as this issue has been created. Follow the standard GitHub fork and pull request process when creating and submitting your PR. The associated GitHub issue might need to go through design discussions and may not be ready for development. Your PR might require new tests; these new or existing tests may not yet be running successfully. At this stage, keep your PR as a draft , to signal that it is not yet ready for review. Once design discussions are complete and tests pass, convert the draft PR into a regular PR to signal that it is ready for review. Additionally, post a message in the #development Slack channel of the Iter8 Slack workspace with a link to your PR. This will expedite the review. You can expect an initial review within 1-2 days of submitting a PR, and follow up reviews (if any) to happen over 2-5 days. Use the #development Slack channel of Iter8 Slack workspace to ping/bump when the pull request is ready for further review or if it appears stalled. Iter8 releases happen frequently. Once your PR is merged, you can expect your contribution to show up live in a short amount of time at https://iter8.tools . Sign Your Commits \u00b6 Licensing is important to open source projects. It provides some assurances that the software will continue to be available based under the terms that the author(s) desired. We require that contributors sign off on commits submitted to our project's repositories. The Developer Certificate of Origin (DCO) is a way to certify that you wrote and have the right to contribute the code you are submitting to the project. Read GitHub's documentation on signing your commits . You sign-off by adding the following to your commit messages. Your sign-off must match the Git user and email associated with the commit. This is my commit message Signed-off-by: Your Name <your.name@example.com> Git has a -s command line option to do this automatically: git commit -s -m 'This is my commit message' If you forgot to do this and have not yet pushed your changes to the remote repository, you can amend your commit with the sign-off by running: git commit --amend -s Development environment setup \u00b6 The Iter8 project consists of the following repos. iter8-tools/iter8 : source for the Iter8 CLI and experiment charts iter8-tools/docs : source for Iter8 docs iter8-tools/homebrew-iter8 : Homebrew formula for the Iter8 CLI iter8-tools/iter8 \u00b6 This is the source repo for Iter8 CLI. Clone iter8 \u00b6 git clone https://github.com/iter8-tools/iter8.git Build Iter8 \u00b6 make build Install Iter8 locally \u00b6 make clean install iter8 version Run unit tests and see coverage information \u00b6 make tests make coverage make htmlcov iter8-tools/docs \u00b6 This is the source repo for Iter8 documentation. Clone docs \u00b6 git clone https://github.com/iter8-tools/docs.git Locally serve docs \u00b6 From the root of this repo: python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt mkdocs serve -s You can now see your local docs at http://localhost:8000 . You will also see live updates to http://localhost:8000 as you update the contents of the docs folder.","title":"Contributing"},{"location":"contributing/#overview","text":"Welcome! We are delighted that you want to contribute to Iter8! \ud83d\udc96 As you get started, you are in the best position to give us feedback on key areas including: Problems found during setup of Iter8 Gaps in our quick start tutorial and other documentation Bugs in our test and automation scripts If anything doesn't make sense, or doesn't work when you run it, please open a bug report and let us know!","title":"Overview"},{"location":"contributing/#ways-to-contribute","text":"We welcome many different types of contributions including: Tutorials and other documentation Core Iter8 module with experiment charts CI, builds, and tests Web design Reviewing pull requests Communication, social media, blog posts","title":"Ways to contribute"},{"location":"contributing/#ask-for-help","text":"The best ways to reach us with a question is to ask... On the original GitHub issue In the #development channel in the Iter8 Slack workspace During our community meetings","title":"Ask for help"},{"location":"contributing/#find-an-issue","text":"Iter8 issues are tracked here . Issued labeled good first issue have extra information to help you make your first contribution. Issues labeled help wanted are issues suitable for someone who has already submitted their first pull request and is good to move on to the second one. Sometimes there won\u2019t be any issues with these labels. That\u2019s ok! There is likely still something for you to work on. If you want to contribute but you don\u2019t know where to start or can't find a suitable issue, you can reach out to us over the Iter8 Slack workspace for help finding something to work on. Once you see an issue that you'd like to work on, please post a comment saying that you want to work on it. Something like \"I want to work on this\" is fine.","title":"Find an issue"},{"location":"contributing/#pull-request-lifecycle","text":"Your PR is associated with one (and infrequently, with more than one) GitHub issue . You can start the submission of your PR as soon as this issue has been created. Follow the standard GitHub fork and pull request process when creating and submitting your PR. The associated GitHub issue might need to go through design discussions and may not be ready for development. Your PR might require new tests; these new or existing tests may not yet be running successfully. At this stage, keep your PR as a draft , to signal that it is not yet ready for review. Once design discussions are complete and tests pass, convert the draft PR into a regular PR to signal that it is ready for review. Additionally, post a message in the #development Slack channel of the Iter8 Slack workspace with a link to your PR. This will expedite the review. You can expect an initial review within 1-2 days of submitting a PR, and follow up reviews (if any) to happen over 2-5 days. Use the #development Slack channel of Iter8 Slack workspace to ping/bump when the pull request is ready for further review or if it appears stalled. Iter8 releases happen frequently. Once your PR is merged, you can expect your contribution to show up live in a short amount of time at https://iter8.tools .","title":"Pull request lifecycle"},{"location":"contributing/#sign-your-commits","text":"Licensing is important to open source projects. It provides some assurances that the software will continue to be available based under the terms that the author(s) desired. We require that contributors sign off on commits submitted to our project's repositories. The Developer Certificate of Origin (DCO) is a way to certify that you wrote and have the right to contribute the code you are submitting to the project. Read GitHub's documentation on signing your commits . You sign-off by adding the following to your commit messages. Your sign-off must match the Git user and email associated with the commit. This is my commit message Signed-off-by: Your Name <your.name@example.com> Git has a -s command line option to do this automatically: git commit -s -m 'This is my commit message' If you forgot to do this and have not yet pushed your changes to the remote repository, you can amend your commit with the sign-off by running: git commit --amend -s","title":"Sign Your Commits"},{"location":"contributing/#development-environment-setup","text":"The Iter8 project consists of the following repos. iter8-tools/iter8 : source for the Iter8 CLI and experiment charts iter8-tools/docs : source for Iter8 docs iter8-tools/homebrew-iter8 : Homebrew formula for the Iter8 CLI","title":"Development environment setup"},{"location":"contributing/#iter8-toolsiter8","text":"This is the source repo for Iter8 CLI.","title":"iter8-tools/iter8"},{"location":"contributing/#clone-iter8","text":"git clone https://github.com/iter8-tools/iter8.git","title":"Clone iter8"},{"location":"contributing/#build-iter8","text":"make build","title":"Build Iter8"},{"location":"contributing/#install-iter8-locally","text":"make clean install iter8 version","title":"Install Iter8 locally"},{"location":"contributing/#run-unit-tests-and-see-coverage-information","text":"make tests make coverage make htmlcov","title":"Run unit tests and see coverage information"},{"location":"contributing/#iter8-toolsdocs","text":"This is the source repo for Iter8 documentation.","title":"iter8-tools/docs"},{"location":"contributing/#clone-docs","text":"git clone https://github.com/iter8-tools/docs.git","title":"Clone docs"},{"location":"contributing/#locally-serve-docs","text":"From the root of this repo: python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt mkdocs serve -s You can now see your local docs at http://localhost:8000 . You will also see live updates to http://localhost:8000 as you update the contents of the docs folder.","title":"Locally serve docs"},{"location":"roadmap/","text":"Roadmap \u00b6 Kubernetes experimentation Readiness checks in experiments for Kubernetes resources Iter8 GitHub Action Traffic mirroring with SLO validation experiments Iter8 Tekton task A/B(/n) testing example AutoX service for auto launching Iter8 experiments, app version tracking, and business telemetry Spike/ramp testing Notifications DevSecOps experiments MLOps concept drift detection experiments","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Kubernetes experimentation Readiness checks in experiments for Kubernetes resources Iter8 GitHub Action Traffic mirroring with SLO validation experiments Iter8 Tekton task A/B(/n) testing example AutoX service for auto launching Iter8 experiments, app version tracking, and business telemetry Spike/ramp testing Notifications DevSecOps experiments MLOps concept drift detection experiments","title":"Roadmap"},{"location":"community/community/","text":"Community \u00b6 Meetings \u00b6 Everyone is welcome to join our community meetings. They are on the 3 rd Wednesday of each month from 11:00 AM \u2013 12:00 PM EST/EDT. Here is the meeting link . View the calendar or subscribe ( Google Calendar , iCalendar file ). Feel free to bring discussion topics to the meeting. If you would like to present a demo, please drop us a note in the Iter8 Slack workspace . Our meetings are also recorded and publicly available on our YouTube channel . Slack \u00b6 Iter8 Slack workspace is here . Join the Iter8 Slack for usage and development related discussions. GitHub Issues \u00b6 GitHub issues for all Iter8 repos are managed here .","title":"Community"},{"location":"community/community/#community","text":"","title":"Community"},{"location":"community/community/#meetings","text":"Everyone is welcome to join our community meetings. They are on the 3 rd Wednesday of each month from 11:00 AM \u2013 12:00 PM EST/EDT. Here is the meeting link . View the calendar or subscribe ( Google Calendar , iCalendar file ). Feel free to bring discussion topics to the meeting. If you would like to present a demo, please drop us a note in the Iter8 Slack workspace . Our meetings are also recorded and publicly available on our YouTube channel .","title":"Meetings"},{"location":"community/community/#slack","text":"Iter8 Slack workspace is here . Join the Iter8 Slack for usage and development related discussions.","title":"Slack"},{"location":"community/community/#github-issues","text":"GitHub issues for all Iter8 repos are managed here .","title":"GitHub Issues"},{"location":"community/news/","text":"News and Announcements \u00b6 Feb 2022: The New Stack blog article on Simple HTTP Load Testing with SLOs Nov 2021: Iter8 at ACM Symposium on Cloud Computing. Full paper here Iter8 v0.7 and older Oct 2021: New Stack blog article by Hai Huang: Progressive Delivery on OpenShift Oct 2021: Iter8 at PREVAIL conference. Video coming soon. Conference details Oct 2021: New Stack blog article by Srinivasan Parthasarathy: Validate Service-Level Objectives of REST APIs Using Iter8 Jul 2021: Blog article by Clive Cox: ML\u200c \u200cProgressive\u200c \u200cRollouts\u200c \u200cwith\u200c \u200cSeldon\u200c \u200cand\u200c \u200cIter8\u200c Jul 2021: Iter8 at Knative meetup May 2021: Iter8 at KubeCon + CloudNativeCon Europe Mar 2021: Iter8 at Knative meetup Mar 2021: Kubeflow blog article by Animesh Singh and Dan Sun: Operationalize, Scale and Infuse Trust in AI Models using KFServing Oct 2020: Medium blog article by Michael Kalantar: Automated Canary Release of Microservices on Kubernetes using Tekton and iter8 Oct 2020: Medium blog article by Kusuma Chalasani: Better Performance with kruize and iter8 for your microservices application Oct 2020: Medium blog article by Srinivasan Parthasarathy: Automated Canary Release of TensorFlow Models on Kubernetes Oct 2020: Medium blog article by Sushma Ravichandran: Iter8: Take a look at the magic under the hood Aug 2020: Medium blog article by Fabio Oliveira: Iter8: Achieving Agility with Control","title":"News"},{"location":"community/news/#news-and-announcements","text":"Feb 2022: The New Stack blog article on Simple HTTP Load Testing with SLOs Nov 2021: Iter8 at ACM Symposium on Cloud Computing. Full paper here Iter8 v0.7 and older Oct 2021: New Stack blog article by Hai Huang: Progressive Delivery on OpenShift Oct 2021: Iter8 at PREVAIL conference. Video coming soon. Conference details Oct 2021: New Stack blog article by Srinivasan Parthasarathy: Validate Service-Level Objectives of REST APIs Using Iter8 Jul 2021: Blog article by Clive Cox: ML\u200c \u200cProgressive\u200c \u200cRollouts\u200c \u200cwith\u200c \u200cSeldon\u200c \u200cand\u200c \u200cIter8\u200c Jul 2021: Iter8 at Knative meetup May 2021: Iter8 at KubeCon + CloudNativeCon Europe Mar 2021: Iter8 at Knative meetup Mar 2021: Kubeflow blog article by Animesh Singh and Dan Sun: Operationalize, Scale and Infuse Trust in AI Models using KFServing Oct 2020: Medium blog article by Michael Kalantar: Automated Canary Release of Microservices on Kubernetes using Tekton and iter8 Oct 2020: Medium blog article by Kusuma Chalasani: Better Performance with kruize and iter8 for your microservices application Oct 2020: Medium blog article by Srinivasan Parthasarathy: Automated Canary Release of TensorFlow Models on Kubernetes Oct 2020: Medium blog article by Sushma Ravichandran: Iter8: Take a look at the magic under the hood Aug 2020: Medium blog article by Fabio Oliveira: Iter8: Achieving Agility with Control","title":"News and Announcements"},{"location":"getting-started/concepts/","text":"Iter8 \u00b6 Iter8 is a metrics-driven release optimizer built for DevSecOps, MLOps, SRE and data science teams. Iter8 makes it easy to ensure that new versions of apps and ML models perform well, are secure, and maximize business value. Iter8 experiment \u00b6 Iter8 experiments make it simple to collect performance, risk, and business metrics for apps and ML models, assess, compare and validate one or more app/ML model versions, promote the winning version, and maximize business value in each release. Experiment chart \u00b6 Iter8 Experiment charts are Helm charts under the covers, and enable simple, declarative, and reusable metrics-driven experiments. Iter8 combines experiment charts with user supplied values to generate runnable experiment.yaml files or Kubernetes experiment manifests. The former is used for running experiments in the local environment, while the latter is used for running experiments inside Kubernetes. Iter8 uses experiment charts located in the Iter8 GitHub repo by default. You can create, package and host Iter8 experiment charts in any GitHub repo and use them with Iter8 CLI, and other Iter8 components. Implementation \u00b6 Iter8 is written in go and builds on a few awesome open source projects including: Helm Fortio ghz plotly.js","title":"Concepts"},{"location":"getting-started/concepts/#iter8","text":"Iter8 is a metrics-driven release optimizer built for DevSecOps, MLOps, SRE and data science teams. Iter8 makes it easy to ensure that new versions of apps and ML models perform well, are secure, and maximize business value.","title":"Iter8"},{"location":"getting-started/concepts/#iter8-experiment","text":"Iter8 experiments make it simple to collect performance, risk, and business metrics for apps and ML models, assess, compare and validate one or more app/ML model versions, promote the winning version, and maximize business value in each release.","title":"Iter8 experiment"},{"location":"getting-started/concepts/#experiment-chart","text":"Iter8 Experiment charts are Helm charts under the covers, and enable simple, declarative, and reusable metrics-driven experiments. Iter8 combines experiment charts with user supplied values to generate runnable experiment.yaml files or Kubernetes experiment manifests. The former is used for running experiments in the local environment, while the latter is used for running experiments inside Kubernetes. Iter8 uses experiment charts located in the Iter8 GitHub repo by default. You can create, package and host Iter8 experiment charts in any GitHub repo and use them with Iter8 CLI, and other Iter8 components.","title":"Experiment chart"},{"location":"getting-started/concepts/#implementation","text":"Iter8 is written in go and builds on a few awesome open source projects including: Helm Fortio ghz plotly.js","title":"Implementation"},{"location":"getting-started/expreport/","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 1 Number of completed tasks: 1 Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/http-error-count | 0 .00 built-in/http-error-rate | 0 .00 built-in/http-latency-max ( msec ) | 203 .78 built-in/http-latency-mean ( msec ) | 17 .00 built-in/http-latency-min ( msec ) | 4 .20 built-in/http-latency-p50 ( msec ) | 10 .67 built-in/http-latency-p75 ( msec ) | 12 .33 built-in/http-latency-p90 ( msec ) | 14 .00 built-in/http-latency-p95 ( msec ) | 15 .67 built-in/http-latency-p99 ( msec ) | 202 .84 built-in/http-latency-p99.9 ( msec ) | 203 .69 built-in/http-latency-stddev ( msec ) | 37 .94 built-in/http-request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this","title":"Expreport"},{"location":"getting-started/help/","text":"Get Help \u00b6 Read Iter8 docs . Join the Iter8 Slack workspace . File an issue or start a discussion on the Iter8 GitHub repo . Attend our community meetings!","title":"Get help"},{"location":"getting-started/help/#get-help","text":"Read Iter8 docs . Join the Iter8 Slack workspace . File an issue or start a discussion on the Iter8 GitHub repo . Attend our community meetings!","title":"Get Help"},{"location":"getting-started/install/","text":"Install Iter8 CLI \u00b6 Brew Binaries GitHub Actions Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8@0.10 Install the latest stable release of the Iter8 CLI using a compressed binary tarball. darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-darwin-amd64.tar.gz tar -xvf iter8-darwin-amd64.tar.gz Move darwin-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-linux-amd64.tar.gz tar -xvf iter8-linux-amd64.tar.gz Move linux-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-linux-386.tar.gz tar -xvf iter8-linux-386.tar.gz Move linux-386/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-windows-amd64.tar.gz tar -xvf iter8-windows-amd64.tar.gz Move windows-amd64/iter8.exe to any directory in your PATH . Install the latest stable release of the Iter8 CLI in your GitHub Actions workflow as follows. - uses: iter8-tools/iter8@v0.10","title":"Install Iter8"},{"location":"getting-started/install/#install-iter8-cli","text":"Brew Binaries GitHub Actions Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8@0.10 Install the latest stable release of the Iter8 CLI using a compressed binary tarball. darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-darwin-amd64.tar.gz tar -xvf iter8-darwin-amd64.tar.gz Move darwin-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-linux-amd64.tar.gz tar -xvf iter8-linux-amd64.tar.gz Move linux-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-linux-386.tar.gz tar -xvf iter8-linux-386.tar.gz Move linux-386/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-windows-amd64.tar.gz tar -xvf iter8-windows-amd64.tar.gz Move windows-amd64/iter8.exe to any directory in your PATH . Install the latest stable release of the Iter8 CLI in your GitHub Actions workflow as follows. - uses: iter8-tools/iter8@v0.10","title":"Install Iter8 CLI"},{"location":"getting-started/installiter8cli/","text":"Brew Binaries GitHub Actions Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8@0.10 Install the latest stable release of the Iter8 CLI using a compressed binary tarball. darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-darwin-amd64.tar.gz tar -xvf iter8-darwin-amd64.tar.gz Move darwin-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-linux-amd64.tar.gz tar -xvf iter8-linux-amd64.tar.gz Move linux-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-linux-386.tar.gz tar -xvf iter8-linux-386.tar.gz Move linux-386/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-windows-amd64.tar.gz tar -xvf iter8-windows-amd64.tar.gz Move windows-amd64/iter8.exe to any directory in your PATH . Install the latest stable release of the Iter8 CLI in your GitHub Actions workflow as follows. - uses: iter8-tools/iter8@v0.10","title":"Installiter8cli"},{"location":"getting-started/your-first-experiment/","text":"Your First Experiment \u00b6 Get started with your first Iter8 experiment by benchmarking an HTTP service. 1. Install Iter8 CLI \u00b6 Brew Binaries GitHub Actions Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8@0.10 Install the latest stable release of the Iter8 CLI using a compressed binary tarball. darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-darwin-amd64.tar.gz tar -xvf iter8-darwin-amd64.tar.gz Move darwin-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-linux-amd64.tar.gz tar -xvf iter8-linux-amd64.tar.gz Move linux-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-linux-386.tar.gz tar -xvf iter8-linux-386.tar.gz Move linux-386/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-windows-amd64.tar.gz tar -xvf iter8-windows-amd64.tar.gz Move windows-amd64/iter8.exe to any directory in your PATH . Install the latest stable release of the Iter8 CLI in your GitHub Actions workflow as follows. - uses: iter8-tools/iter8@v0.10 2. Launch experiment \u00b6 Use iter8 launch to benchmark the HTTP service whose URL is https://httpbin.org/get . iter8 launch -c load-test-http --set url = https://httpbin.org/get --set numRequests = 40 The iter8 launch command downloads Iter8 experiment charts , combines a specified chart ( load-test-http in the above instance) with various parameter values ( url and numRequests in the above instance), generates the experiment.yaml file, runs the experiment, and writes results into the result.yaml file. 3. View experiment report \u00b6 Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 1 Number of completed tasks: 1 Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/http-error-count | 0 .00 built-in/http-error-rate | 0 .00 built-in/http-latency-max ( msec ) | 203 .78 built-in/http-latency-mean ( msec ) | 17 .00 built-in/http-latency-min ( msec ) | 4 .20 built-in/http-latency-p50 ( msec ) | 10 .67 built-in/http-latency-p75 ( msec ) | 12 .33 built-in/http-latency-p90 ( msec ) | 14 .00 built-in/http-latency-p95 ( msec ) | 15 .67 built-in/http-latency-p99 ( msec ) | 202 .84 built-in/http-latency-p99.9 ( msec ) | 203 .69 built-in/http-latency-stddev ( msec ) | 37 .94 built-in/http-request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this Congratulations! You completed your first Iter8 experiment. Next steps Learn more about benchmarking and validating HTTP services with service-level objectives (SLOs) . Learn more about benchmarking and validating gRPC services with service-level objectives (SLOs) .","title":"Your first experiment"},{"location":"getting-started/your-first-experiment/#your-first-experiment","text":"Get started with your first Iter8 experiment by benchmarking an HTTP service.","title":"Your First Experiment"},{"location":"getting-started/your-first-experiment/#1-install-iter8-cli","text":"Brew Binaries GitHub Actions Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8@0.10 Install the latest stable release of the Iter8 CLI using a compressed binary tarball. darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-darwin-amd64.tar.gz tar -xvf iter8-darwin-amd64.tar.gz Move darwin-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-linux-amd64.tar.gz tar -xvf iter8-linux-amd64.tar.gz Move linux-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-linux-386.tar.gz tar -xvf iter8-linux-386.tar.gz Move linux-386/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/latest/download/iter8-windows-amd64.tar.gz tar -xvf iter8-windows-amd64.tar.gz Move windows-amd64/iter8.exe to any directory in your PATH . Install the latest stable release of the Iter8 CLI in your GitHub Actions workflow as follows. - uses: iter8-tools/iter8@v0.10","title":"1. Install Iter8 CLI"},{"location":"getting-started/your-first-experiment/#2-launch-experiment","text":"Use iter8 launch to benchmark the HTTP service whose URL is https://httpbin.org/get . iter8 launch -c load-test-http --set url = https://httpbin.org/get --set numRequests = 40 The iter8 launch command downloads Iter8 experiment charts , combines a specified chart ( load-test-http in the above instance) with various parameter values ( url and numRequests in the above instance), generates the experiment.yaml file, runs the experiment, and writes results into the result.yaml file.","title":"2. Launch experiment"},{"location":"getting-started/your-first-experiment/#3-view-experiment-report","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 1 Number of completed tasks: 1 Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/http-error-count | 0 .00 built-in/http-error-rate | 0 .00 built-in/http-latency-max ( msec ) | 203 .78 built-in/http-latency-mean ( msec ) | 17 .00 built-in/http-latency-min ( msec ) | 4 .20 built-in/http-latency-p50 ( msec ) | 10 .67 built-in/http-latency-p75 ( msec ) | 12 .33 built-in/http-latency-p90 ( msec ) | 14 .00 built-in/http-latency-p95 ( msec ) | 15 .67 built-in/http-latency-p99 ( msec ) | 202 .84 built-in/http-latency-p99.9 ( msec ) | 203 .69 built-in/http-latency-stddev ( msec ) | 37 .94 built-in/http-request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this Congratulations! You completed your first Iter8 experiment. Next steps Learn more about benchmarking and validating HTTP services with service-level objectives (SLOs) . Learn more about benchmarking and validating gRPC services with service-level objectives (SLOs) .","title":"3. View experiment report"},{"location":"tutorials/integrations/ghactions/","text":"Use Iter8 in a GitHub Actions workflow \u00b6 Install the latest version of Iter8 using the GitHub Action iter8/iter8@v0.10 . Once installed, Iter8 can be used as documented (see user guide ) in run actions. For example: - uses : iter8/iter8@v0.10 # install Iter8 - run : | iter8 version iter8 launch -c load-test-http \\ --set url=http://httpbin.org/get","title":"GitHub Actions"},{"location":"tutorials/integrations/ghactions/#use-iter8-in-a-github-actions-workflow","text":"Install the latest version of Iter8 using the GitHub Action iter8/iter8@v0.10 . Once installed, Iter8 can be used as documented (see user guide ) in run actions. For example: - uses : iter8/iter8@v0.10 # install Iter8 - run : | iter8 version iter8 launch -c load-test-http \\ --set url=http://httpbin.org/get","title":"Use Iter8 in a GitHub Actions workflow"},{"location":"tutorials/integrations/istio/","text":"Istio Examples based on Iter8 v0.7 \u00b6 Hybrid (A/B + SLOs) testing SLO validation SLO validation (single version) Progressive traffic shifting Fixed % split","title":"Istio"},{"location":"tutorials/integrations/istio/#istio-examples-based-on-iter8-v07","text":"Hybrid (A/B + SLOs) testing SLO validation SLO validation (single version) Progressive traffic shifting Fixed % split","title":"Istio Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/kserve/","text":"KServe Examples based on Iter8 v0.7 \u00b6 A/B Testing and Progressive Traffic Shift Hybrid (A/B + SLOs) testing Progressive traffic shifting Fixed-%-split Session affinity","title":"Kserve"},{"location":"tutorials/integrations/kserve/#kserve-examples-based-on-iter8-v07","text":"A/B Testing and Progressive Traffic Shift Hybrid (A/B + SLOs) testing Progressive traffic shifting Fixed-%-split Session affinity","title":"KServe Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/linkerd/","text":"Linkerd Examples based on Iter8 v0.7 \u00b6 A/B testing","title":"Linkerd"},{"location":"tutorials/integrations/linkerd/#linkerd-examples-based-on-iter8-v07","text":"A/B testing","title":"Linkerd Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/litmus/","text":"Litmus Chaos Examples based on Iter8 v0.7 \u00b6 SLO Validation with Chaos","title":"Litmus"},{"location":"tutorials/integrations/litmus/#litmus-chaos-examples-based-on-iter8-v07","text":"SLO Validation with Chaos","title":"Litmus Chaos Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/overview/","text":"Integrations \u00b6 The tutorials under the integrations section are maintained by members of the Iter8 community. They may become outdated. If you find that something is not working, please lend a helping hand and fix it in a PR. More integrations and examples are always welcome.","title":"Overview"},{"location":"tutorials/integrations/overview/#integrations","text":"The tutorials under the integrations section are maintained by members of the Iter8 community. They may become outdated. If you find that something is not working, please lend a helping hand and fix it in a PR. More integrations and examples are always welcome.","title":"Integrations"},{"location":"tutorials/integrations/seldon/","text":"Seldon Examples based on Iter8 v0.7 \u00b6 Hybrid (A/B + SLOs) testing Progressive traffic shifting","title":"Seldon"},{"location":"tutorials/integrations/seldon/#seldon-examples-based-on-iter8-v07","text":"Hybrid (A/B + SLOs) testing Progressive traffic shifting","title":"Seldon Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/knative/load-test-grpc/","text":"Benchmark and Validate a Knative gRPC service \u00b6 Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! Update the Knative service deployed above to a gRPC service as follows. kn service update hello \\ --image docker.io/grpc/java-example-hostname:latest \\ --port 50051 \\ --revision-name = grpc Benchmark and validate SLOs for the Knative gRPC service by launching an Iter8 experiment. iter8 launch -c load-test-grpc \\ --set-string host = \"hello.default.127.0.0.1.sslip.io:50051\" \\ --set-string call = \"helloworld.Greeter.SayHello\" \\ --set-string protoURL = \"https://raw.githubusercontent.com/grpc/grpc-java/master/examples/example-hostname/src/main/proto/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" \\ --set SLOs.grpc/error-rate = 0 \\ --set SLOs.grpc/latency/mean = 400 \\ --set SLOs.grpc/latency/p90 = 500 \\ --set SLOs.grpc/latency/p '97\\.5' = 600 Please refer to the usage documentation for the load-test-grpc experiment chart that describes how to parameterize this experiment, assert SLOs, and view experiment reports.","title":"Benchmark and validate gRPC"},{"location":"tutorials/integrations/knative/load-test-grpc/#benchmark-and-validate-a-knative-grpc-service","text":"Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! Update the Knative service deployed above to a gRPC service as follows. kn service update hello \\ --image docker.io/grpc/java-example-hostname:latest \\ --port 50051 \\ --revision-name = grpc Benchmark and validate SLOs for the Knative gRPC service by launching an Iter8 experiment. iter8 launch -c load-test-grpc \\ --set-string host = \"hello.default.127.0.0.1.sslip.io:50051\" \\ --set-string call = \"helloworld.Greeter.SayHello\" \\ --set-string protoURL = \"https://raw.githubusercontent.com/grpc/grpc-java/master/examples/example-hostname/src/main/proto/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" \\ --set SLOs.grpc/error-rate = 0 \\ --set SLOs.grpc/latency/mean = 400 \\ --set SLOs.grpc/latency/p90 = 500 \\ --set SLOs.grpc/latency/p '97\\.5' = 600 Please refer to the usage documentation for the load-test-grpc experiment chart that describes how to parameterize this experiment, assert SLOs, and view experiment reports.","title":"Benchmark and Validate a Knative gRPC service"},{"location":"tutorials/integrations/knative/load-test-http/","text":"Benchmark and Validate a Knative HTTP service \u00b6 Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! Benchmark and validate SLOs for the Knative HTTP service by launching an Iter8 experiment. iter8 launch -c load-test-http \\ --set url = http://hello.default.127.0.0.1.sslip.io \\ --set SLOs.http/error-rate = 0 \\ --set SLOs.http/latency-mean = 50 \\ --set SLOs.http/latency-p90 = 100 Please refer to the usage documentation for the load-test-http experiment chart that describes how to parameterize this experiment, assert SLOs, and view experiment reports.","title":"Benchmark and validate HTTP"},{"location":"tutorials/integrations/knative/load-test-http/#benchmark-and-validate-a-knative-http-service","text":"Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! Benchmark and validate SLOs for the Knative HTTP service by launching an Iter8 experiment. iter8 launch -c load-test-http \\ --set url = http://hello.default.127.0.0.1.sslip.io \\ --set SLOs.http/error-rate = 0 \\ --set SLOs.http/latency-mean = 50 \\ --set SLOs.http/latency-p90 = 100 Please refer to the usage documentation for the load-test-http experiment chart that describes how to parameterize this experiment, assert SLOs, and view experiment reports.","title":"Benchmark and Validate a Knative HTTP service"},{"location":"tutorials/load-test-grpc/basicusage/","text":"Benchmark and Validate gRPC services \u00b6 The load-test-grpc experiment generates call requests for gRPC services, collects latency and error-related metrics, and validates service-level objectives (SLOs). This experiment is designed for the following use-cases. Load test Benchmark Validate service level objectives (SLOs) Safe rollout Continuous integration and delivery (CI/CD) Before you begin Run the gRPC sample service from a separate terminal. docker run -p 50051 :50051 docker.io/grpc/java-example-hostname:latest You can also use Podman or other alternatives to Docker in the above command. Basic example \u00b6 Benchmark a gRPC service by specifying its host , its fully-qualified call (method) name, and the URL of Protocol Buffer file ( protoURL ) that defines the service. Launch load-test-grpc experiment iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" Specify metrics and SLOs \u00b6 The following metrics are collected by default by this experiment: grpc/request-count : total number of requests sent grpc/error-count : number of error responses grpc/error-rate : fraction of error responses The following latency metrics are also supported. grpc/latency/mean : Mean latency grpc/latency/stddev : Standard deviation of latency grpc/latency/min : Min latency grpc/latency/max : Max latency grpc/latency/pX : X-th percentile latency, for any X in the range 0.0 to 100.0 Latency metrics have msec units. For example, invoke iter8 launch as follows. The --noDownload flag reuses the Iter8 experiment charts folder downloaded during the previous iter8 launch invocation. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set SLOs.grpc/error-rate = 0 \\ --set SLOs.grpc/latency/mean = 50 \\ --set SLOs.grpc/latency/p90 = 100 \\ --set SLOs.grpc/latency/p '97\\.5' = 200 In the above setting, the following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec View experiment report \u00b6 Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- grpc/error-rate < = 0 | true grpc/latency/mean ( msec ) < = 50 | true grpc/latency/p90 ( msec ) < = 100 | true grpc/latency/p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- grpc/error-count | 0 .00 grpc/error-rate | 0 .00 grpc/latency/mean ( msec ) | 21 .48 grpc/latency/p90 ( msec ) | 34 .00 grpc/latency/p97.5 ( msec ) | 37 .00 grpc/request-count | 200 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this Assert experiment outcomes \u00b6 Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert command asserts if the experiment result satisfies conditions that are specified. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful inside CI/CD/GitOps pipelines. Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied Specify load profile \u00b6 Control the characteristics of the generated load generated by setting the number of requests ( total ), the number of requests per second ( rps ), number of connections to use ( connections ), and the number of concurrent request workers to use which will be distributed across the connections ( concurrency ). Sample load profile iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set total = 500 \\ --set rps = 25 \\ --set concurrency = 50 \\ --set connections = 10 Specify call data \u00b6 gRPC calls may include data serialized as Protocol Buffer messages . Data Data file Data URL Binary data file Binary data URL Specify call data as values. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" Specifying nested data Nested data can also be specified. For example, assuming data.name , data.realm.planet , and data.realm.location are all valid fields, they can be specified as follows. Nested iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" \\ --set data.realm.planet = \"earth\" \\ --set data.realm.location = \"middle\" Create a local JSON file. cat << EOF > data.json { \"name\": \"Iter8 user\" } EOF Specify call data JSON file as value. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data-file = \"data.json\" Specify a URL that responds with JSON data. Iter8 will download the data and use it in the requests. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set dataURL = \"https://gist.githubusercontent.com/sriumcp/3f3178f4b698af6696c925832e51b0ba/raw/d02aa698d34aa2067f7a2f6afb4ceb616b0db822/name.json\" Use binary data from a local file serialized as a single binary message or multiple count-prefixed messages. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set binary-file = \"/the/path/to/data.bin\" # \"./data.bin\" also works Supply a URL that hosts binary data serialized as a single binary message or multiple count-prefixed messages. Iter8 will download the data from this URL and use it in the requests. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set binaryDataURL = \"https://location.of/data.bin\" For client streaming or bi-directional calls, this experiment accepts an array of messages, each element representing a single message within the stream call. If a single object is given for data, then it is automatically converted to an array with single element. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data [ 0 ] .name = \"Joe\" \\ --set data [ 1 ] .name = \"Kate\" \\ --set data [ 2 ] .name = \"Sara\" In case of client streaming, this experiment sends all the data in the input array, and then closes and receives. Specify call metadata \u00b6 gRPC calls may include metadata which is information about a particular call. Metadata Metadata file Metadata URL Supply metadata as values. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadata.darth = \"vader\" \\ --set metadata.lord = \"sauron\" \\ --set metadata.volde = \"mort\" Use JSON metadata from a local file. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadata-file = \"/the/path/to/metadata.json\" # \"./metadata.json\" also works Supply a URL that hosts JSON metadata. Iter8 will download the metadata from this URL and use it in the requests. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadataURL = \"https://location.of/metadata.json\" Specify proto and reflection \u00b6 The gRPC server method signatures and message formats are defined in a .proto source file, which may also be compiled to a .protoset file. Proto file Proto URL Protoset file Protoset URL Reflection Use a local .proto source file. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set proto = \"/path/to/helloworld.proto\" # \"./helloworld.proto\" also works Use a URL that hosts a .proto source file. Iter8 will download the Protocol Buffer file and use it in the experiment. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" Supply the name of a .protoset file that is compiled from .proto source files. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoset = \"./myservice.protoset\" Supply a URL that hosts a .protoset file. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protosetURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.protoset\" In the absence of .proto and .protoset information, the experiment will attempt to use server reflection . You can supply reflect metadata. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set reflect-metadata.clientId = \"5hL64dd0\" \\ --set reflect-metadata.clientMood = \"delightful\" To learn more about all the parameters of the load-test-grpc chart and their default values, please refer to the chart's values.yaml file .","title":"Basic usage"},{"location":"tutorials/load-test-grpc/basicusage/#benchmark-and-validate-grpc-services","text":"The load-test-grpc experiment generates call requests for gRPC services, collects latency and error-related metrics, and validates service-level objectives (SLOs). This experiment is designed for the following use-cases. Load test Benchmark Validate service level objectives (SLOs) Safe rollout Continuous integration and delivery (CI/CD) Before you begin Run the gRPC sample service from a separate terminal. docker run -p 50051 :50051 docker.io/grpc/java-example-hostname:latest You can also use Podman or other alternatives to Docker in the above command.","title":"Benchmark and Validate gRPC services"},{"location":"tutorials/load-test-grpc/basicusage/#basic-example","text":"Benchmark a gRPC service by specifying its host , its fully-qualified call (method) name, and the URL of Protocol Buffer file ( protoURL ) that defines the service. Launch load-test-grpc experiment iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\"","title":"Basic example"},{"location":"tutorials/load-test-grpc/basicusage/#specify-metrics-and-slos","text":"The following metrics are collected by default by this experiment: grpc/request-count : total number of requests sent grpc/error-count : number of error responses grpc/error-rate : fraction of error responses The following latency metrics are also supported. grpc/latency/mean : Mean latency grpc/latency/stddev : Standard deviation of latency grpc/latency/min : Min latency grpc/latency/max : Max latency grpc/latency/pX : X-th percentile latency, for any X in the range 0.0 to 100.0 Latency metrics have msec units. For example, invoke iter8 launch as follows. The --noDownload flag reuses the Iter8 experiment charts folder downloaded during the previous iter8 launch invocation. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set SLOs.grpc/error-rate = 0 \\ --set SLOs.grpc/latency/mean = 50 \\ --set SLOs.grpc/latency/p90 = 100 \\ --set SLOs.grpc/latency/p '97\\.5' = 200 In the above setting, the following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec","title":"Specify metrics and SLOs"},{"location":"tutorials/load-test-grpc/basicusage/#view-experiment-report","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- grpc/error-rate < = 0 | true grpc/latency/mean ( msec ) < = 50 | true grpc/latency/p90 ( msec ) < = 100 | true grpc/latency/p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- grpc/error-count | 0 .00 grpc/error-rate | 0 .00 grpc/latency/mean ( msec ) | 21 .48 grpc/latency/p90 ( msec ) | 34 .00 grpc/latency/p97.5 ( msec ) | 37 .00 grpc/request-count | 200 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this","title":"View experiment report"},{"location":"tutorials/load-test-grpc/basicusage/#assert-experiment-outcomes","text":"Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert command asserts if the experiment result satisfies conditions that are specified. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful inside CI/CD/GitOps pipelines. Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied","title":"Assert experiment outcomes"},{"location":"tutorials/load-test-grpc/basicusage/#specify-load-profile","text":"Control the characteristics of the generated load generated by setting the number of requests ( total ), the number of requests per second ( rps ), number of connections to use ( connections ), and the number of concurrent request workers to use which will be distributed across the connections ( concurrency ). Sample load profile iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set total = 500 \\ --set rps = 25 \\ --set concurrency = 50 \\ --set connections = 10","title":"Specify load profile"},{"location":"tutorials/load-test-grpc/basicusage/#specify-call-data","text":"gRPC calls may include data serialized as Protocol Buffer messages . Data Data file Data URL Binary data file Binary data URL Specify call data as values. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" Specifying nested data Nested data can also be specified. For example, assuming data.name , data.realm.planet , and data.realm.location are all valid fields, they can be specified as follows. Nested iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" \\ --set data.realm.planet = \"earth\" \\ --set data.realm.location = \"middle\" Create a local JSON file. cat << EOF > data.json { \"name\": \"Iter8 user\" } EOF Specify call data JSON file as value. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data-file = \"data.json\" Specify a URL that responds with JSON data. Iter8 will download the data and use it in the requests. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set dataURL = \"https://gist.githubusercontent.com/sriumcp/3f3178f4b698af6696c925832e51b0ba/raw/d02aa698d34aa2067f7a2f6afb4ceb616b0db822/name.json\" Use binary data from a local file serialized as a single binary message or multiple count-prefixed messages. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set binary-file = \"/the/path/to/data.bin\" # \"./data.bin\" also works Supply a URL that hosts binary data serialized as a single binary message or multiple count-prefixed messages. Iter8 will download the data from this URL and use it in the requests. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set binaryDataURL = \"https://location.of/data.bin\" For client streaming or bi-directional calls, this experiment accepts an array of messages, each element representing a single message within the stream call. If a single object is given for data, then it is automatically converted to an array with single element. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data [ 0 ] .name = \"Joe\" \\ --set data [ 1 ] .name = \"Kate\" \\ --set data [ 2 ] .name = \"Sara\" In case of client streaming, this experiment sends all the data in the input array, and then closes and receives.","title":"Specify call data"},{"location":"tutorials/load-test-grpc/basicusage/#specify-call-metadata","text":"gRPC calls may include metadata which is information about a particular call. Metadata Metadata file Metadata URL Supply metadata as values. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadata.darth = \"vader\" \\ --set metadata.lord = \"sauron\" \\ --set metadata.volde = \"mort\" Use JSON metadata from a local file. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadata-file = \"/the/path/to/metadata.json\" # \"./metadata.json\" also works Supply a URL that hosts JSON metadata. Iter8 will download the metadata from this URL and use it in the requests. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadataURL = \"https://location.of/metadata.json\"","title":"Specify call metadata"},{"location":"tutorials/load-test-grpc/basicusage/#specify-proto-and-reflection","text":"The gRPC server method signatures and message formats are defined in a .proto source file, which may also be compiled to a .protoset file. Proto file Proto URL Protoset file Protoset URL Reflection Use a local .proto source file. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set proto = \"/path/to/helloworld.proto\" # \"./helloworld.proto\" also works Use a URL that hosts a .proto source file. Iter8 will download the Protocol Buffer file and use it in the experiment. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" Supply the name of a .protoset file that is compiled from .proto source files. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoset = \"./myservice.protoset\" Supply a URL that hosts a .protoset file. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protosetURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.protoset\" In the absence of .proto and .protoset information, the experiment will attempt to use server reflection . You can supply reflect metadata. iter8 launch -c load-test-grpc --noDownload \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set reflect-metadata.clientId = \"5hL64dd0\" \\ --set reflect-metadata.clientMood = \"delightful\" To learn more about all the parameters of the load-test-grpc chart and their default values, please refer to the chart's values.yaml file .","title":"Specify proto and reflection"},{"location":"tutorials/load-test-grpc/expreport/","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- grpc/error-rate < = 0 | true grpc/latency/mean ( msec ) < = 50 | true grpc/latency/p90 ( msec ) < = 100 | true grpc/latency/p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- grpc/error-count | 0 .00 grpc/error-rate | 0 .00 grpc/latency/mean ( msec ) | 21 .48 grpc/latency/p90 ( msec ) | 34 .00 grpc/latency/p97.5 ( msec ) | 37 .00 grpc/request-count | 200 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this","title":"Expreport"},{"location":"tutorials/load-test-grpc/ghaction/","text":"Iter8 GitHub Action \u00b6 The Iter8 GitHub Action enables you to load test, benchmark, and validate gRPC services with service-level objectives (SLOs) inside GitHub Action workflows. This tutorial shows how. Basic example \u00b6 - uses : iter8-tools/iter8-action@v1 with : chart : load-test-grpc valuesFile : experiment-config.yaml A sample experiment-config.yaml is as follows. # An earlier step in the workflow is assumed to have started the gRPC service host : 127.0.0.1:50051 call : helloworld.Greeter.SayHello protoURL : https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto Details of the configuration parameters that can be set are here . Default values are here . Complete example \u00b6 A complete GitHub Actions workflow which exercises the Iter8 Action using the load-test-grpc experiment is available as part of the Iter8 docs repo . Run this example as follows. Fork the Iter8 docs repo: https://github.com/iter8-tools/docs to your organization, myorg . If necessary, enable GitHub Actions workflows on the your forked repo by navigating to https://github.com/myorg/docs/actions . Run the workflow: Navigate to the Actions tab of your forked repository: https://github.com/myorg/docs/actions . Select the workflow end-to-end tests . Click the Run workflow button. When the workflow has completed, there will be a new entry for the execution. Select the latest, then the entry for the local grpc tests job. View the logs generated by the Iter8 GitHub Action by clicking on the steps labeled Run iter8-tools/iter8-action@v1 . Iter8 Action inputs \u00b6 The list of inputs that can be configured for the Iter8 GitHub Action is documented here .","title":"Iter8 GitHub Action"},{"location":"tutorials/load-test-grpc/ghaction/#iter8-github-action","text":"The Iter8 GitHub Action enables you to load test, benchmark, and validate gRPC services with service-level objectives (SLOs) inside GitHub Action workflows. This tutorial shows how.","title":"Iter8 GitHub Action"},{"location":"tutorials/load-test-grpc/ghaction/#basic-example","text":"- uses : iter8-tools/iter8-action@v1 with : chart : load-test-grpc valuesFile : experiment-config.yaml A sample experiment-config.yaml is as follows. # An earlier step in the workflow is assumed to have started the gRPC service host : 127.0.0.1:50051 call : helloworld.Greeter.SayHello protoURL : https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto Details of the configuration parameters that can be set are here . Default values are here .","title":"Basic example"},{"location":"tutorials/load-test-grpc/ghaction/#complete-example","text":"A complete GitHub Actions workflow which exercises the Iter8 Action using the load-test-grpc experiment is available as part of the Iter8 docs repo . Run this example as follows. Fork the Iter8 docs repo: https://github.com/iter8-tools/docs to your organization, myorg . If necessary, enable GitHub Actions workflows on the your forked repo by navigating to https://github.com/myorg/docs/actions . Run the workflow: Navigate to the Actions tab of your forked repository: https://github.com/myorg/docs/actions . Select the workflow end-to-end tests . Click the Run workflow button. When the workflow has completed, there will be a new entry for the execution. Select the latest, then the entry for the local grpc tests job. View the logs generated by the Iter8 GitHub Action by clicking on the steps labeled Run iter8-tools/iter8-action@v1 .","title":"Complete example"},{"location":"tutorials/load-test-grpc/ghaction/#iter8-action-inputs","text":"The list of inputs that can be configured for the Iter8 GitHub Action is documented here .","title":"Iter8 Action inputs"},{"location":"tutorials/load-test-grpc/kubernetesusage/","text":"Benchmark and Validate Kubernetes gRPC Services \u00b6 Benchmark, and validate a gRPC service inside a Kubernetes cluster using the load-test-grpc experiment . The experiment is run inside the cluster. The gRPC service may be externally exposed or local to the cluster. Before you begin Try the basic load-test-grpc tutorial . Try the Kubernetes usage tutorial for the load-test-http experiment . Ensure that you have a Kubernetes cluster and the kubectl CLI . You may run a local Kubernetes cluster using tools like Kind or Minikube . Deploy the sample gRPC service in the Kubernetes cluster. kubectl create deploy hello --image = docker.io/grpc/java-example-hostname:latest --port = 50051 kubectl expose deploy hello --port = 50051 Launch experiment \u00b6 Launch a load-test-grpc experiment inside the Kubernetes cluster. Note that the gRPC host in this experiment is hello.default , which refers to a hostname inside the Kubernetes cluster, specifically, the hello service in the default namespace. iter8 k launch -c load-test-grpc \\ --set host = \"hello.default:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set ready.deploy = hello \\ --set ready.service = hello \\ --set ready.timeout = 60s Similarities to load-test-http \u00b6 You can configure this experiment with various parameter values (in particular, you can specify SLOs) as described in the basic load-test-grpc tutorial . You can assert experiment conditions, view experiment reports, view experiment logs, and cleanup the experiment as described in the Kubernetes usage tutorial for load-test-http .","title":"Kubernetes usage"},{"location":"tutorials/load-test-grpc/kubernetesusage/#benchmark-and-validate-kubernetes-grpc-services","text":"Benchmark, and validate a gRPC service inside a Kubernetes cluster using the load-test-grpc experiment . The experiment is run inside the cluster. The gRPC service may be externally exposed or local to the cluster. Before you begin Try the basic load-test-grpc tutorial . Try the Kubernetes usage tutorial for the load-test-http experiment . Ensure that you have a Kubernetes cluster and the kubectl CLI . You may run a local Kubernetes cluster using tools like Kind or Minikube . Deploy the sample gRPC service in the Kubernetes cluster. kubectl create deploy hello --image = docker.io/grpc/java-example-hostname:latest --port = 50051 kubectl expose deploy hello --port = 50051","title":"Benchmark and Validate Kubernetes gRPC Services"},{"location":"tutorials/load-test-grpc/kubernetesusage/#launch-experiment","text":"Launch a load-test-grpc experiment inside the Kubernetes cluster. Note that the gRPC host in this experiment is hello.default , which refers to a hostname inside the Kubernetes cluster, specifically, the hello service in the default namespace. iter8 k launch -c load-test-grpc \\ --set host = \"hello.default:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set ready.deploy = hello \\ --set ready.service = hello \\ --set ready.timeout = 60s","title":"Launch experiment"},{"location":"tutorials/load-test-grpc/kubernetesusage/#similarities-to-load-test-http","text":"You can configure this experiment with various parameter values (in particular, you can specify SLOs) as described in the basic load-test-grpc tutorial . You can assert experiment conditions, view experiment reports, view experiment logs, and cleanup the experiment as described in the Kubernetes usage tutorial for load-test-http .","title":"Similarities to load-test-http"},{"location":"tutorials/load-test-http/assert/","text":"Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert command asserts if the experiment result satisfies conditions that are specified. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful inside CI/CD/GitOps pipelines. Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied","title":"Assert"},{"location":"tutorials/load-test-http/basicusage/","text":"Benchmark and Validate HTTP services \u00b6 The load-test-http experiment generates requests for HTTP services, collects latency and error-related metrics, and validates service-level objectives (SLOs). This experiment is designed for the following use-cases. Load test Benchmark Validate service level objectives (SLOs) Safe rollout Continuous integration and delivery (CI/CD) Before you begin Run the httpbin sample service from a separate terminal. docker run -p 80 :80 kennethreitz/httpbin You can also use Podman or other alternatives to Docker in the above command. Basic example \u00b6 Benchmark an HTTP service with a GET endpoint by specifying the url . iter8 launch -c load-test-http --set url = http://127.0.0.1/get Specify metrics and SLOs \u00b6 The following metrics are collected by default by this experiment: http/request-count : total number of requests sent http/error-count : number of error responses http/error-rate : fraction of error responses http/latency-mean : mean of observed latency values http/latency-stddev : standard deviation of observed latency values http/latency-min : min of observed latency values http/latency-max : max of observed latency values http/latency-pX : X th percentile latency, for X in [50.0, 75.0, 90.0, 95.0, 99.0, 99.9] All latency metrics have msec units. Launch the following experiment. The --noDownload flag reuses the Iter8 experiment charts folder downloaded during the previous iter8 launch invocation. iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/get \\ --set SLOs.http/error-rate = 0 \\ --set SLOs.http/latency-mean = 50 \\ --set SLOs.http/latency-p90 = 100 \\ --set SLOs.http/latency-p95 = 200 In the experiment above, the following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 95 th percentile latency is under 200 msec View experiment report \u00b6 Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- http/error-rate < = 0 | true http/latency-mean ( msec ) < = 50 | true http/latency-p90 ( msec ) < = 100 | true http/latency-p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- http/error-count | 0 .00 http/error-rate | 0 .00 http/latency-max ( msec ) | 8 .93 http/latency-mean ( msec ) | 5 .49 http/latency-min ( msec ) | 2 .71 http/latency-p50 ( msec ) | 5 .38 http/latency-p75 ( msec ) | 6 .71 http/latency-p90 ( msec ) | 7 .77 http/latency-p95 ( msec ) | 8 .27 http/latency-p97.5 ( msec ) | 8 .60 http/latency-p99 ( msec ) | 8 .80 http/latency-p99.9 ( msec ) | 8 .92 http/latency-stddev ( msec ) | 1 .57 http/request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this Assert experiment outcomes \u00b6 Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert command asserts if the experiment result satisfies conditions that are specified. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful inside CI/CD/GitOps pipelines. Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied Specify load profile \u00b6 Control the characteristics of the load generated by the load-test-http experiment by setting the number of queries ( numQueries ), the number of queries sent per second ( qps ), and the number of parallel connections used to send queries ( connections ). iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/get \\ --set numQueries = 200 \\ --set qps = 10 \\ --set connections = 5 Specify payload \u00b6 Send any type of content as payload and specify the HTTP Content Type header. These options switch the HTTP method to POST. String String with contentType JSON from URL Image from URL Specify payload as a string. By default, its content type is set to application/octet-stream . iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" \\ --set contentType = \"text/plain\" Fetch JSON content from a URL. Use this JSON as payload. Set content type to application/json . iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/post \\ --set payloadURL = https://data.police.uk/api/crimes-street-dates \\ --set contentType = \"application/json\" Fetch jpeg image from a URL. Use this image as payload. Set content type to image/jpeg . iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/post \\ --set payloadURL = https://cdn.pixabay.com/photo/2021/09/08/17/58/poppy-6607526_1280.jpg \\ --set contentType = \"image/jpeg\" To learn more about all the parameters of the load-test-http chart and their default values, please refer to the chart's values.yaml file .","title":"Basic usage"},{"location":"tutorials/load-test-http/basicusage/#benchmark-and-validate-http-services","text":"The load-test-http experiment generates requests for HTTP services, collects latency and error-related metrics, and validates service-level objectives (SLOs). This experiment is designed for the following use-cases. Load test Benchmark Validate service level objectives (SLOs) Safe rollout Continuous integration and delivery (CI/CD) Before you begin Run the httpbin sample service from a separate terminal. docker run -p 80 :80 kennethreitz/httpbin You can also use Podman or other alternatives to Docker in the above command.","title":"Benchmark and Validate HTTP services"},{"location":"tutorials/load-test-http/basicusage/#basic-example","text":"Benchmark an HTTP service with a GET endpoint by specifying the url . iter8 launch -c load-test-http --set url = http://127.0.0.1/get","title":"Basic example"},{"location":"tutorials/load-test-http/basicusage/#specify-metrics-and-slos","text":"The following metrics are collected by default by this experiment: http/request-count : total number of requests sent http/error-count : number of error responses http/error-rate : fraction of error responses http/latency-mean : mean of observed latency values http/latency-stddev : standard deviation of observed latency values http/latency-min : min of observed latency values http/latency-max : max of observed latency values http/latency-pX : X th percentile latency, for X in [50.0, 75.0, 90.0, 95.0, 99.0, 99.9] All latency metrics have msec units. Launch the following experiment. The --noDownload flag reuses the Iter8 experiment charts folder downloaded during the previous iter8 launch invocation. iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/get \\ --set SLOs.http/error-rate = 0 \\ --set SLOs.http/latency-mean = 50 \\ --set SLOs.http/latency-p90 = 100 \\ --set SLOs.http/latency-p95 = 200 In the experiment above, the following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 95 th percentile latency is under 200 msec","title":"Specify metrics and SLOs"},{"location":"tutorials/load-test-http/basicusage/#view-experiment-report","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- http/error-rate < = 0 | true http/latency-mean ( msec ) < = 50 | true http/latency-p90 ( msec ) < = 100 | true http/latency-p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- http/error-count | 0 .00 http/error-rate | 0 .00 http/latency-max ( msec ) | 8 .93 http/latency-mean ( msec ) | 5 .49 http/latency-min ( msec ) | 2 .71 http/latency-p50 ( msec ) | 5 .38 http/latency-p75 ( msec ) | 6 .71 http/latency-p90 ( msec ) | 7 .77 http/latency-p95 ( msec ) | 8 .27 http/latency-p97.5 ( msec ) | 8 .60 http/latency-p99 ( msec ) | 8 .80 http/latency-p99.9 ( msec ) | 8 .92 http/latency-stddev ( msec ) | 1 .57 http/request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this","title":"View experiment report"},{"location":"tutorials/load-test-http/basicusage/#assert-experiment-outcomes","text":"Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert command asserts if the experiment result satisfies conditions that are specified. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful inside CI/CD/GitOps pipelines. Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied","title":"Assert experiment outcomes"},{"location":"tutorials/load-test-http/basicusage/#specify-load-profile","text":"Control the characteristics of the load generated by the load-test-http experiment by setting the number of queries ( numQueries ), the number of queries sent per second ( qps ), and the number of parallel connections used to send queries ( connections ). iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/get \\ --set numQueries = 200 \\ --set qps = 10 \\ --set connections = 5","title":"Specify load profile"},{"location":"tutorials/load-test-http/basicusage/#specify-payload","text":"Send any type of content as payload and specify the HTTP Content Type header. These options switch the HTTP method to POST. String String with contentType JSON from URL Image from URL Specify payload as a string. By default, its content type is set to application/octet-stream . iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" \\ --set contentType = \"text/plain\" Fetch JSON content from a URL. Use this JSON as payload. Set content type to application/json . iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/post \\ --set payloadURL = https://data.police.uk/api/crimes-street-dates \\ --set contentType = \"application/json\" Fetch jpeg image from a URL. Use this image as payload. Set content type to image/jpeg . iter8 launch -c load-test-http --noDownload \\ --set url = http://127.0.0.1/post \\ --set payloadURL = https://cdn.pixabay.com/photo/2021/09/08/17/58/poppy-6607526_1280.jpg \\ --set contentType = \"image/jpeg\" To learn more about all the parameters of the load-test-http chart and their default values, please refer to the chart's values.yaml file .","title":"Specify payload"},{"location":"tutorials/load-test-http/expreport/","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- http/error-rate < = 0 | true http/latency-mean ( msec ) < = 50 | true http/latency-p90 ( msec ) < = 100 | true http/latency-p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- http/error-count | 0 .00 http/error-rate | 0 .00 http/latency-max ( msec ) | 8 .93 http/latency-mean ( msec ) | 5 .49 http/latency-min ( msec ) | 2 .71 http/latency-p50 ( msec ) | 5 .38 http/latency-p75 ( msec ) | 6 .71 http/latency-p90 ( msec ) | 7 .77 http/latency-p95 ( msec ) | 8 .27 http/latency-p97.5 ( msec ) | 8 .60 http/latency-p99 ( msec ) | 8 .80 http/latency-p99.9 ( msec ) | 8 .92 http/latency-stddev ( msec ) | 1 .57 http/request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this","title":"Expreport"},{"location":"tutorials/load-test-http/ghaction/","text":"Iter8 Github Action \u00b6 The Iter8 GitHub Action enables you to load test, benchmark, and validate HTTP services with service-level objectives (SLOs) inside GitHub Action workflows. This tutorial shows how. Basic Example \u00b6 - uses : iter8-tools/iter8-action@v1 with : chart : load-test-http valuesFile : experiment-config.yaml A sample experiment-config.yaml is as follows. url : http://httpbin.org/get Details of the configuration parameters that can be set are here . Default valules are here . Complete example \u00b6 A complete GitHub Actions workflow which exercises the Iter8 Action using the load-test-http experiment is available as part of the Iter8 docs repo . You can run this example as follows. Fork the Iter8 docs repo: https://github.com/iter8-tools/docs to your organization, myorg . If necessary, enable workflows on the your forked repository (by navigating to https://github.com/myorg/docs/actions ). Run the workflow: Navigate to the Actions tab of your forked repository: https://github.com/myorg/docs/actions . Select the workflow end-to-end tests . Click the Run workflow button. When the workflow has completed, there will be a new entry for the execution. Select the latest, then the entry for the local httpbin tests job. The log for each execution of the Iter8 action, can be inspected by inspecting the steps labeled Run iter8-tools/iter8-action@v1 . Iter8 Action inputs \u00b6 The list of inputs that can be configured for the Iter8 GitHub Action is documented here .","title":"Iter8 Github Action"},{"location":"tutorials/load-test-http/ghaction/#iter8-github-action","text":"The Iter8 GitHub Action enables you to load test, benchmark, and validate HTTP services with service-level objectives (SLOs) inside GitHub Action workflows. This tutorial shows how.","title":"Iter8 Github Action"},{"location":"tutorials/load-test-http/ghaction/#basic-example","text":"- uses : iter8-tools/iter8-action@v1 with : chart : load-test-http valuesFile : experiment-config.yaml A sample experiment-config.yaml is as follows. url : http://httpbin.org/get Details of the configuration parameters that can be set are here . Default valules are here .","title":"Basic Example"},{"location":"tutorials/load-test-http/ghaction/#complete-example","text":"A complete GitHub Actions workflow which exercises the Iter8 Action using the load-test-http experiment is available as part of the Iter8 docs repo . You can run this example as follows. Fork the Iter8 docs repo: https://github.com/iter8-tools/docs to your organization, myorg . If necessary, enable workflows on the your forked repository (by navigating to https://github.com/myorg/docs/actions ). Run the workflow: Navigate to the Actions tab of your forked repository: https://github.com/myorg/docs/actions . Select the workflow end-to-end tests . Click the Run workflow button. When the workflow has completed, there will be a new entry for the execution. Select the latest, then the entry for the local httpbin tests job. The log for each execution of the Iter8 action, can be inspected by inspecting the steps labeled Run iter8-tools/iter8-action@v1 .","title":"Complete example"},{"location":"tutorials/load-test-http/ghaction/#iter8-action-inputs","text":"The list of inputs that can be configured for the Iter8 GitHub Action is documented here .","title":"Iter8 Action inputs"},{"location":"tutorials/load-test-http/kubernetesusage/","text":"Benchmark and Validate Kubernetes HTTP Services \u00b6 Benchmark, and validate an HTTP service inside a Kubernetes cluster using the load-test-http experiment . The experiment is run inside the cluster. The HTTP service may be externally exposed or local to the cluster. Before you begin Try the basic load-test-http tutorial . Ensure that you have a Kubernetes cluster and the kubectl CLI . You may run a local Kubernetes cluster using tools like Kind or Minikube . Deploy the sample HTTP service in the Kubernetes cluster. kubectl create deploy httpbin --image = kennethreitz/httpbin --port = 80 kubectl expose deploy httpbin --port = 80 Launch experiment \u00b6 Launch a load-test-http experiment inside the Kubernetes cluster. Note that the HTTP URL in this experiment is http://httpbin.default , which refers to a hostname inside the Kubernetes cluster, specifically, the httpbin service in the default namespace. iter8 k launch -c load-test-http \\ --set url = http://httpbin.default \\ --set SLOs.http/latency-mean = 50 \\ --set ready.deploy = httpbin \\ --set ready.service = httpbin \\ --set ready.timeout = 60s Kubernetes experiments and iter8 k Notice the iter8 k launch invocation above. Many Iter8 subcommands like launch , assert and report come in two flavors, one suited for experiments that are run locally, and another suited for experiments run inside a Kubernetes cluster. For example, iter8 launch executes local experiments and iter8 assert enables assertions on the results of local experiments; similarly, iter8 k launch executes Kubernetes experiments and iter8 k assert enables assertions on the results of Kubernetes experiments. Notice also the additional options ready.deploy and ready.service which allow you to specify Kubernetes Deployment and Service resources that should be checked for readiness before proceeding with the load test. ready.timeout specifies how long it should wait for the resource to be ready. Assert experiment outcomes \u00b6 Assert that the experiment completed without failures, and all SLOs are satisfied. The timeout flag below specifies a period of 120 sec for assert conditions to be satisfied. iter8 k assert -c completed -c nofailure -c slos --timeout 120s View experiment report \u00b6 Text HTML iter8 k report iter8 k report -o html > report.html # view in a browser View experiment logs \u00b6 Fetch logs for the Kubernetes experiment. iter8 k log Set parameter values \u00b6 All the parameters described in the basic usage ( iter8 launch ) of load-test-http are also applicable for the Kubernetes usage ( iter8 k launch ) of the load-test-http experiment. Cleanup \u00b6 Delete all resources pertaining to this experiment from the Kubernetes cluster. iter8 k delete","title":"Kubernetes usage"},{"location":"tutorials/load-test-http/kubernetesusage/#benchmark-and-validate-kubernetes-http-services","text":"Benchmark, and validate an HTTP service inside a Kubernetes cluster using the load-test-http experiment . The experiment is run inside the cluster. The HTTP service may be externally exposed or local to the cluster. Before you begin Try the basic load-test-http tutorial . Ensure that you have a Kubernetes cluster and the kubectl CLI . You may run a local Kubernetes cluster using tools like Kind or Minikube . Deploy the sample HTTP service in the Kubernetes cluster. kubectl create deploy httpbin --image = kennethreitz/httpbin --port = 80 kubectl expose deploy httpbin --port = 80","title":"Benchmark and Validate Kubernetes HTTP Services"},{"location":"tutorials/load-test-http/kubernetesusage/#launch-experiment","text":"Launch a load-test-http experiment inside the Kubernetes cluster. Note that the HTTP URL in this experiment is http://httpbin.default , which refers to a hostname inside the Kubernetes cluster, specifically, the httpbin service in the default namespace. iter8 k launch -c load-test-http \\ --set url = http://httpbin.default \\ --set SLOs.http/latency-mean = 50 \\ --set ready.deploy = httpbin \\ --set ready.service = httpbin \\ --set ready.timeout = 60s Kubernetes experiments and iter8 k Notice the iter8 k launch invocation above. Many Iter8 subcommands like launch , assert and report come in two flavors, one suited for experiments that are run locally, and another suited for experiments run inside a Kubernetes cluster. For example, iter8 launch executes local experiments and iter8 assert enables assertions on the results of local experiments; similarly, iter8 k launch executes Kubernetes experiments and iter8 k assert enables assertions on the results of Kubernetes experiments. Notice also the additional options ready.deploy and ready.service which allow you to specify Kubernetes Deployment and Service resources that should be checked for readiness before proceeding with the load test. ready.timeout specifies how long it should wait for the resource to be ready.","title":"Launch experiment"},{"location":"tutorials/load-test-http/kubernetesusage/#assert-experiment-outcomes","text":"Assert that the experiment completed without failures, and all SLOs are satisfied. The timeout flag below specifies a period of 120 sec for assert conditions to be satisfied. iter8 k assert -c completed -c nofailure -c slos --timeout 120s","title":"Assert experiment outcomes"},{"location":"tutorials/load-test-http/kubernetesusage/#view-experiment-report","text":"Text HTML iter8 k report iter8 k report -o html > report.html # view in a browser","title":"View experiment report"},{"location":"tutorials/load-test-http/kubernetesusage/#view-experiment-logs","text":"Fetch logs for the Kubernetes experiment. iter8 k log","title":"View experiment logs"},{"location":"tutorials/load-test-http/kubernetesusage/#set-parameter-values","text":"All the parameters described in the basic usage ( iter8 launch ) of load-test-http are also applicable for the Kubernetes usage ( iter8 k launch ) of the load-test-http experiment.","title":"Set parameter values"},{"location":"tutorials/load-test-http/kubernetesusage/#cleanup","text":"Delete all resources pertaining to this experiment from the Kubernetes cluster. iter8 k delete","title":"Cleanup"},{"location":"tutorials/load-test-http/usecases/","text":"This experiment is designed for the following use-cases. Load test Benchmark Validate service level objectives (SLOs) Safe rollout Continuous integration and delivery (CI/CD)","title":"Usecases"},{"location":"user-guide/commands/iter8/","text":"iter8 \u00b6 Kubernetes release optimizer Synopsis \u00b6 Kubernetes release optimizer. Options \u00b6 -h, --help help for iter8 -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 assert - Assert if experiment result satisfies conditions iter8 gen - Generate experiment.yaml file by combining an experiment chart with values iter8 hub - Download experiment chart iter8 k - Work with Kubernetes experiments iter8 launch - Launch an experiment iter8 report - Generate experiment report iter8 run - Run an experiment iter8 version - Print Iter8 CLI version Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8"},{"location":"user-guide/commands/iter8/#iter8","text":"Kubernetes release optimizer","title":"iter8"},{"location":"user-guide/commands/iter8/#synopsis","text":"Kubernetes release optimizer.","title":"Synopsis"},{"location":"user-guide/commands/iter8/#options","text":"-h, --help help for iter8 -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options"},{"location":"user-guide/commands/iter8/#see-also","text":"iter8 assert - Assert if experiment result satisfies conditions iter8 gen - Generate experiment.yaml file by combining an experiment chart with values iter8 hub - Download experiment chart iter8 k - Work with Kubernetes experiments iter8 launch - Launch an experiment iter8 report - Generate experiment report iter8 run - Run an experiment iter8 version - Print Iter8 CLI version","title":"SEE ALSO"},{"location":"user-guide/commands/iter8/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_assert/","text":"iter8 assert \u00b6 Assert if experiment result satisfies conditions Synopsis \u00b6 Assert if the result of an experiment satisfies a given set of conditions. If all conditions are satisfied, the command exits with code 0. Else, the command exits with code 1. Assertions are especially useful for automation inside CI/CD/GitOps pipelines. Supported conditions are 'completed', 'nofailure', 'slos', which indicate that the experiment has completed, none of the tasks have failed, and the SLOs are satisfied. $ iter8 assert -c completed -c nofailure -c slos # same as iter8 assert -c completed,nofailure,slos You can optionally specify a timeout, which is the maximum amount of time to wait for the conditions to be satisfied: $ iter8 assert -c completed,nofailures,slos -t 5s iter8 assert [flags] Options \u00b6 -c, --condition strings completed | nofailure | slos; can specify multiple or separate conditions with commas; -h, --help help for assert --runDir string directory where experiment is run; contains experiment.yaml and result.yaml (default \".\") --timeout duration timeout duration (e.g., 5s) Options inherited from parent commands \u00b6 -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 assert"},{"location":"user-guide/commands/iter8_assert/#iter8-assert","text":"Assert if experiment result satisfies conditions","title":"iter8 assert"},{"location":"user-guide/commands/iter8_assert/#synopsis","text":"Assert if the result of an experiment satisfies a given set of conditions. If all conditions are satisfied, the command exits with code 0. Else, the command exits with code 1. Assertions are especially useful for automation inside CI/CD/GitOps pipelines. Supported conditions are 'completed', 'nofailure', 'slos', which indicate that the experiment has completed, none of the tasks have failed, and the SLOs are satisfied. $ iter8 assert -c completed -c nofailure -c slos # same as iter8 assert -c completed,nofailure,slos You can optionally specify a timeout, which is the maximum amount of time to wait for the conditions to be satisfied: $ iter8 assert -c completed,nofailures,slos -t 5s iter8 assert [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_assert/#options","text":"-c, --condition strings completed | nofailure | slos; can specify multiple or separate conditions with commas; -h, --help help for assert --runDir string directory where experiment is run; contains experiment.yaml and result.yaml (default \".\") --timeout duration timeout duration (e.g., 5s)","title":"Options"},{"location":"user-guide/commands/iter8_assert/#options-inherited-from-parent-commands","text":"-l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_assert/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_assert/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_gen/","text":"iter8 gen \u00b6 Generate experiment.yaml file by combining an experiment chart with values Synopsis \u00b6 Generate an experiment.yaml file by combining an experiment chart with values. $ iter8 gen --sourceDir /path/to/load-test-http --set url=https://httpbin.org/get This command is intended for development and testing of experiment charts. For production usage, the launch command is recommended. iter8 gen [flags] Options \u00b6 -c, --chartName string name of the experiment chart --chartsParentDir string directory under which the charts folder is located (default \".\") -h, --help help for gen --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple) Options inherited from parent commands \u00b6 -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 gen"},{"location":"user-guide/commands/iter8_gen/#iter8-gen","text":"Generate experiment.yaml file by combining an experiment chart with values","title":"iter8 gen"},{"location":"user-guide/commands/iter8_gen/#synopsis","text":"Generate an experiment.yaml file by combining an experiment chart with values. $ iter8 gen --sourceDir /path/to/load-test-http --set url=https://httpbin.org/get This command is intended for development and testing of experiment charts. For production usage, the launch command is recommended. iter8 gen [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_gen/#options","text":"-c, --chartName string name of the experiment chart --chartsParentDir string directory under which the charts folder is located (default \".\") -h, --help help for gen --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple)","title":"Options"},{"location":"user-guide/commands/iter8_gen/#options-inherited-from-parent-commands","text":"-l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_gen/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_gen/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_hub/","text":"iter8 hub \u00b6 Download experiment chart Synopsis \u00b6 Download an experiment chart to a local directory. $ iter8 hub -c load-test-http This command is intended for development and testing of experiment charts. For production usage, the iter8 launch command is recommended. iter8 hub [flags] Options \u00b6 --gitFolder string Git folder containing iter8 charts (default \"github.com/iter8-tools/iter8.git?ref=v0.10.5//charts\") -h, --help help for hub Options inherited from parent commands \u00b6 -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 hub"},{"location":"user-guide/commands/iter8_hub/#iter8-hub","text":"Download experiment chart","title":"iter8 hub"},{"location":"user-guide/commands/iter8_hub/#synopsis","text":"Download an experiment chart to a local directory. $ iter8 hub -c load-test-http This command is intended for development and testing of experiment charts. For production usage, the iter8 launch command is recommended. iter8 hub [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_hub/#options","text":"--gitFolder string Git folder containing iter8 charts (default \"github.com/iter8-tools/iter8.git?ref=v0.10.5//charts\") -h, --help help for hub","title":"Options"},{"location":"user-guide/commands/iter8_hub/#options-inherited-from-parent-commands","text":"-l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_hub/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_hub/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_k/","text":"iter8 k \u00b6 Work with Kubernetes experiments Synopsis \u00b6 Work with Kubernetes experiments Options \u00b6 -h, --help help for k --kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -n, --namespace string namespace scope for this request Options inherited from parent commands \u00b6 -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer iter8 k assert - Assert if Kubernetes experiment result satisfies conditions iter8 k delete - Delete an experiment group in Kubernetes iter8 k launch - Launch an experiment in Kubernetes iter8 k log - Fetch logs for a Kubernetes experiment iter8 k report - Generate report for Kubernetes experiment Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 k"},{"location":"user-guide/commands/iter8_k/#iter8-k","text":"Work with Kubernetes experiments","title":"iter8 k"},{"location":"user-guide/commands/iter8_k/#synopsis","text":"Work with Kubernetes experiments","title":"Synopsis"},{"location":"user-guide/commands/iter8_k/#options","text":"-h, --help help for k --kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -n, --namespace string namespace scope for this request","title":"Options"},{"location":"user-guide/commands/iter8_k/#options-inherited-from-parent-commands","text":"-l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k/#see-also","text":"iter8 - Kubernetes release optimizer iter8 k assert - Assert if Kubernetes experiment result satisfies conditions iter8 k delete - Delete an experiment group in Kubernetes iter8 k launch - Launch an experiment in Kubernetes iter8 k log - Fetch logs for a Kubernetes experiment iter8 k report - Generate report for Kubernetes experiment","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_k_assert/","text":"iter8 k assert \u00b6 Assert if Kubernetes experiment result satisfies conditions Synopsis \u00b6 Assert if the result of a Kubernetes experiment satisfies a given set of conditions. If all conditions are satisfied, the command exits with code 0. Else, the command exits with code 1. Assertions are especially useful for automation inside CI/CD/GitOps pipelines. Supported conditions are 'completed', 'nofailure', 'slos', which indicate that the experiment has completed, none of the tasks have failed, and the SLOs are satisfied. $ iter8 k assert -c completed -c nofailure -c slos # same as iter8 k assert -c completed,nofailure,slos You can optionally specify a timeout, which is the maximum amount of time to wait for the conditions to be satisfied: $ iter8 k assert -c completed,nofailures,slos -t 5s iter8 k assert [flags] Options \u00b6 -c, --condition strings completed | nofailure | slos; can specify multiple or separate conditions with commas; -g, --group string name of the experiment group (default \"default\") -h, --help help for assert --timeout duration timeout duration (e.g., 5s) Options inherited from parent commands \u00b6 --kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") -n, --namespace string namespace scope for this request SEE ALSO \u00b6 iter8 k - Work with Kubernetes experiments Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 k assert"},{"location":"user-guide/commands/iter8_k_assert/#iter8-k-assert","text":"Assert if Kubernetes experiment result satisfies conditions","title":"iter8 k assert"},{"location":"user-guide/commands/iter8_k_assert/#synopsis","text":"Assert if the result of a Kubernetes experiment satisfies a given set of conditions. If all conditions are satisfied, the command exits with code 0. Else, the command exits with code 1. Assertions are especially useful for automation inside CI/CD/GitOps pipelines. Supported conditions are 'completed', 'nofailure', 'slos', which indicate that the experiment has completed, none of the tasks have failed, and the SLOs are satisfied. $ iter8 k assert -c completed -c nofailure -c slos # same as iter8 k assert -c completed,nofailure,slos You can optionally specify a timeout, which is the maximum amount of time to wait for the conditions to be satisfied: $ iter8 k assert -c completed,nofailures,slos -t 5s iter8 k assert [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_k_assert/#options","text":"-c, --condition strings completed | nofailure | slos; can specify multiple or separate conditions with commas; -g, --group string name of the experiment group (default \"default\") -h, --help help for assert --timeout duration timeout duration (e.g., 5s)","title":"Options"},{"location":"user-guide/commands/iter8_k_assert/#options-inherited-from-parent-commands","text":"--kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") -n, --namespace string namespace scope for this request","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k_assert/#see-also","text":"iter8 k - Work with Kubernetes experiments","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k_assert/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_k_delete/","text":"iter8 k delete \u00b6 Delete an experiment group in Kubernetes Synopsis \u00b6 Delete an experiment group in Kubernetes. $ iter8 k delete -g hello iter8 k delete [flags] Options \u00b6 -g, --group string name of the experiment group (default \"default\") -h, --help help for delete Options inherited from parent commands \u00b6 --kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") -n, --namespace string namespace scope for this request SEE ALSO \u00b6 iter8 k - Work with Kubernetes experiments Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 k delete"},{"location":"user-guide/commands/iter8_k_delete/#iter8-k-delete","text":"Delete an experiment group in Kubernetes","title":"iter8 k delete"},{"location":"user-guide/commands/iter8_k_delete/#synopsis","text":"Delete an experiment group in Kubernetes. $ iter8 k delete -g hello iter8 k delete [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_k_delete/#options","text":"-g, --group string name of the experiment group (default \"default\") -h, --help help for delete","title":"Options"},{"location":"user-guide/commands/iter8_k_delete/#options-inherited-from-parent-commands","text":"--kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") -n, --namespace string namespace scope for this request","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k_delete/#see-also","text":"iter8 k - Work with Kubernetes experiments","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k_delete/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_k_launch/","text":"iter8 k launch \u00b6 Launch an experiment in Kubernetes Synopsis \u00b6 Launch an experiment in Kubernetes. $ iter8 k launch -c load-test-http --set url=https://httpbin.org/get To locally render the Kubernetes experiment, use the dry option. $ iter8 k launch -c load-test-http \\ --set url=https://httpbin.org/get \\ --dry By default, the current directory is used to download and unpack the experiment chart. Change this location using the destDir option. $ iter8 k launch -c load-test-http \\ --set url=https://httpbin.org/get \\ --destDir /tmp iter8 k launch [flags] Options \u00b6 -c, --chartName string name of the experiment chart --chartsParentDir string directory under which the charts folder is located (default \".\") --dry simulate an experiment launch --gitFolder string Git folder containing iter8 charts (default \"github.com/iter8-tools/iter8.git?ref=v0.10.5//charts\") -g, --group string name of the experiment group (default \"default\") -h, --help help for launch --noDownload reuse local charts dir; do not download from Git --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple) Options inherited from parent commands \u00b6 --kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") -n, --namespace string namespace scope for this request SEE ALSO \u00b6 iter8 k - Work with Kubernetes experiments Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 k launch"},{"location":"user-guide/commands/iter8_k_launch/#iter8-k-launch","text":"Launch an experiment in Kubernetes","title":"iter8 k launch"},{"location":"user-guide/commands/iter8_k_launch/#synopsis","text":"Launch an experiment in Kubernetes. $ iter8 k launch -c load-test-http --set url=https://httpbin.org/get To locally render the Kubernetes experiment, use the dry option. $ iter8 k launch -c load-test-http \\ --set url=https://httpbin.org/get \\ --dry By default, the current directory is used to download and unpack the experiment chart. Change this location using the destDir option. $ iter8 k launch -c load-test-http \\ --set url=https://httpbin.org/get \\ --destDir /tmp iter8 k launch [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_k_launch/#options","text":"-c, --chartName string name of the experiment chart --chartsParentDir string directory under which the charts folder is located (default \".\") --dry simulate an experiment launch --gitFolder string Git folder containing iter8 charts (default \"github.com/iter8-tools/iter8.git?ref=v0.10.5//charts\") -g, --group string name of the experiment group (default \"default\") -h, --help help for launch --noDownload reuse local charts dir; do not download from Git --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple)","title":"Options"},{"location":"user-guide/commands/iter8_k_launch/#options-inherited-from-parent-commands","text":"--kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") -n, --namespace string namespace scope for this request","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k_launch/#see-also","text":"iter8 k - Work with Kubernetes experiments","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k_launch/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_k_log/","text":"iter8 k log \u00b6 Fetch logs for a Kubernetes experiment Synopsis \u00b6 Fetch logs for a Kubernetes experiment. $ iter8 k log iter8 k log [flags] Options \u00b6 -g, --group string name of the experiment group (default \"default\") -h, --help help for log Options inherited from parent commands \u00b6 --kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") -n, --namespace string namespace scope for this request SEE ALSO \u00b6 iter8 k - Work with Kubernetes experiments Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 k log"},{"location":"user-guide/commands/iter8_k_log/#iter8-k-log","text":"Fetch logs for a Kubernetes experiment","title":"iter8 k log"},{"location":"user-guide/commands/iter8_k_log/#synopsis","text":"Fetch logs for a Kubernetes experiment. $ iter8 k log iter8 k log [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_k_log/#options","text":"-g, --group string name of the experiment group (default \"default\") -h, --help help for log","title":"Options"},{"location":"user-guide/commands/iter8_k_log/#options-inherited-from-parent-commands","text":"--kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") -n, --namespace string namespace scope for this request","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k_log/#see-also","text":"iter8 k - Work with Kubernetes experiments","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k_log/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_k_report/","text":"iter8 k report \u00b6 Generate report for Kubernetes experiment Synopsis \u00b6 Generate a text or HTML report of a Kubernetes experiment. $ iter8 k report # same as iter8 k report -o text or $ iter8 k report -o html > report.html # view with browser iter8 k report [flags] Options \u00b6 -g, --group string name of the experiment group (default \"default\") -h, --help help for report -o, --outputFormat string text | html (default \"text\") Options inherited from parent commands \u00b6 --kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") -n, --namespace string namespace scope for this request SEE ALSO \u00b6 iter8 k - Work with Kubernetes experiments Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 k report"},{"location":"user-guide/commands/iter8_k_report/#iter8-k-report","text":"Generate report for Kubernetes experiment","title":"iter8 k report"},{"location":"user-guide/commands/iter8_k_report/#synopsis","text":"Generate a text or HTML report of a Kubernetes experiment. $ iter8 k report # same as iter8 k report -o text or $ iter8 k report -o html > report.html # view with browser iter8 k report [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_k_report/#options","text":"-g, --group string name of the experiment group (default \"default\") -h, --help help for report -o, --outputFormat string text | html (default \"text\")","title":"Options"},{"location":"user-guide/commands/iter8_k_report/#options-inherited-from-parent-commands","text":"--kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") -n, --namespace string namespace scope for this request","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k_report/#see-also","text":"iter8 k - Work with Kubernetes experiments","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k_report/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_launch/","text":"iter8 launch \u00b6 Launch an experiment Synopsis \u00b6 Launch an experiment. $ iter8 launch -c load-test-http --set url=https://httpbin.org/get To create the experiment.yaml file without actually running it, use the dry option. $ iter8 launch -c load-test-http \\ --set url=https://httpbin.org/get \\ --dry By default, the current directory is used to download and unpack the experiment chart. Change this location using the destDir option. $ iter8 launch -c load-test-http \\ --set url=https://httpbin.org/get \\ --destDir /tmp iter8 launch [flags] Options \u00b6 -c, --chartName string name of the experiment chart --chartsParentDir string directory under which the charts folder is located (default \".\") --dry simulate an experiment launch --gitFolder string Git folder containing iter8 charts (default \"github.com/iter8-tools/iter8.git?ref=v0.10.5//charts\") -h, --help help for launch --noDownload reuse local charts dir; do not download from Git --runDir string directory where experiment is run; contains experiment.yaml and result.yaml (default \".\") --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple) Options inherited from parent commands \u00b6 -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 launch"},{"location":"user-guide/commands/iter8_launch/#iter8-launch","text":"Launch an experiment","title":"iter8 launch"},{"location":"user-guide/commands/iter8_launch/#synopsis","text":"Launch an experiment. $ iter8 launch -c load-test-http --set url=https://httpbin.org/get To create the experiment.yaml file without actually running it, use the dry option. $ iter8 launch -c load-test-http \\ --set url=https://httpbin.org/get \\ --dry By default, the current directory is used to download and unpack the experiment chart. Change this location using the destDir option. $ iter8 launch -c load-test-http \\ --set url=https://httpbin.org/get \\ --destDir /tmp iter8 launch [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_launch/#options","text":"-c, --chartName string name of the experiment chart --chartsParentDir string directory under which the charts folder is located (default \".\") --dry simulate an experiment launch --gitFolder string Git folder containing iter8 charts (default \"github.com/iter8-tools/iter8.git?ref=v0.10.5//charts\") -h, --help help for launch --noDownload reuse local charts dir; do not download from Git --runDir string directory where experiment is run; contains experiment.yaml and result.yaml (default \".\") --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple)","title":"Options"},{"location":"user-guide/commands/iter8_launch/#options-inherited-from-parent-commands","text":"-l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_launch/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_launch/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_report/","text":"iter8 report \u00b6 Generate experiment report Synopsis \u00b6 Generate a text or HTML report of an experiment. $ iter8 report # same as iter8 report -o text or $ iter8 report -o html > report.html # view with browser iter8 report [flags] Options \u00b6 -h, --help help for report -o, --outputFormat string text | html (default \"text\") --runDir string directory where experiment is run; contains experiment.yaml and result.yaml (default \".\") Options inherited from parent commands \u00b6 -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 report"},{"location":"user-guide/commands/iter8_report/#iter8-report","text":"Generate experiment report","title":"iter8 report"},{"location":"user-guide/commands/iter8_report/#synopsis","text":"Generate a text or HTML report of an experiment. $ iter8 report # same as iter8 report -o text or $ iter8 report -o html > report.html # view with browser iter8 report [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_report/#options","text":"-h, --help help for report -o, --outputFormat string text | html (default \"text\") --runDir string directory where experiment is run; contains experiment.yaml and result.yaml (default \".\")","title":"Options"},{"location":"user-guide/commands/iter8_report/#options-inherited-from-parent-commands","text":"-l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_report/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_report/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_run/","text":"iter8 run \u00b6 Run an experiment Synopsis \u00b6 Run an experiment specified in experiment.yaml output result to result.yaml. $ iter8 run This command is intended for development and testing of experiment charts and tasks. For production usage, the iter8 launch command is recommended. iter8 run [flags] Options \u00b6 -h, --help help for run --runDir string directory where experiment is run; contains experiment.yaml and result.yaml (default \".\") Options inherited from parent commands \u00b6 -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 run"},{"location":"user-guide/commands/iter8_run/#iter8-run","text":"Run an experiment","title":"iter8 run"},{"location":"user-guide/commands/iter8_run/#synopsis","text":"Run an experiment specified in experiment.yaml output result to result.yaml. $ iter8 run This command is intended for development and testing of experiment charts and tasks. For production usage, the iter8 launch command is recommended. iter8 run [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_run/#options","text":"-h, --help help for run --runDir string directory where experiment is run; contains experiment.yaml and result.yaml (default \".\")","title":"Options"},{"location":"user-guide/commands/iter8_run/#options-inherited-from-parent-commands","text":"-l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_run/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_run/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/commands/iter8_version/","text":"iter8 version \u00b6 Print Iter8 CLI version Synopsis \u00b6 Print the version of Iter8 CLI. $ iter8 version The output may look as follows: $ version.BuildInfo{Version:\"v0.10.1\", GitCommit:\"fe51cd1e31e6a202cba7aliv9552a6d418ded79a\", GoVersion:\"go1.17.6\"} In the sample output shown above: Version is the semantic version of the Iter8 CLI. GitCommit is the SHA hash for the commit that this version was built from. GoVersion is the version of Go that was used to compile Iter8 CLI. iter8 version [flags] Options \u00b6 -h, --help help for version --short print abbreviated version info Options inherited from parent commands \u00b6 -l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 14-Apr-2022 \u00b6","title":"iter8 version"},{"location":"user-guide/commands/iter8_version/#iter8-version","text":"Print Iter8 CLI version","title":"iter8 version"},{"location":"user-guide/commands/iter8_version/#synopsis","text":"Print the version of Iter8 CLI. $ iter8 version The output may look as follows: $ version.BuildInfo{Version:\"v0.10.1\", GitCommit:\"fe51cd1e31e6a202cba7aliv9552a6d418ded79a\", GoVersion:\"go1.17.6\"} In the sample output shown above: Version is the semantic version of the Iter8 CLI. GitCommit is the SHA hash for the commit that this version was built from. GoVersion is the version of Go that was used to compile Iter8 CLI. iter8 version [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_version/#options","text":"-h, --help help for version --short print abbreviated version info","title":"Options"},{"location":"user-guide/commands/iter8_version/#options-inherited-from-parent-commands","text":"-l, --loglevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_version/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_version/#auto-generated-by-spf13cobra-on-14-apr-2022","text":"","title":"Auto generated by spf13/cobra on 14-Apr-2022"},{"location":"user-guide/topics/group/","text":"Experiment namespace and group \u00b6 Iter8 experiments like load-test-http and load-test-grpc can be run within Kubernetes. Such experiments are launched within a Kubernetes namespace, and associated with a unique group within that namespace. For example, consider the following invocation: iter8 k launch -c load-test-http -g hbin \\ --set url = http://httpbin.default \\ --set SLOs.http/latency-mean = 50 In the above invocation, the iter8 k launch implicitly specifies the namespace as default , and explicitly specifies the group as hbin . If the group name is not specified explicitly, then it is set to default . The following example illustrates the relationship between namespaces, groups, and experiments. . \u251c\u2500\u2500 namespace1 \u2502 \u251c\u2500\u2500 group-a \u2502 \u2502 \u2514\u2500\u2500 experiment \u2502 \u251c\u2500\u2500 group-b \u2502 \u2502 \u2514\u2500\u2500 experiment \u2502 \u2514\u2500\u2500 group-c \u2502 \u2514\u2500\u2500 experiment \u251c\u2500\u2500 namespace2 \u2502 \u251c\u2500\u2500 group-a \u2502 \u2502 \u2514\u2500\u2500 experiment \u2502 \u251c\u2500\u2500 group-b \u2502 \u2502 \u2514\u2500\u2500 experiment \u2502 \u2514\u2500\u2500 group-c \u2502 \u2514\u2500\u2500 experiment \u2514\u2500\u2500 namespace3 \u2514\u2500\u2500 group-x \u2514\u2500\u2500 experiment Use-cases \u00b6 Run multiple experiments concurrently within a Kubernetes namespace. These experiments may be associated with the same app or with different apps. Replace a currently running experiment in Kubernetes with a new one. When you invoke iter8 k launch , any previous experiment runs within the group are wiped out and replaced with a new run. How groups work \u00b6 Under the covers, Iter8 implements each experiment group as a Helm release and each new experiment run within the group as an update of that release.","title":"Namespace and group"},{"location":"user-guide/topics/group/#experiment-namespace-and-group","text":"Iter8 experiments like load-test-http and load-test-grpc can be run within Kubernetes. Such experiments are launched within a Kubernetes namespace, and associated with a unique group within that namespace. For example, consider the following invocation: iter8 k launch -c load-test-http -g hbin \\ --set url = http://httpbin.default \\ --set SLOs.http/latency-mean = 50 In the above invocation, the iter8 k launch implicitly specifies the namespace as default , and explicitly specifies the group as hbin . If the group name is not specified explicitly, then it is set to default . The following example illustrates the relationship between namespaces, groups, and experiments. . \u251c\u2500\u2500 namespace1 \u2502 \u251c\u2500\u2500 group-a \u2502 \u2502 \u2514\u2500\u2500 experiment \u2502 \u251c\u2500\u2500 group-b \u2502 \u2502 \u2514\u2500\u2500 experiment \u2502 \u2514\u2500\u2500 group-c \u2502 \u2514\u2500\u2500 experiment \u251c\u2500\u2500 namespace2 \u2502 \u251c\u2500\u2500 group-a \u2502 \u2502 \u2514\u2500\u2500 experiment \u2502 \u251c\u2500\u2500 group-b \u2502 \u2502 \u2514\u2500\u2500 experiment \u2502 \u2514\u2500\u2500 group-c \u2502 \u2514\u2500\u2500 experiment \u2514\u2500\u2500 namespace3 \u2514\u2500\u2500 group-x \u2514\u2500\u2500 experiment","title":"Experiment namespace and group"},{"location":"user-guide/topics/group/#use-cases","text":"Run multiple experiments concurrently within a Kubernetes namespace. These experiments may be associated with the same app or with different apps. Replace a currently running experiment in Kubernetes with a new one. When you invoke iter8 k launch , any previous experiment runs within the group are wiped out and replaced with a new run.","title":"Use-cases"},{"location":"user-guide/topics/group/#how-groups-work","text":"Under the covers, Iter8 implements each experiment group as a Helm release and each new experiment run within the group as an update of that release.","title":"How groups work"},{"location":"user-guide/topics/readiness/","text":"Checking readiness of Kubernetes resources \u00b6 Many Iter8 experiments, like load-test-http , and load-test-grpc are intended to run inside a Kubernetes cluster and interact with Kubernetes resources. In such cases, it is useful to check the resources involved are ready at the beginning of the experiment, before other experiment tasks are executed. You can do this with various ready.* experiment parameters. iter8 k -c load-test-http \\ --set url = http://httpbin.default \\ --set ready.deploy = httpbin Currently, Iter8 provides native support for the following resource types: Deployment : resource is ready if it exists and has the status condition Available set to True Service : resource is ready if it exists The option ready.timeout can be used to specify the maximum time that the experiment should wait for the readiness condition to be satisfied. Readiness checking other resources \u00b6 Iter8 can be extended to support readiness checking of additional resource types beyond deployments and services. Please consider submitting a pull request with new resource types. In brief, the current implementation uses two templates task.ready and task.ready.rbac . To support a new type: Modify task.ready to define the group/version/resource and, optionally, a condition that should be checked. For example, to add a readiness check for a Knative Service , the following might be added: {{ - if .Values.ready.ksrv }} # task: determine if Knative Service is Ready - task : k8s-object-ready with : name : {{ .Values.ready.ksrv | quote }} group : serving.knative.dev version : v1 resource : services condition : Ready {{ - include \"task.ready.tn\" . | indent 4 }} {{ end }} Add a new apiGroup to task.ready.rbac template for Role . For example: {{ - if .Values.ready.ksrv }} - apiGroups : [ \"apps\" ] resourceNames : [{{ .Values.ready.ksrv | quote }}] resources : [ \"services\" ] verbs : [ \"get\" ] {{ - end }}","title":"Readiness checks"},{"location":"user-guide/topics/readiness/#checking-readiness-of-kubernetes-resources","text":"Many Iter8 experiments, like load-test-http , and load-test-grpc are intended to run inside a Kubernetes cluster and interact with Kubernetes resources. In such cases, it is useful to check the resources involved are ready at the beginning of the experiment, before other experiment tasks are executed. You can do this with various ready.* experiment parameters. iter8 k -c load-test-http \\ --set url = http://httpbin.default \\ --set ready.deploy = httpbin Currently, Iter8 provides native support for the following resource types: Deployment : resource is ready if it exists and has the status condition Available set to True Service : resource is ready if it exists The option ready.timeout can be used to specify the maximum time that the experiment should wait for the readiness condition to be satisfied.","title":"Checking readiness of Kubernetes resources"},{"location":"user-guide/topics/readiness/#readiness-checking-other-resources","text":"Iter8 can be extended to support readiness checking of additional resource types beyond deployments and services. Please consider submitting a pull request with new resource types. In brief, the current implementation uses two templates task.ready and task.ready.rbac . To support a new type: Modify task.ready to define the group/version/resource and, optionally, a condition that should be checked. For example, to add a readiness check for a Knative Service , the following might be added: {{ - if .Values.ready.ksrv }} # task: determine if Knative Service is Ready - task : k8s-object-ready with : name : {{ .Values.ready.ksrv | quote }} group : serving.knative.dev version : v1 resource : services condition : Ready {{ - include \"task.ready.tn\" . | indent 4 }} {{ end }} Add a new apiGroup to task.ready.rbac template for Role . For example: {{ - if .Values.ready.ksrv }} - apiGroups : [ \"apps\" ] resourceNames : [{{ .Values.ready.ksrv | quote }}] resources : [ \"services\" ] verbs : [ \"get\" ] {{ - end }}","title":"Readiness checking other resources"},{"location":"user-guide/topics/values/","text":"Chart Values \u00b6 An Iter8 experiment chart is a Helm chart, and inherits the latter's file structure . In particular, the chart contains the values.yaml file which documents all the parameters supported by the chart, and their (non-nil) default values (if any). For example, to view values.yaml file for the load-test-http chart, do as follows: iter8 hub cat charts/load-test-http/values.yaml","title":"Chart values"},{"location":"user-guide/topics/values/#chart-values","text":"An Iter8 experiment chart is a Helm chart, and inherits the latter's file structure . In particular, the chart contains the values.yaml file which documents all the parameters supported by the chart, and their (non-nil) default values (if any). For example, to view values.yaml file for the load-test-http chart, do as follows: iter8 hub cat charts/load-test-http/values.yaml","title":"Chart Values"}]}