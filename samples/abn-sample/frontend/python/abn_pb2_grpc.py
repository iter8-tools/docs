# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import abn_pb2 as abn__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ABNStub(object):
    """for more information, see https://github.com/iter8-tools/iter8/issues/1257

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Lookup = channel.unary_unary(
                '/main.ABN/Lookup',
                request_serializer=abn__pb2.Application.SerializeToString,
                response_deserializer=abn__pb2.VersionRecommendation.FromString,
                )
        self.WriteMetric = channel.unary_unary(
                '/main.ABN/WriteMetric',
                request_serializer=abn__pb2.MetricValue.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class ABNServicer(object):
    """for more information, see https://github.com/iter8-tools/iter8/issues/1257

    """

    def Lookup(self, request, context):
        """Identify a version (index) the caller should send a request to.
        Should be called for each request (transaction).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteMetric(self, request, context):
        """Write a metric value to metrics database.
        The metric value is explicitly associated with a list of transactions that contributed to its computation.
        The user is expected to identify these transactions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ABNServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Lookup': grpc.unary_unary_rpc_method_handler(
                    servicer.Lookup,
                    request_deserializer=abn__pb2.Application.FromString,
                    response_serializer=abn__pb2.VersionRecommendation.SerializeToString,
            ),
            'WriteMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteMetric,
                    request_deserializer=abn__pb2.MetricValue.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.ABN', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ABN(object):
    """for more information, see https://github.com/iter8-tools/iter8/issues/1257

    """

    @staticmethod
    def Lookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ABN/Lookup',
            abn__pb2.Application.SerializeToString,
            abn__pb2.VersionRecommendation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ABN/WriteMetric',
            abn__pb2.MetricValue.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
