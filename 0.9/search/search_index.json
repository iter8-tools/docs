{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Iter8 \u00b6","title":"Home"},{"location":"#iter8","text":"","title":"Iter8"},{"location":"contributing/","text":"Overview \u00b6 Welcome! We are delighted that you want to contribute to Iter8! \ud83d\udc96 As you get started, you are in the best position to give us feedback on key areas including: Problems found during setup of Iter8 Gaps in our quick start tutorial and other documentation Bugs in our test and automation scripts If anything doesn't make sense, or doesn't work when you run it, please open a bug report and let us know! Ways to contribute \u00b6 We welcome many different types of contributions including: Tutorials and other documentation Experiment charts CLI features, and experiment tasks CI, builds, and tests Web design Reviewing pull requests Communication, social media, blog posts Ask for help \u00b6 The best ways to reach us with a question is to ask... On the original GitHub issue In the #development channel in the Iter8 Slack workspace During our community meetings Find an issue \u00b6 Iter8 issues are managed here . Issued labeled good first issue have extra information to help you make your first contribution. Issues labeled help wanted are issues suitable for someone who has already submitted their first pull request and is good to move on to the second one. Sometimes there won\u2019t be any issues with these labels. That\u2019s ok! There is likely still something for you to work on. If you want to contribute but you don\u2019t know where to start or can't find a suitable issue, you can reach out to us over the Iter8 Slack workspace for help finding something to work on. Once you see an issue that you'd like to work on, please post a comment saying that you want to work on it. Something like \"I want to work on this\" is fine. Pull request lifecycle \u00b6 Your PR is associated with one (and infrequently, with more than one) GitHub issue . You can start the submission of your PR as soon as this issue has been created. Follow the standard GitHub fork and pull request process when creating and submitting your PR. The associated GitHub issue might need to go through design discussions and may not be ready for development. Your PR might require new tests; these new or existing tests may not yet be running successfully. At this stage, keep your PR as a draft , to signal that it is not yet ready for review. Once design discussions are complete and tests pass, convert the draft PR into a regular PR to signal that it is ready for review. Additionally, post a message in the #development Slack channel of the Iter8 Slack workspace with a link to your PR. This will expedite the review. You can expect an initial review within 1-2 days of submitting a PR, and follow up reviews (if any) to happen over 2-5 days. Use the #development Slack channel of Iter8 Slack workspace to ping/bump when the pull request is ready for further review or if it appears stalled. Iter8 releases happen frequently. Once your PR is merged, you can expect your contribution to show up live in a short amount of time at https://iter8.tools . Sign Your Commits \u00b6 Licensing is important to open source projects. It provides some assurances that the software will continue to be available based under the terms that the author(s) desired. We require that contributors sign off on commits submitted to our project's repositories. The Developer Certificate of Origin (DCO) is a way to certify that you wrote and have the right to contribute the code you are submitting to the project. Read GitHub's documentation on signing your commits . You sign-off by adding the following to your commit messages. Your sign-off must match the Git user and email associated with the commit. This is my commit message Signed-off-by: Your Name <your.name@example.com> Git has a -s command line option to do this automatically: git commit -s -m 'This is my commit message' If you forgot to do this and have not yet pushed your changes to the remote repository, you can amend your commit with the sign-off by running: git commit --amend -s Development environment setup \u00b6 The Iter8 project consists of the following repos. iter8-tools/iter8 : source for Iter8 CLI iter8-tools/hub : source for Iter8 experiment charts iter8-tools/docs : source for Iter8 docs iter8-tools/homebrew-iter8 : Homebrew formula for installing Iter8 CLI iter8-tools/iter8 \u00b6 This is the source repo for Iter8 CLI. Clone iter8 \u00b6 git clone https://github.com/iter8-tools/iter8.git Build Iter8 \u00b6 make build Install Iter8 locally \u00b6 make clean install iter8 version Run unit tests and see coverage information \u00b6 make tests make coverage make htmlcov iter8-tools/hub \u00b6 This is the source repo for Iter8 experiment charts. Clone hub \u00b6 git clone https://github.com/iter8-tools/hub.git Add tests \u00b6 Add integration tests for Iter8 hub in the .github/workflows/tests.yaml file. Versioning \u00b6 Iter8 experiment charts are Helm charts under the covers, and are semantically versioned as per Helm chart versioning specifications . Every change to the chart must be accompanied by an increment to the version number of the chart. For most changes, this would mean an increment to the patch version (for example, the version field in Chart.yaml may be incremented from 0.1.0 to 0.1.1 ). iter8-tools/docs \u00b6 This is the source repo for Iter8 documentation. Clone docs \u00b6 git clone https://github.com/iter8-tools/docs.git Locally serve docs \u00b6 From the root of this repo: python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt mkdocs serve -s You can now see your local docs at http://localhost:8000 . You will also see live updates to http://localhost:8000 as you update the contents of the docs folder. Add tests \u00b6 Add end-to-end tests for Iter8 in the .github/workflows/tests.yaml file.","title":"Contributing"},{"location":"contributing/#overview","text":"Welcome! We are delighted that you want to contribute to Iter8! \ud83d\udc96 As you get started, you are in the best position to give us feedback on key areas including: Problems found during setup of Iter8 Gaps in our quick start tutorial and other documentation Bugs in our test and automation scripts If anything doesn't make sense, or doesn't work when you run it, please open a bug report and let us know!","title":"Overview"},{"location":"contributing/#ways-to-contribute","text":"We welcome many different types of contributions including: Tutorials and other documentation Experiment charts CLI features, and experiment tasks CI, builds, and tests Web design Reviewing pull requests Communication, social media, blog posts","title":"Ways to contribute"},{"location":"contributing/#ask-for-help","text":"The best ways to reach us with a question is to ask... On the original GitHub issue In the #development channel in the Iter8 Slack workspace During our community meetings","title":"Ask for help"},{"location":"contributing/#find-an-issue","text":"Iter8 issues are managed here . Issued labeled good first issue have extra information to help you make your first contribution. Issues labeled help wanted are issues suitable for someone who has already submitted their first pull request and is good to move on to the second one. Sometimes there won\u2019t be any issues with these labels. That\u2019s ok! There is likely still something for you to work on. If you want to contribute but you don\u2019t know where to start or can't find a suitable issue, you can reach out to us over the Iter8 Slack workspace for help finding something to work on. Once you see an issue that you'd like to work on, please post a comment saying that you want to work on it. Something like \"I want to work on this\" is fine.","title":"Find an issue"},{"location":"contributing/#pull-request-lifecycle","text":"Your PR is associated with one (and infrequently, with more than one) GitHub issue . You can start the submission of your PR as soon as this issue has been created. Follow the standard GitHub fork and pull request process when creating and submitting your PR. The associated GitHub issue might need to go through design discussions and may not be ready for development. Your PR might require new tests; these new or existing tests may not yet be running successfully. At this stage, keep your PR as a draft , to signal that it is not yet ready for review. Once design discussions are complete and tests pass, convert the draft PR into a regular PR to signal that it is ready for review. Additionally, post a message in the #development Slack channel of the Iter8 Slack workspace with a link to your PR. This will expedite the review. You can expect an initial review within 1-2 days of submitting a PR, and follow up reviews (if any) to happen over 2-5 days. Use the #development Slack channel of Iter8 Slack workspace to ping/bump when the pull request is ready for further review or if it appears stalled. Iter8 releases happen frequently. Once your PR is merged, you can expect your contribution to show up live in a short amount of time at https://iter8.tools .","title":"Pull request lifecycle"},{"location":"contributing/#sign-your-commits","text":"Licensing is important to open source projects. It provides some assurances that the software will continue to be available based under the terms that the author(s) desired. We require that contributors sign off on commits submitted to our project's repositories. The Developer Certificate of Origin (DCO) is a way to certify that you wrote and have the right to contribute the code you are submitting to the project. Read GitHub's documentation on signing your commits . You sign-off by adding the following to your commit messages. Your sign-off must match the Git user and email associated with the commit. This is my commit message Signed-off-by: Your Name <your.name@example.com> Git has a -s command line option to do this automatically: git commit -s -m 'This is my commit message' If you forgot to do this and have not yet pushed your changes to the remote repository, you can amend your commit with the sign-off by running: git commit --amend -s","title":"Sign Your Commits"},{"location":"contributing/#development-environment-setup","text":"The Iter8 project consists of the following repos. iter8-tools/iter8 : source for Iter8 CLI iter8-tools/hub : source for Iter8 experiment charts iter8-tools/docs : source for Iter8 docs iter8-tools/homebrew-iter8 : Homebrew formula for installing Iter8 CLI","title":"Development environment setup"},{"location":"contributing/#iter8-toolsiter8","text":"This is the source repo for Iter8 CLI.","title":"iter8-tools/iter8"},{"location":"contributing/#clone-iter8","text":"git clone https://github.com/iter8-tools/iter8.git","title":"Clone iter8"},{"location":"contributing/#build-iter8","text":"make build","title":"Build Iter8"},{"location":"contributing/#install-iter8-locally","text":"make clean install iter8 version","title":"Install Iter8 locally"},{"location":"contributing/#run-unit-tests-and-see-coverage-information","text":"make tests make coverage make htmlcov","title":"Run unit tests and see coverage information"},{"location":"contributing/#iter8-toolshub","text":"This is the source repo for Iter8 experiment charts.","title":"iter8-tools/hub"},{"location":"contributing/#clone-hub","text":"git clone https://github.com/iter8-tools/hub.git","title":"Clone hub"},{"location":"contributing/#add-tests","text":"Add integration tests for Iter8 hub in the .github/workflows/tests.yaml file.","title":"Add tests"},{"location":"contributing/#versioning","text":"Iter8 experiment charts are Helm charts under the covers, and are semantically versioned as per Helm chart versioning specifications . Every change to the chart must be accompanied by an increment to the version number of the chart. For most changes, this would mean an increment to the patch version (for example, the version field in Chart.yaml may be incremented from 0.1.0 to 0.1.1 ).","title":"Versioning"},{"location":"contributing/#iter8-toolsdocs","text":"This is the source repo for Iter8 documentation.","title":"iter8-tools/docs"},{"location":"contributing/#clone-docs","text":"git clone https://github.com/iter8-tools/docs.git","title":"Clone docs"},{"location":"contributing/#locally-serve-docs","text":"From the root of this repo: python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt mkdocs serve -s You can now see your local docs at http://localhost:8000 . You will also see live updates to http://localhost:8000 as you update the contents of the docs folder.","title":"Locally serve docs"},{"location":"contributing/#add-tests_1","text":"Add end-to-end tests for Iter8 in the .github/workflows/tests.yaml file.","title":"Add tests"},{"location":"roadmap/","text":"Roadmap \u00b6 Iter8 GitHub Action Iter8 Tekton task Readiness checks for K8s resources Examples for experimenting inside K8s A/B(/n) testing example AutoX service for auto launching Iter8 experiments, app version tracking, and business telemetry read-metrics-from-db task adjust-traffic-split task Ability to run multiple loops of an experiment Iter8 experiments & progressive delivery for multi-cluster and edge cloud","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Iter8 GitHub Action Iter8 Tekton task Readiness checks for K8s resources Examples for experimenting inside K8s A/B(/n) testing example AutoX service for auto launching Iter8 experiments, app version tracking, and business telemetry read-metrics-from-db task adjust-traffic-split task Ability to run multiple loops of an experiment Iter8 experiments & progressive delivery for multi-cluster and edge cloud","title":"Roadmap"},{"location":"community/community/","text":"Community \u00b6 Meetings \u00b6 Everyone is welcome to join our community meetings. They are on the 3 rd Wednesday of each month from 11:00 AM \u2013 12:00 PM EST/EDT. Here is the meeting link . View the calendar or subscribe ( Google Calendar , iCalendar file ). Feel free to bring discussion topics to the meeting. If you would like to present a demo, please drop us a note in the Iter8 Slack workspace . Our meetings are also recorded and publicly available on our YouTube channel . Slack \u00b6 Iter8 Slack workspace is here . Join the Iter8 Slack for usage and development related discussions. GitHub Issues \u00b6 GitHub issues for all Iter8 repos are managed here .","title":"Community"},{"location":"community/community/#community","text":"","title":"Community"},{"location":"community/community/#meetings","text":"Everyone is welcome to join our community meetings. They are on the 3 rd Wednesday of each month from 11:00 AM \u2013 12:00 PM EST/EDT. Here is the meeting link . View the calendar or subscribe ( Google Calendar , iCalendar file ). Feel free to bring discussion topics to the meeting. If you would like to present a demo, please drop us a note in the Iter8 Slack workspace . Our meetings are also recorded and publicly available on our YouTube channel .","title":"Meetings"},{"location":"community/community/#slack","text":"Iter8 Slack workspace is here . Join the Iter8 Slack for usage and development related discussions.","title":"Slack"},{"location":"community/community/#github-issues","text":"GitHub issues for all Iter8 repos are managed here .","title":"GitHub Issues"},{"location":"community/news/","text":"News and Announcements \u00b6 Feb 2022: The New Stack blog article on Simple HTTP Load Testing with SLOs Nov 2021: Iter8 at ACM Symposium on Cloud Computing. Full paper here Iter8 v0.7 and older Oct 2021: New Stack blog article by Hai Huang: Progressive Delivery on OpenShift Oct 2021: Iter8 at PREVAIL conference. Video coming soon. Conference details Oct 2021: New Stack blog article by Srinivasan Parthasarathy: Validate Service-Level Objectives of REST APIs Using Iter8 Jul 2021: Blog article by Clive Cox: ML\u200c \u200cProgressive\u200c \u200cRollouts\u200c \u200cwith\u200c \u200cSeldon\u200c \u200cand\u200c \u200cIter8\u200c Jul 2021: Iter8 at Knative meetup May 2021: Iter8 at KubeCon + CloudNativeCon Europe Mar 2021: Iter8 at Knative meetup Mar 2021: Kubeflow blog article by Animesh Singh and Dan Sun: Operationalize, Scale and Infuse Trust in AI Models using KFServing Oct 2020: Medium blog article by Michael Kalantar: Automated Canary Release of Microservices on Kubernetes using Tekton and iter8 Oct 2020: Medium blog article by Kusuma Chalasani: Better Performance with kruize and iter8 for your microservices application Oct 2020: Medium blog article by Srinivasan Parthasarathy: Automated Canary Release of TensorFlow Models on Kubernetes Oct 2020: Medium blog article by Sushma Ravichandran: Iter8: Take a look at the magic under the hood Aug 2020: Medium blog article by Fabio Oliveira: Iter8: Achieving Agility with Control","title":"News"},{"location":"community/news/#news-and-announcements","text":"Feb 2022: The New Stack blog article on Simple HTTP Load Testing with SLOs Nov 2021: Iter8 at ACM Symposium on Cloud Computing. Full paper here Iter8 v0.7 and older Oct 2021: New Stack blog article by Hai Huang: Progressive Delivery on OpenShift Oct 2021: Iter8 at PREVAIL conference. Video coming soon. Conference details Oct 2021: New Stack blog article by Srinivasan Parthasarathy: Validate Service-Level Objectives of REST APIs Using Iter8 Jul 2021: Blog article by Clive Cox: ML\u200c \u200cProgressive\u200c \u200cRollouts\u200c \u200cwith\u200c \u200cSeldon\u200c \u200cand\u200c \u200cIter8\u200c Jul 2021: Iter8 at Knative meetup May 2021: Iter8 at KubeCon + CloudNativeCon Europe Mar 2021: Iter8 at Knative meetup Mar 2021: Kubeflow blog article by Animesh Singh and Dan Sun: Operationalize, Scale and Infuse Trust in AI Models using KFServing Oct 2020: Medium blog article by Michael Kalantar: Automated Canary Release of Microservices on Kubernetes using Tekton and iter8 Oct 2020: Medium blog article by Kusuma Chalasani: Better Performance with kruize and iter8 for your microservices application Oct 2020: Medium blog article by Srinivasan Parthasarathy: Automated Canary Release of TensorFlow Models on Kubernetes Oct 2020: Medium blog article by Sushma Ravichandran: Iter8: Take a look at the magic under the hood Aug 2020: Medium blog article by Fabio Oliveira: Iter8: Achieving Agility with Control","title":"News and Announcements"},{"location":"getting-started/concepts/","text":"Iter8 \u00b6 Kubernetes release optimizer built for developers, DevOps and MLOps engineers, SREs, and data scientists. Iter8 experiment \u00b6 Iter8 experiments make it simple to collect performance and business metrics for apps and ML models, assess, compare and validate multiple app/ML model versions, promote the winning version, and maximize business value in each release. Experiment chart \u00b6 Experiment charts are Helm charts with a special structure that contain reusable experiment templates. Iter8 combines experiment charts with user supplied values to generate runnable experiment.yaml files. Iter8 experiment charts enable you to launch powerful release optimization experiments in seconds. Their usage is described in depth in various Iter8 tutorials . Iter8 hub \u00b6 Iter8 hub refers to a Helm repo that hosts Iter8 experiment charts. The official Iter8 hub is located at https://iter8-tools.github.io/hub/ . You can create, package and host Iter8 experiment charts in any Helm repo and use them with Iter8 CLI. Features at a glance \u00b6 Load testing with SLOs Iter8 experiments can generate requests for HTTP and gRPC services, collect built-in latency and error-related metrics, and validate SLOs. A/B(/n) testing Grow your business with every release. Iter8 experiments can compare multiple versions based on business value and identify a winner. Simple to use Get started with Iter8 in seconds using pre-packaged experiment charts. Run Iter8 experiments locally, inside Kubernetes, or inside your CI/CD/GitOps pipelines. App frameworks Use with any app, serverless, or ML framework. Iter8 works with Kubernetes deployments, statefulsets, Knative services, KServe/Seldon ML deployments, or other custom Kubernetes resource types. Implementation \u00b6 Iter8 is written in go and builds on a few awesome open source projects including: Helm Fortio ghz plotly.js","title":"Concepts"},{"location":"getting-started/concepts/#iter8","text":"Kubernetes release optimizer built for developers, DevOps and MLOps engineers, SREs, and data scientists.","title":"Iter8"},{"location":"getting-started/concepts/#iter8-experiment","text":"Iter8 experiments make it simple to collect performance and business metrics for apps and ML models, assess, compare and validate multiple app/ML model versions, promote the winning version, and maximize business value in each release.","title":"Iter8 experiment"},{"location":"getting-started/concepts/#experiment-chart","text":"Experiment charts are Helm charts with a special structure that contain reusable experiment templates. Iter8 combines experiment charts with user supplied values to generate runnable experiment.yaml files. Iter8 experiment charts enable you to launch powerful release optimization experiments in seconds. Their usage is described in depth in various Iter8 tutorials .","title":"Experiment chart"},{"location":"getting-started/concepts/#iter8-hub","text":"Iter8 hub refers to a Helm repo that hosts Iter8 experiment charts. The official Iter8 hub is located at https://iter8-tools.github.io/hub/ . You can create, package and host Iter8 experiment charts in any Helm repo and use them with Iter8 CLI.","title":"Iter8 hub"},{"location":"getting-started/concepts/#features-at-a-glance","text":"Load testing with SLOs Iter8 experiments can generate requests for HTTP and gRPC services, collect built-in latency and error-related metrics, and validate SLOs. A/B(/n) testing Grow your business with every release. Iter8 experiments can compare multiple versions based on business value and identify a winner. Simple to use Get started with Iter8 in seconds using pre-packaged experiment charts. Run Iter8 experiments locally, inside Kubernetes, or inside your CI/CD/GitOps pipelines. App frameworks Use with any app, serverless, or ML framework. Iter8 works with Kubernetes deployments, statefulsets, Knative services, KServe/Seldon ML deployments, or other custom Kubernetes resource types.","title":"Features at a glance"},{"location":"getting-started/concepts/#implementation","text":"Iter8 is written in go and builds on a few awesome open source projects including: Helm Fortio ghz plotly.js","title":"Implementation"},{"location":"getting-started/expreport/","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 1 Number of completed tasks: 1 Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/http-error-count | 0 .00 built-in/http-error-rate | 0 .00 built-in/http-latency-max ( msec ) | 203 .78 built-in/http-latency-mean ( msec ) | 17 .00 built-in/http-latency-min ( msec ) | 4 .20 built-in/http-latency-p50 ( msec ) | 10 .67 built-in/http-latency-p75 ( msec ) | 12 .33 built-in/http-latency-p90 ( msec ) | 14 .00 built-in/http-latency-p95 ( msec ) | 15 .67 built-in/http-latency-p99 ( msec ) | 202 .84 built-in/http-latency-p99.9 ( msec ) | 203 .69 built-in/http-latency-stddev ( msec ) | 37 .94 built-in/http-request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this","title":"Expreport"},{"location":"getting-started/help/","text":"Get Help \u00b6 Read Iter8 docs . Join the Iter8 Slack workspace . File an issue or start a discussion on the Iter8 GitHub repo . Attend our community meetings!","title":"Get help"},{"location":"getting-started/help/#get-help","text":"Read Iter8 docs . Join the Iter8 Slack workspace . File an issue or start a discussion on the Iter8 GitHub repo . Attend our community meetings!","title":"Get Help"},{"location":"getting-started/install/","text":"Install Iter8 CLI \u00b6 Brew Binaries Source Go 1.17+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Install a specific version You can install the Iter8 CLI with specific major and minor version numbers. For example, the following command installs the release of the Iter8 CLI with major 0 and minor 9 . brew tap iter8-tools/iter8 brew install iter8@0.9 You can replace v0.9.0 with any desired Iter8 release tag . darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-darwin-amd64.tar.gz tar -xvf iter8-darwin-amd64.tar.gz Move darwin-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-linux-amd64.tar.gz tar -xvf iter8-linux-amd64.tar.gz Move linux-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-linux-386.tar.gz tar -xvf iter8-linux-386.tar.gz Move linux-386/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-windows-amd64.tar.gz tar -xvf iter8-windows-amd64.tar.gz Move windows-amd64/iter8.exe to any directory in your PATH . Go 1.17+ is a pre-requisite. Replace v0.9.0 with any desired Iter8 release tag . export TAG = v0.9.0 https://github.com/iter8-tools/iter8.git?ref = ${ TAG } cd iter8 make install You can replace v0.9.0 with any desired Iter8 release tag . go install github.com/iter8-tools/iter8@v0.9.0 You can now run iter8 (from your gopath bin/ directory)","title":"Install Iter8"},{"location":"getting-started/install/#install-iter8-cli","text":"Brew Binaries Source Go 1.17+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Install a specific version You can install the Iter8 CLI with specific major and minor version numbers. For example, the following command installs the release of the Iter8 CLI with major 0 and minor 9 . brew tap iter8-tools/iter8 brew install iter8@0.9 You can replace v0.9.0 with any desired Iter8 release tag . darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-darwin-amd64.tar.gz tar -xvf iter8-darwin-amd64.tar.gz Move darwin-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-linux-amd64.tar.gz tar -xvf iter8-linux-amd64.tar.gz Move linux-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-linux-386.tar.gz tar -xvf iter8-linux-386.tar.gz Move linux-386/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-windows-amd64.tar.gz tar -xvf iter8-windows-amd64.tar.gz Move windows-amd64/iter8.exe to any directory in your PATH . Go 1.17+ is a pre-requisite. Replace v0.9.0 with any desired Iter8 release tag . export TAG = v0.9.0 https://github.com/iter8-tools/iter8.git?ref = ${ TAG } cd iter8 make install You can replace v0.9.0 with any desired Iter8 release tag . go install github.com/iter8-tools/iter8@v0.9.0 You can now run iter8 (from your gopath bin/ directory)","title":"Install Iter8 CLI"},{"location":"getting-started/installiter8cli/","text":"Brew Binaries Source Go 1.17+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Install a specific version You can install the Iter8 CLI with specific major and minor version numbers. For example, the following command installs the release of the Iter8 CLI with major 0 and minor 9 . brew tap iter8-tools/iter8 brew install iter8@0.9 You can replace v0.9.0 with any desired Iter8 release tag . darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-darwin-amd64.tar.gz tar -xvf iter8-darwin-amd64.tar.gz Move darwin-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-linux-amd64.tar.gz tar -xvf iter8-linux-amd64.tar.gz Move linux-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-linux-386.tar.gz tar -xvf iter8-linux-386.tar.gz Move linux-386/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-windows-amd64.tar.gz tar -xvf iter8-windows-amd64.tar.gz Move windows-amd64/iter8.exe to any directory in your PATH . Go 1.17+ is a pre-requisite. Replace v0.9.0 with any desired Iter8 release tag . export TAG = v0.9.0 https://github.com/iter8-tools/iter8.git?ref = ${ TAG } cd iter8 make install You can replace v0.9.0 with any desired Iter8 release tag . go install github.com/iter8-tools/iter8@v0.9.0 You can now run iter8 (from your gopath bin/ directory)","title":"Installiter8cli"},{"location":"getting-started/your-first-experiment/","text":"Your First Experiment \u00b6 Get started with your first Iter8 experiment by benchmarking an HTTP service. 1. Install Iter8 CLI \u00b6 Brew Binaries Source Go 1.17+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Install a specific version You can install the Iter8 CLI with specific major and minor version numbers. For example, the following command installs the release of the Iter8 CLI with major 0 and minor 9 . brew tap iter8-tools/iter8 brew install iter8@0.9 You can replace v0.9.0 with any desired Iter8 release tag . darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-darwin-amd64.tar.gz tar -xvf iter8-darwin-amd64.tar.gz Move darwin-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-linux-amd64.tar.gz tar -xvf iter8-linux-amd64.tar.gz Move linux-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-linux-386.tar.gz tar -xvf iter8-linux-386.tar.gz Move linux-386/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-windows-amd64.tar.gz tar -xvf iter8-windows-amd64.tar.gz Move windows-amd64/iter8.exe to any directory in your PATH . Go 1.17+ is a pre-requisite. Replace v0.9.0 with any desired Iter8 release tag . export TAG = v0.9.0 https://github.com/iter8-tools/iter8.git?ref = ${ TAG } cd iter8 make install You can replace v0.9.0 with any desired Iter8 release tag . go install github.com/iter8-tools/iter8@v0.9.0 You can now run iter8 (from your gopath bin/ directory) 2. Launch experiment \u00b6 Use iter8 launch to benchmark the HTTP service whose URL is https://httpbin.org/get . iter8 launch -c load-test-http --set url = https://httpbin.org/get The iter8 launch subcommand downloads an experiment chart from Iter8 hub , combines the chart with values that are set in order to generate the experiment.yaml file, runs the experiment, and writes results into the result.yaml file. 3. View experiment report \u00b6 Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 1 Number of completed tasks: 1 Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/http-error-count | 0 .00 built-in/http-error-rate | 0 .00 built-in/http-latency-max ( msec ) | 203 .78 built-in/http-latency-mean ( msec ) | 17 .00 built-in/http-latency-min ( msec ) | 4 .20 built-in/http-latency-p50 ( msec ) | 10 .67 built-in/http-latency-p75 ( msec ) | 12 .33 built-in/http-latency-p90 ( msec ) | 14 .00 built-in/http-latency-p95 ( msec ) | 15 .67 built-in/http-latency-p99 ( msec ) | 202 .84 built-in/http-latency-p99.9 ( msec ) | 203 .69 built-in/http-latency-stddev ( msec ) | 37 .94 built-in/http-request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this Congratulations! You completed your first Iter8 experiment. Next steps Learn more about benchmarking and validating HTTP services with service-level objectives (SLOs) . Learn more about benchmarking and validating gRPC services with service-level objectives (SLOs) .","title":"Your first experiment"},{"location":"getting-started/your-first-experiment/#your-first-experiment","text":"Get started with your first Iter8 experiment by benchmarking an HTTP service.","title":"Your First Experiment"},{"location":"getting-started/your-first-experiment/#1-install-iter8-cli","text":"Brew Binaries Source Go 1.17+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Install a specific version You can install the Iter8 CLI with specific major and minor version numbers. For example, the following command installs the release of the Iter8 CLI with major 0 and minor 9 . brew tap iter8-tools/iter8 brew install iter8@0.9 You can replace v0.9.0 with any desired Iter8 release tag . darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-darwin-amd64.tar.gz tar -xvf iter8-darwin-amd64.tar.gz Move darwin-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-linux-amd64.tar.gz tar -xvf iter8-linux-amd64.tar.gz Move linux-amd64/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-linux-386.tar.gz tar -xvf iter8-linux-386.tar.gz Move linux-386/iter8 to any directory in your PATH . wget https://github.com/iter8-tools/iter8/releases/download/v0.9.0/iter8-windows-amd64.tar.gz tar -xvf iter8-windows-amd64.tar.gz Move windows-amd64/iter8.exe to any directory in your PATH . Go 1.17+ is a pre-requisite. Replace v0.9.0 with any desired Iter8 release tag . export TAG = v0.9.0 https://github.com/iter8-tools/iter8.git?ref = ${ TAG } cd iter8 make install You can replace v0.9.0 with any desired Iter8 release tag . go install github.com/iter8-tools/iter8@v0.9.0 You can now run iter8 (from your gopath bin/ directory)","title":"1. Install Iter8 CLI"},{"location":"getting-started/your-first-experiment/#2-launch-experiment","text":"Use iter8 launch to benchmark the HTTP service whose URL is https://httpbin.org/get . iter8 launch -c load-test-http --set url = https://httpbin.org/get The iter8 launch subcommand downloads an experiment chart from Iter8 hub , combines the chart with values that are set in order to generate the experiment.yaml file, runs the experiment, and writes results into the result.yaml file.","title":"2. Launch experiment"},{"location":"getting-started/your-first-experiment/#3-view-experiment-report","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 1 Number of completed tasks: 1 Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/http-error-count | 0 .00 built-in/http-error-rate | 0 .00 built-in/http-latency-max ( msec ) | 203 .78 built-in/http-latency-mean ( msec ) | 17 .00 built-in/http-latency-min ( msec ) | 4 .20 built-in/http-latency-p50 ( msec ) | 10 .67 built-in/http-latency-p75 ( msec ) | 12 .33 built-in/http-latency-p90 ( msec ) | 14 .00 built-in/http-latency-p95 ( msec ) | 15 .67 built-in/http-latency-p99 ( msec ) | 202 .84 built-in/http-latency-p99.9 ( msec ) | 203 .69 built-in/http-latency-stddev ( msec ) | 37 .94 built-in/http-request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this Congratulations! You completed your first Iter8 experiment. Next steps Learn more about benchmarking and validating HTTP services with service-level objectives (SLOs) . Learn more about benchmarking and validating gRPC services with service-level objectives (SLOs) .","title":"3. View experiment report"},{"location":"tutorials/integrations/istio/","text":"Istio Examples based on Iter8 v0.7 \u00b6 Hybrid (A/B + SLOs) testing SLO validation SLO validation (single version) Progressive traffic shifting Fixed % split","title":"Istio"},{"location":"tutorials/integrations/istio/#istio-examples-based-on-iter8-v07","text":"Hybrid (A/B + SLOs) testing SLO validation SLO validation (single version) Progressive traffic shifting Fixed % split","title":"Istio Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/kserve/","text":"KServe Examples based on Iter8 v0.7 \u00b6 A/B Testing and Progressive Traffic Shift Hybrid (A/B + SLOs) testing Progressive traffic shifting Fixed-%-split Session affinity","title":"Kserve"},{"location":"tutorials/integrations/kserve/#kserve-examples-based-on-iter8-v07","text":"A/B Testing and Progressive Traffic Shift Hybrid (A/B + SLOs) testing Progressive traffic shifting Fixed-%-split Session affinity","title":"KServe Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/linkerd/","text":"Linkerd Examples based on Iter8 v0.7 \u00b6 A/B testing","title":"Linkerd"},{"location":"tutorials/integrations/linkerd/#linkerd-examples-based-on-iter8-v07","text":"A/B testing","title":"Linkerd Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/litmus/","text":"Litmus Chaos Examples based on Iter8 v0.7 \u00b6 SLO Validation with Chaos","title":"Litmus"},{"location":"tutorials/integrations/litmus/#litmus-chaos-examples-based-on-iter8-v07","text":"SLO Validation with Chaos","title":"Litmus Chaos Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/overview/","text":"Integrations \u00b6 The tutorials under the integrations section are maintained by members of the Iter8 community. They may become outdated. If you find that something is not working, please lend a helping hand and fix it in a PR. More integrations and examples are always welcome.","title":"Overview"},{"location":"tutorials/integrations/overview/#integrations","text":"The tutorials under the integrations section are maintained by members of the Iter8 community. They may become outdated. If you find that something is not working, please lend a helping hand and fix it in a PR. More integrations and examples are always welcome.","title":"Integrations"},{"location":"tutorials/integrations/seldon/","text":"Seldon Examples based on Iter8 v0.7 \u00b6 Hybrid (A/B + SLOs) testing Progressive traffic shifting","title":"Seldon"},{"location":"tutorials/integrations/seldon/#seldon-examples-based-on-iter8-v07","text":"Hybrid (A/B + SLOs) testing Progressive traffic shifting","title":"Seldon Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/knative/load-test-grpc/","text":"Benchmark and Validate a Knative gRPC service \u00b6 Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! Update the Knative service deployed above to a gRPC service as follows. kn service update hello \\ --image docker.io/grpc/java-example-hostname:latest \\ --port 50051 \\ --revision-name = grpc 1. Launch experiment \u00b6 We will benchmark and validate SLOs for the Knative gRPC service by launching an Iter8 experiment. iter8 launch -c load-test-grpc \\ --set-string host = \"hello.default.127.0.0.1.sslip.io:50051\" \\ --set-string call = \"helloworld.Greeter.SayHello\" \\ --set-string protoURL = \"https://raw.githubusercontent.com/grpc/grpc-java/master/examples/example-hostname/src/main/proto/helloworld/helloworld.proto\" --set data.name = \"frodo\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency/mean = 400 \\ --set SLOs.latency/p90 = 500 \\ --set SLOs.latency/p '97\\.5' = 600 In the above experiment, the following SLOs are validated for the Knative service. - error rate is 0 - mean latency is under 400 msec - 90 th percentile latency is under 500 msec - 97.5 th percentile latency is under 600 msec 2. Assert outcomes \u00b6 Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos 3. View report \u00b6 View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text","title":"Benchmark and validate gRPC"},{"location":"tutorials/integrations/knative/load-test-grpc/#benchmark-and-validate-a-knative-grpc-service","text":"Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! Update the Knative service deployed above to a gRPC service as follows. kn service update hello \\ --image docker.io/grpc/java-example-hostname:latest \\ --port 50051 \\ --revision-name = grpc","title":"Benchmark and Validate a Knative gRPC service"},{"location":"tutorials/integrations/knative/load-test-grpc/#1-launch-experiment","text":"We will benchmark and validate SLOs for the Knative gRPC service by launching an Iter8 experiment. iter8 launch -c load-test-grpc \\ --set-string host = \"hello.default.127.0.0.1.sslip.io:50051\" \\ --set-string call = \"helloworld.Greeter.SayHello\" \\ --set-string protoURL = \"https://raw.githubusercontent.com/grpc/grpc-java/master/examples/example-hostname/src/main/proto/helloworld/helloworld.proto\" --set data.name = \"frodo\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency/mean = 400 \\ --set SLOs.latency/p90 = 500 \\ --set SLOs.latency/p '97\\.5' = 600 In the above experiment, the following SLOs are validated for the Knative service. - error rate is 0 - mean latency is under 400 msec - 90 th percentile latency is under 500 msec - 97.5 th percentile latency is under 600 msec","title":"1. Launch experiment"},{"location":"tutorials/integrations/knative/load-test-grpc/#2-assert-outcomes","text":"Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos","title":"2. Assert outcomes"},{"location":"tutorials/integrations/knative/load-test-grpc/#3-view-report","text":"View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text","title":"3. View report"},{"location":"tutorials/integrations/knative/load-test-http/","text":"Benchmark and Validate a Knative HTTP service \u00b6 Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! 1. Launch experiment \u00b6 We will benchmark and validate SLOs for the Knative HTTP service by launching an Iter8 experiment. iter8 launch -c load-test-http \\ --set url = http://hello.default.127.0.0.1.sslip.io \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 In the above experiment, the following SLOs are validated for the Knative service. - error rate is 0 - mean latency is under 50 msec - 90 th percentile latency is under 100 msec - 97.5 th percentile latency is under 200 msec 2. Assert outcomes \u00b6 Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos 3. View report \u00b6 View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text","title":"Benchmark and validate HTTP"},{"location":"tutorials/integrations/knative/load-test-http/#benchmark-and-validate-a-knative-http-service","text":"Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World!","title":"Benchmark and Validate a Knative HTTP service"},{"location":"tutorials/integrations/knative/load-test-http/#1-launch-experiment","text":"We will benchmark and validate SLOs for the Knative HTTP service by launching an Iter8 experiment. iter8 launch -c load-test-http \\ --set url = http://hello.default.127.0.0.1.sslip.io \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 In the above experiment, the following SLOs are validated for the Knative service. - error rate is 0 - mean latency is under 50 msec - 90 th percentile latency is under 100 msec - 97.5 th percentile latency is under 200 msec","title":"1. Launch experiment"},{"location":"tutorials/integrations/knative/load-test-http/#2-assert-outcomes","text":"Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos","title":"2. Assert outcomes"},{"location":"tutorials/integrations/knative/load-test-http/#3-view-report","text":"View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text","title":"3. View report"},{"location":"tutorials/load-test-grpc/basicusage/","text":"Benchmark and Validate gRPC with SLOs \u00b6 The load-test-grpc experiment generates call requests for gRPC services, collects latency and error-related metrics, and validates service-level objectives (SLOs). This experiment is designed for the following use-cases. Load test Benchmark Validate service level objectives (SLOs) Safe rollout Continuous integration and delivery (CI/CD) Before you begin Run the gRPC sample service from a separate terminal. docker run -p 50051 :50051 docker.io/grpc/java-example-hostname:latest You can also use Podman or other alternatives to Docker in the above command. Basic example \u00b6 Benchmark a gRPC service by specifying its host , its fully-qualified call (method) name, and the URL of Protocol Buffer file ( protoURL ) that defines the service. Launch load-test-grpc experiment iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" Metrics and SLOs \u00b6 The following metrics are collected by default by this experiment: grpc/request-count : total number of requests sent grpc/error-count : number of error responses grpc/error-rate : fraction of error responses The following latency metrics are also supported. grpc/latency/mean : Mean latency grpc/latency/stddev : Standard deviation of latency grpc/latency/min : Min latency grpc/latency/max : Max latency grpc/latency/pX : X-th percentile latency, for any X in the range 0.0 to 100.0 Latency metrics have msec units. Any latency metric that is specified as part of SLOs is also collected. For example, set the following parameter values in the iter8 launch command above. --set SLOs.grpc/error-rate = 0 \\ --set SLOs.grpc/latency/mean = 50 \\ --set SLOs.grpc/latency/p90 = 100 \\ --set SLOs.grpc/latency/p '97\\.5' = 200 In the above setting, the following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec View experiment report \u00b6 Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- grpc/error-rate < = 0 | true grpc/latency/mean ( msec ) < = 50 | true grpc/latency/p90 ( msec ) < = 100 | true grpc/latency/p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- grpc/error-count | 0 .00 grpc/error-rate | 0 .00 grpc/latency/mean ( msec ) | 21 .48 grpc/latency/p90 ( msec ) | 34 .00 grpc/latency/p97.5 ( msec ) | 37 .00 grpc/request-count | 200 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this Assertions \u00b6 Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert subcommand asserts if the experiment result satisfies conditions that are specified. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful inside CI/CD/GitOps pipelines. Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied Load profile \u00b6 Control the characteristics of the generated load generated by setting the number of requests ( total ), the number of requests per second ( rps ), number of connections to use ( connections ), and the number of concurrent request workers to use which will be distributed across the connections ( concurrency ). Sample load profile --set total = 500 \\ --set rps = 25 \\ --set concurrency = 50 \\ --set connections = 10 Refer to the chart's values.yaml file for additional parameters related to the load profile such as duration , maxDuration , connectTimeout , and keepalive . Call data \u00b6 gRPC calls may include data serialized as Protocol Buffer messages . Data Data file Data URL Binary data file Binary data URL Specify call data as values. Flat --set data.name = \"frodo\" Nested --set data.name = \"frodo\" \\ --set data.realm.planet = \"earth\" \\ --set data.realm.location = \"middle\" Use JSON data from a local file. --set dataFile = \"/the/path/to/data.json\" # \"./data.json\" also works Supply a URL that hosts JSON data. Iter8 will download the data from this URL and use it in the requests. --set dataURL = \"https://location.of/data.json\" Use binary data from a local file serialized as a single binary message or multiple count-prefixed messages. --set binaryDataFile = \"/the/path/to/data.bin\" # \"./data.bin\" also works Supply a URL that hosts binary data serialized as a single binary message or multiple count-prefixed messages. Iter8 will download the data from this URL and use it in the requests. --set binaryDataURL = \"https://location.of/data.bin\" For client streaming or bi-directional calls, this experiment accepts an array of messages, each element representing a single message within the stream call. If a single object is given for data, then it is automatically converted to an array with single element. --set data [ 0 ] .name = \"Joe\" \\ --set data [ 1 ] .name = \"Kate\" \\ --set data [ 2 ] .name = \"Sara\" In case of client streaming, this experiment sends all the data in the input array, and then closes and receives. Call metadata \u00b6 gRPC calls may include metadata which is information about a particular call. Metadata Metadata file Metadata URL Supply metadata as values. --set metadata.darth = \"vader\" \\ --set metadata.lord = \"sauron\" \\ --set metadata.volde = \"mort\" Use JSON metadata from a local file. --set metadataFile = \"/the/path/to/metadata.json\" # \"./metadata.json\" also works Supply a URL that hosts JSON metadata. Iter8 will download the metadata from this URL and use it in the requests. --set metadataURL = \"https://location.of/metadata.json\" Proto and reflection \u00b6 The gRPC server method signatures and message formats are defined in a .proto source file, which may also be compiled to a .protoset file. Proto file Proto URL Protoset file Protoset URL Reflection Use a local .proto source file. --set protoFile = \"/path/to/helloworld.proto\" # \"./helloworld.proto\" also works Use a URL that hosts a .proto source file. Iter8 will download the Protocol Buffer file and use it in the experiment. --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" Supply the name of a .protoset file that is compiled from .proto source files. --set protosetFile = \"./myservice.protoset\" Supply a URL that hosts a .protoset file. --set protosetURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.protoset\" In the absence of .proto and .protoset information, the experiment will attempt to use server reflection . You can supply reflect metadata. --set reflectMetadata.clientId = \"5hL64dd0\" \\ --set reflectMetadata.clientMood = \"delightful\" Streaming gRPC \u00b6 Refer to the values.yaml file which documents additional parameters related to streaming gRPC.","title":"Basic usage"},{"location":"tutorials/load-test-grpc/basicusage/#benchmark-and-validate-grpc-with-slos","text":"The load-test-grpc experiment generates call requests for gRPC services, collects latency and error-related metrics, and validates service-level objectives (SLOs). This experiment is designed for the following use-cases. Load test Benchmark Validate service level objectives (SLOs) Safe rollout Continuous integration and delivery (CI/CD) Before you begin Run the gRPC sample service from a separate terminal. docker run -p 50051 :50051 docker.io/grpc/java-example-hostname:latest You can also use Podman or other alternatives to Docker in the above command.","title":"Benchmark and Validate gRPC with SLOs"},{"location":"tutorials/load-test-grpc/basicusage/#basic-example","text":"Benchmark a gRPC service by specifying its host , its fully-qualified call (method) name, and the URL of Protocol Buffer file ( protoURL ) that defines the service. Launch load-test-grpc experiment iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\"","title":"Basic example"},{"location":"tutorials/load-test-grpc/basicusage/#metrics-and-slos","text":"The following metrics are collected by default by this experiment: grpc/request-count : total number of requests sent grpc/error-count : number of error responses grpc/error-rate : fraction of error responses The following latency metrics are also supported. grpc/latency/mean : Mean latency grpc/latency/stddev : Standard deviation of latency grpc/latency/min : Min latency grpc/latency/max : Max latency grpc/latency/pX : X-th percentile latency, for any X in the range 0.0 to 100.0 Latency metrics have msec units. Any latency metric that is specified as part of SLOs is also collected. For example, set the following parameter values in the iter8 launch command above. --set SLOs.grpc/error-rate = 0 \\ --set SLOs.grpc/latency/mean = 50 \\ --set SLOs.grpc/latency/p90 = 100 \\ --set SLOs.grpc/latency/p '97\\.5' = 200 In the above setting, the following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec","title":"Metrics and SLOs"},{"location":"tutorials/load-test-grpc/basicusage/#view-experiment-report","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- grpc/error-rate < = 0 | true grpc/latency/mean ( msec ) < = 50 | true grpc/latency/p90 ( msec ) < = 100 | true grpc/latency/p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- grpc/error-count | 0 .00 grpc/error-rate | 0 .00 grpc/latency/mean ( msec ) | 21 .48 grpc/latency/p90 ( msec ) | 34 .00 grpc/latency/p97.5 ( msec ) | 37 .00 grpc/request-count | 200 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this","title":"View experiment report"},{"location":"tutorials/load-test-grpc/basicusage/#assertions","text":"Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert subcommand asserts if the experiment result satisfies conditions that are specified. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful inside CI/CD/GitOps pipelines. Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied","title":"Assertions"},{"location":"tutorials/load-test-grpc/basicusage/#load-profile","text":"Control the characteristics of the generated load generated by setting the number of requests ( total ), the number of requests per second ( rps ), number of connections to use ( connections ), and the number of concurrent request workers to use which will be distributed across the connections ( concurrency ). Sample load profile --set total = 500 \\ --set rps = 25 \\ --set concurrency = 50 \\ --set connections = 10 Refer to the chart's values.yaml file for additional parameters related to the load profile such as duration , maxDuration , connectTimeout , and keepalive .","title":"Load profile"},{"location":"tutorials/load-test-grpc/basicusage/#call-data","text":"gRPC calls may include data serialized as Protocol Buffer messages . Data Data file Data URL Binary data file Binary data URL Specify call data as values. Flat --set data.name = \"frodo\" Nested --set data.name = \"frodo\" \\ --set data.realm.planet = \"earth\" \\ --set data.realm.location = \"middle\" Use JSON data from a local file. --set dataFile = \"/the/path/to/data.json\" # \"./data.json\" also works Supply a URL that hosts JSON data. Iter8 will download the data from this URL and use it in the requests. --set dataURL = \"https://location.of/data.json\" Use binary data from a local file serialized as a single binary message or multiple count-prefixed messages. --set binaryDataFile = \"/the/path/to/data.bin\" # \"./data.bin\" also works Supply a URL that hosts binary data serialized as a single binary message or multiple count-prefixed messages. Iter8 will download the data from this URL and use it in the requests. --set binaryDataURL = \"https://location.of/data.bin\" For client streaming or bi-directional calls, this experiment accepts an array of messages, each element representing a single message within the stream call. If a single object is given for data, then it is automatically converted to an array with single element. --set data [ 0 ] .name = \"Joe\" \\ --set data [ 1 ] .name = \"Kate\" \\ --set data [ 2 ] .name = \"Sara\" In case of client streaming, this experiment sends all the data in the input array, and then closes and receives.","title":"Call data"},{"location":"tutorials/load-test-grpc/basicusage/#call-metadata","text":"gRPC calls may include metadata which is information about a particular call. Metadata Metadata file Metadata URL Supply metadata as values. --set metadata.darth = \"vader\" \\ --set metadata.lord = \"sauron\" \\ --set metadata.volde = \"mort\" Use JSON metadata from a local file. --set metadataFile = \"/the/path/to/metadata.json\" # \"./metadata.json\" also works Supply a URL that hosts JSON metadata. Iter8 will download the metadata from this URL and use it in the requests. --set metadataURL = \"https://location.of/metadata.json\"","title":"Call metadata"},{"location":"tutorials/load-test-grpc/basicusage/#proto-and-reflection","text":"The gRPC server method signatures and message formats are defined in a .proto source file, which may also be compiled to a .protoset file. Proto file Proto URL Protoset file Protoset URL Reflection Use a local .proto source file. --set protoFile = \"/path/to/helloworld.proto\" # \"./helloworld.proto\" also works Use a URL that hosts a .proto source file. Iter8 will download the Protocol Buffer file and use it in the experiment. --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" Supply the name of a .protoset file that is compiled from .proto source files. --set protosetFile = \"./myservice.protoset\" Supply a URL that hosts a .protoset file. --set protosetURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.protoset\" In the absence of .proto and .protoset information, the experiment will attempt to use server reflection . You can supply reflect metadata. --set reflectMetadata.clientId = \"5hL64dd0\" \\ --set reflectMetadata.clientMood = \"delightful\"","title":"Proto and reflection"},{"location":"tutorials/load-test-grpc/basicusage/#streaming-grpc","text":"Refer to the values.yaml file which documents additional parameters related to streaming gRPC.","title":"Streaming gRPC"},{"location":"tutorials/load-test-grpc/expreport/","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- grpc/error-rate < = 0 | true grpc/latency/mean ( msec ) < = 50 | true grpc/latency/p90 ( msec ) < = 100 | true grpc/latency/p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- grpc/error-count | 0 .00 grpc/error-rate | 0 .00 grpc/latency/mean ( msec ) | 21 .48 grpc/latency/p90 ( msec ) | 34 .00 grpc/latency/p97.5 ( msec ) | 37 .00 grpc/request-count | 200 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this","title":"Expreport"},{"location":"tutorials/load-test-http/assert/","text":"Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert subcommand asserts if the experiment result satisfies conditions that are specified. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful inside CI/CD/GitOps pipelines. Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied","title":"Assert"},{"location":"tutorials/load-test-http/basicusage/","text":"Benchmark and Validate HTTP with SLOs \u00b6 The load-test-http experiment generates call requests for HTTP services, collects latency and error-related metrics, and validates service-level objectives (SLOs). This experiment is designed for the following use-cases. Load test Benchmark Validate service level objectives (SLOs) Safe rollout Continuous integration and delivery (CI/CD) Before you begin Run the httpbin sample service from a separate terminal. docker run -p 80 :80 kennethreitz/httpbin You can also use Podman or other alternatives to Docker in the above command. Basic example \u00b6 Benchmark an HTTP service with a GET endpoint by specifying the url . iter8 launch -c load-test-http --set url = http://127.0.0.1/get Metrics and SLOs \u00b6 The following metrics are collected by default by this experiment: http/request-count : total number of requests sent http/error-count : number of error responses http/error-rate : fraction of error responses http/latency-mean : mean of observed latency values http/latency-stddev : standard deviation of observed latency values http/latency-min : min of observed latency values http/latency-max : max of observed latency values http/latency-pX : X th percentile latency, for X in [50.0, 75.0, 90.0, 95.0, 99.0, 99.9] Latency metrics have msec units. Any latency percentile that is specified as part of SLOs is also collected. For example, set the following parameter values in the iter8 launch command above. --set SLOs.http/error-rate = 0 \\ --set SLOs.http/latency-mean = 50 \\ --set SLOs.http/latency-p90 = 100 \\ --set SLOs.http/latency-p '97\\.5' = 200 In the above setting, the following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec View experiment report \u00b6 Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- http/error-rate < = 0 | true http/latency-mean ( msec ) < = 50 | true http/latency-p90 ( msec ) < = 100 | true http/latency-p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- http/error-count | 0 .00 http/error-rate | 0 .00 http/latency-max ( msec ) | 8 .93 http/latency-mean ( msec ) | 5 .49 http/latency-min ( msec ) | 2 .71 http/latency-p50 ( msec ) | 5 .38 http/latency-p75 ( msec ) | 6 .71 http/latency-p90 ( msec ) | 7 .77 http/latency-p95 ( msec ) | 8 .27 http/latency-p97.5 ( msec ) | 8 .60 http/latency-p99 ( msec ) | 8 .80 http/latency-p99.9 ( msec ) | 8 .92 http/latency-stddev ( msec ) | 1 .57 http/request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this Assertions \u00b6 Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert subcommand asserts if the experiment result satisfies conditions that are specified. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful inside CI/CD/GitOps pipelines. Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied Load profile \u00b6 Control the characteristics of the load generated by the load-test-http experiment by setting the number of queries ( numQueries ), the number of queries sent per second ( qps ), and the number of parallel connections used to send queries ( connections ). --set numQueries = 200 \\ --set qps = 10 \\ --set connections = 5 You can also set the duration of the load generation period. Refer to the chart's values.yaml file for details. Payload \u00b6 Send any type of content as payload and specify the HTTP Content Type header. These options switch the HTTP method to POST. String String with contentType JSON from URL Image from URL Specify payload as a string. By default, its content type is set to application/octet-stream . --set payloadStr = \"abc123\" --set payloadStr = \"abc123\" \\ --set contentType = \"text/plain\" Fetch JSON content from a URL. Use this JSON as payload. Set content type to application/json . --set payloadURL = https://data.police.uk/api/crimes-street-dates \\ --set contentType = \"application/json\" Fetch jpeg image from a URL. Use this image as payload. Set content type to image/jpeg . --set payloadURL = https://cdn.pixabay.com/photo/2021/09/08/17/58/poppy-6607526_1280.jpg \\ --set contentType = \"image/jpeg\"","title":"Basic usage"},{"location":"tutorials/load-test-http/basicusage/#benchmark-and-validate-http-with-slos","text":"The load-test-http experiment generates call requests for HTTP services, collects latency and error-related metrics, and validates service-level objectives (SLOs). This experiment is designed for the following use-cases. Load test Benchmark Validate service level objectives (SLOs) Safe rollout Continuous integration and delivery (CI/CD) Before you begin Run the httpbin sample service from a separate terminal. docker run -p 80 :80 kennethreitz/httpbin You can also use Podman or other alternatives to Docker in the above command.","title":"Benchmark and Validate HTTP with SLOs"},{"location":"tutorials/load-test-http/basicusage/#basic-example","text":"Benchmark an HTTP service with a GET endpoint by specifying the url . iter8 launch -c load-test-http --set url = http://127.0.0.1/get","title":"Basic example"},{"location":"tutorials/load-test-http/basicusage/#metrics-and-slos","text":"The following metrics are collected by default by this experiment: http/request-count : total number of requests sent http/error-count : number of error responses http/error-rate : fraction of error responses http/latency-mean : mean of observed latency values http/latency-stddev : standard deviation of observed latency values http/latency-min : min of observed latency values http/latency-max : max of observed latency values http/latency-pX : X th percentile latency, for X in [50.0, 75.0, 90.0, 95.0, 99.0, 99.9] Latency metrics have msec units. Any latency percentile that is specified as part of SLOs is also collected. For example, set the following parameter values in the iter8 launch command above. --set SLOs.http/error-rate = 0 \\ --set SLOs.http/latency-mean = 50 \\ --set SLOs.http/latency-p90 = 100 \\ --set SLOs.http/latency-p '97\\.5' = 200 In the above setting, the following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec","title":"Metrics and SLOs"},{"location":"tutorials/load-test-http/basicusage/#view-experiment-report","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- http/error-rate < = 0 | true http/latency-mean ( msec ) < = 50 | true http/latency-p90 ( msec ) < = 100 | true http/latency-p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- http/error-count | 0 .00 http/error-rate | 0 .00 http/latency-max ( msec ) | 8 .93 http/latency-mean ( msec ) | 5 .49 http/latency-min ( msec ) | 2 .71 http/latency-p50 ( msec ) | 5 .38 http/latency-p75 ( msec ) | 6 .71 http/latency-p90 ( msec ) | 7 .77 http/latency-p95 ( msec ) | 8 .27 http/latency-p97.5 ( msec ) | 8 .60 http/latency-p99 ( msec ) | 8 .80 http/latency-p99.9 ( msec ) | 8 .92 http/latency-stddev ( msec ) | 1 .57 http/request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this","title":"View experiment report"},{"location":"tutorials/load-test-http/basicusage/#assertions","text":"Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert subcommand asserts if the experiment result satisfies conditions that are specified. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful inside CI/CD/GitOps pipelines. Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied","title":"Assertions"},{"location":"tutorials/load-test-http/basicusage/#load-profile","text":"Control the characteristics of the load generated by the load-test-http experiment by setting the number of queries ( numQueries ), the number of queries sent per second ( qps ), and the number of parallel connections used to send queries ( connections ). --set numQueries = 200 \\ --set qps = 10 \\ --set connections = 5 You can also set the duration of the load generation period. Refer to the chart's values.yaml file for details.","title":"Load profile"},{"location":"tutorials/load-test-http/basicusage/#payload","text":"Send any type of content as payload and specify the HTTP Content Type header. These options switch the HTTP method to POST. String String with contentType JSON from URL Image from URL Specify payload as a string. By default, its content type is set to application/octet-stream . --set payloadStr = \"abc123\" --set payloadStr = \"abc123\" \\ --set contentType = \"text/plain\" Fetch JSON content from a URL. Use this JSON as payload. Set content type to application/json . --set payloadURL = https://data.police.uk/api/crimes-street-dates \\ --set contentType = \"application/json\" Fetch jpeg image from a URL. Use this image as payload. Set content type to image/jpeg . --set payloadURL = https://cdn.pixabay.com/photo/2021/09/08/17/58/poppy-6607526_1280.jpg \\ --set contentType = \"image/jpeg\"","title":"Payload"},{"location":"tutorials/load-test-http/expreport/","text":"Text HTML iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- http/error-rate < = 0 | true http/latency-mean ( msec ) < = 50 | true http/latency-p90 ( msec ) < = 100 | true http/latency-p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- http/error-count | 0 .00 http/error-rate | 0 .00 http/latency-max ( msec ) | 8 .93 http/latency-mean ( msec ) | 5 .49 http/latency-min ( msec ) | 2 .71 http/latency-p50 ( msec ) | 5 .38 http/latency-p75 ( msec ) | 6 .71 http/latency-p90 ( msec ) | 7 .77 http/latency-p95 ( msec ) | 8 .27 http/latency-p97.5 ( msec ) | 8 .60 http/latency-p99 ( msec ) | 8 .80 http/latency-p99.9 ( msec ) | 8 .92 http/latency-stddev ( msec ) | 1 .57 http/request-count | 100 .00 iter8 report -o html > report.html # view in a browser The HTML report looks like this","title":"Expreport"},{"location":"tutorials/load-test-http/usecases/","text":"This experiment is designed for the following use-cases. Load test Benchmark Validate service level objectives (SLOs) Safe rollout Continuous integration and delivery (CI/CD)","title":"Usecases"},{"location":"user-guide/commands/iter8/","text":"iter8 \u00b6 Kubernetes release optimizer Synopsis \u00b6 Kubernetes release optimizer built for DevOps, MLOps, SRE, and data science teams. Options \u00b6 -h, --help help for iter8 -l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 assert - Assert if experiment result satisfies specified conditions iter8 gen - Render experiment.yaml file by combining an experiment chart with values. iter8 hub - Download an experiment chart from an Iter8 experiment chart repo iter8 launch - Launch an Iter8 experiment. iter8 report - Generate experiment report. iter8 run - Run experiment specified in experiment.yaml. iter8 version - Print Iter8 version information Auto generated by spf13/cobra on 2-Mar-2022 \u00b6","title":"iter8"},{"location":"user-guide/commands/iter8/#iter8","text":"Kubernetes release optimizer","title":"iter8"},{"location":"user-guide/commands/iter8/#synopsis","text":"Kubernetes release optimizer built for DevOps, MLOps, SRE, and data science teams.","title":"Synopsis"},{"location":"user-guide/commands/iter8/#options","text":"-h, --help help for iter8 -l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options"},{"location":"user-guide/commands/iter8/#see-also","text":"iter8 assert - Assert if experiment result satisfies specified conditions iter8 gen - Render experiment.yaml file by combining an experiment chart with values. iter8 hub - Download an experiment chart from an Iter8 experiment chart repo iter8 launch - Launch an Iter8 experiment. iter8 report - Generate experiment report. iter8 run - Run experiment specified in experiment.yaml. iter8 version - Print Iter8 version information","title":"SEE ALSO"},{"location":"user-guide/commands/iter8/#auto-generated-by-spf13cobra-on-2-mar-2022","text":"","title":"Auto generated by spf13/cobra on 2-Mar-2022"},{"location":"user-guide/commands/iter8_assert/","text":"iter8 assert \u00b6 Assert if experiment result satisfies specified conditions Synopsis \u00b6 Assert if experiment result satisfies specified conditions. If assert conditions are satisfied, exit with code 0. Else, exit with code 1. Assertions are especially useful within CI/CD/GitOps pipelines. iter8 assert [flags] Examples \u00b6 # assert that the experiment completed without failures, # and SLOs were satisfied iter8 assert -c completed -c nofailure -c slos # another way to write the above assertion iter8 assert -c completed,nofailure,slos # timeouts are useful for an experiment that may be long running # and may run in the background iter8 assert -c completed,nofailures,slos -t 5s Options \u00b6 -c, --condition(s); can specify multiple or separate conditions with commas; strings completed | nofailure | slos -h, --help help for assert -t, --timeout duration timeout duration (e.g., 5s) Options inherited from parent commands \u00b6 -l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 2-Mar-2022 \u00b6","title":"iter8 assert"},{"location":"user-guide/commands/iter8_assert/#iter8-assert","text":"Assert if experiment result satisfies specified conditions","title":"iter8 assert"},{"location":"user-guide/commands/iter8_assert/#synopsis","text":"Assert if experiment result satisfies specified conditions. If assert conditions are satisfied, exit with code 0. Else, exit with code 1. Assertions are especially useful within CI/CD/GitOps pipelines. iter8 assert [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_assert/#examples","text":"# assert that the experiment completed without failures, # and SLOs were satisfied iter8 assert -c completed -c nofailure -c slos # another way to write the above assertion iter8 assert -c completed,nofailure,slos # timeouts are useful for an experiment that may be long running # and may run in the background iter8 assert -c completed,nofailures,slos -t 5s","title":"Examples"},{"location":"user-guide/commands/iter8_assert/#options","text":"-c, --condition(s); can specify multiple or separate conditions with commas; strings completed | nofailure | slos -h, --help help for assert -t, --timeout duration timeout duration (e.g., 5s)","title":"Options"},{"location":"user-guide/commands/iter8_assert/#options-inherited-from-parent-commands","text":"-l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_assert/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_assert/#auto-generated-by-spf13cobra-on-2-mar-2022","text":"","title":"Auto generated by spf13/cobra on 2-Mar-2022"},{"location":"user-guide/commands/iter8_gen/","text":"iter8 gen \u00b6 Render experiment.yaml file by combining an experiment chart with values. Synopsis \u00b6 Render experiment.yaml file by combining an experiment chart with values. Note: The gen subcommand is primarily designed for Iter8 development use-cases. End-users are expected to use the launch subcommand. iter8 gen [flags] Options \u00b6 -c, --chartPath string path to experiment chart folder -h, --help help for gen --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple) Options inherited from parent commands \u00b6 -l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 2-Mar-2022 \u00b6","title":"iter8 gen"},{"location":"user-guide/commands/iter8_gen/#iter8-gen","text":"Render experiment.yaml file by combining an experiment chart with values.","title":"iter8 gen"},{"location":"user-guide/commands/iter8_gen/#synopsis","text":"Render experiment.yaml file by combining an experiment chart with values. Note: The gen subcommand is primarily designed for Iter8 development use-cases. End-users are expected to use the launch subcommand. iter8 gen [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_gen/#options","text":"-c, --chartPath string path to experiment chart folder -h, --help help for gen --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple)","title":"Options"},{"location":"user-guide/commands/iter8_gen/#options-inherited-from-parent-commands","text":"-l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_gen/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_gen/#auto-generated-by-spf13cobra-on-2-mar-2022","text":"","title":"Auto generated by spf13/cobra on 2-Mar-2022"},{"location":"user-guide/commands/iter8_hub/","text":"iter8 hub \u00b6 Download an experiment chart from an Iter8 experiment chart repo Synopsis \u00b6 Download an experiment chart from an Iter8 experiment chart repo. This is useful for fetching experiment charts to inspect, modify, launch, or repackage. The official Iter8 experiment chart repo is located at: https://iter8-tools.github.io/hub By default, the hub command looks for the specified chart in the official Iter8 chart repo. You can use third party chart repos by supplying the repo URL flag. Note: The hub subcommand is primarily designed for Iter8 development use-cases. End-users are expected to use the launch subcommand. iter8 hub [flags] Examples \u00b6 # download the load-test-http experiment chart from # the official Iter8 experiment chart repo iter8 hub -c load-test-http # download the great-expectations experiment chart from # the third party experiment chart repo whose URL is # https://great.expectations.pip iter8 hub -c great-expectations -r https://great.expectations.pip Options \u00b6 -c, --chartName string name of the experiment chart -v, --chartVersionConstraint string version constraint for chart (example 0.9.x) -d, --destDir string destination folder where experiment chart is downloaded and unpacked (default \".\") -h, --help help for hub -r, --repoURL string URL of experiment chart repo (default \"https://iter8-tools.github.io/hub\") Options inherited from parent commands \u00b6 -l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 2-Mar-2022 \u00b6","title":"iter8 hub"},{"location":"user-guide/commands/iter8_hub/#iter8-hub","text":"Download an experiment chart from an Iter8 experiment chart repo","title":"iter8 hub"},{"location":"user-guide/commands/iter8_hub/#synopsis","text":"Download an experiment chart from an Iter8 experiment chart repo. This is useful for fetching experiment charts to inspect, modify, launch, or repackage. The official Iter8 experiment chart repo is located at: https://iter8-tools.github.io/hub By default, the hub command looks for the specified chart in the official Iter8 chart repo. You can use third party chart repos by supplying the repo URL flag. Note: The hub subcommand is primarily designed for Iter8 development use-cases. End-users are expected to use the launch subcommand. iter8 hub [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_hub/#examples","text":"# download the load-test-http experiment chart from # the official Iter8 experiment chart repo iter8 hub -c load-test-http # download the great-expectations experiment chart from # the third party experiment chart repo whose URL is # https://great.expectations.pip iter8 hub -c great-expectations -r https://great.expectations.pip","title":"Examples"},{"location":"user-guide/commands/iter8_hub/#options","text":"-c, --chartName string name of the experiment chart -v, --chartVersionConstraint string version constraint for chart (example 0.9.x) -d, --destDir string destination folder where experiment chart is downloaded and unpacked (default \".\") -h, --help help for hub -r, --repoURL string URL of experiment chart repo (default \"https://iter8-tools.github.io/hub\")","title":"Options"},{"location":"user-guide/commands/iter8_hub/#options-inherited-from-parent-commands","text":"-l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_hub/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_hub/#auto-generated-by-spf13cobra-on-2-mar-2022","text":"","title":"Auto generated by spf13/cobra on 2-Mar-2022"},{"location":"user-guide/commands/iter8_launch/","text":"iter8 launch \u00b6 Launch an Iter8 experiment. Synopsis \u00b6 Launch an Iter8 experiment by downloading a chart from an Iter8 experiment chart repo, rendering an experiment.yaml file by combining the chart with values, and running the experiment specified in experiment.yaml. iter8 launch [flags] Options \u00b6 -c, --chartName string name of the experiment chart -v, --chartVersionConstraint string version constraint for chart (example 0.9.x) -d, --destDir string destination folder where experiment chart is downloaded and unpacked (default \".\") --dry render experiment.yaml without running the experiment -h, --help help for launch -r, --repoURL string URL of experiment chart repo (default \"https://iter8-tools.github.io/hub\") --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple) Options inherited from parent commands \u00b6 -l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 2-Mar-2022 \u00b6","title":"iter8 launch"},{"location":"user-guide/commands/iter8_launch/#iter8-launch","text":"Launch an Iter8 experiment.","title":"iter8 launch"},{"location":"user-guide/commands/iter8_launch/#synopsis","text":"Launch an Iter8 experiment by downloading a chart from an Iter8 experiment chart repo, rendering an experiment.yaml file by combining the chart with values, and running the experiment specified in experiment.yaml. iter8 launch [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_launch/#options","text":"-c, --chartName string name of the experiment chart -v, --chartVersionConstraint string version constraint for chart (example 0.9.x) -d, --destDir string destination folder where experiment chart is downloaded and unpacked (default \".\") --dry render experiment.yaml without running the experiment -h, --help help for launch -r, --repoURL string URL of experiment chart repo (default \"https://iter8-tools.github.io/hub\") --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple)","title":"Options"},{"location":"user-guide/commands/iter8_launch/#options-inherited-from-parent-commands","text":"-l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_launch/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_launch/#auto-generated-by-spf13cobra-on-2-mar-2022","text":"","title":"Auto generated by spf13/cobra on 2-Mar-2022"},{"location":"user-guide/commands/iter8_report/","text":"iter8 report \u00b6 Generate experiment report. Synopsis \u00b6 Generate experiment report. iter8 report [flags] Examples \u00b6 # generate text report iter8 report # generate html report iter8 report -o html > report.html # view with browser Options \u00b6 -h, --help help for report -o, --outputFormat string text | html (default \"text\") Options inherited from parent commands \u00b6 -l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 2-Mar-2022 \u00b6","title":"iter8 report"},{"location":"user-guide/commands/iter8_report/#iter8-report","text":"Generate experiment report.","title":"iter8 report"},{"location":"user-guide/commands/iter8_report/#synopsis","text":"Generate experiment report. iter8 report [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_report/#examples","text":"# generate text report iter8 report # generate html report iter8 report -o html > report.html # view with browser","title":"Examples"},{"location":"user-guide/commands/iter8_report/#options","text":"-h, --help help for report -o, --outputFormat string text | html (default \"text\")","title":"Options"},{"location":"user-guide/commands/iter8_report/#options-inherited-from-parent-commands","text":"-l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_report/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_report/#auto-generated-by-spf13cobra-on-2-mar-2022","text":"","title":"Auto generated by spf13/cobra on 2-Mar-2022"},{"location":"user-guide/commands/iter8_run/","text":"iter8 run \u00b6 Run experiment specified in experiment.yaml. Synopsis \u00b6 Run experiment specified in experiment.yaml. Note: The run subcommand is primarily designed for Iter8 development use-cases. End-users are expected to use the launch subcommand. iter8 run [flags] Options \u00b6 -h, --help help for run Options inherited from parent commands \u00b6 -l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 2-Mar-2022 \u00b6","title":"iter8 run"},{"location":"user-guide/commands/iter8_run/#iter8-run","text":"Run experiment specified in experiment.yaml.","title":"iter8 run"},{"location":"user-guide/commands/iter8_run/#synopsis","text":"Run experiment specified in experiment.yaml. Note: The run subcommand is primarily designed for Iter8 development use-cases. End-users are expected to use the launch subcommand. iter8 run [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_run/#options","text":"-h, --help help for run","title":"Options"},{"location":"user-guide/commands/iter8_run/#options-inherited-from-parent-commands","text":"-l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_run/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_run/#auto-generated-by-spf13cobra-on-2-mar-2022","text":"","title":"Auto generated by spf13/cobra on 2-Mar-2022"},{"location":"user-guide/commands/iter8_version/","text":"iter8 version \u00b6 Print Iter8 version information Synopsis \u00b6 Show the version for Iter8. iter8 version [flags] Examples \u00b6 iter8 version # The output will look like this: # version.BuildInfo{Version:\"v0.8.32\", GitCommit:\"fe51cd1e31e6a202cba7aliv9552a6d418ded79a\", GitTreeState:\"clean\", GoVersion:\"go1.17.6\"} # - Version is the semantic version of the release. # - GitCommit is the SHA for the commit that this version was built from. # - GitTreeState is \"clean\" if there are no local code changes when this binary was # built, and \"dirty\" if the binary was built from locally modified code. # - GoVersion is the version of Go that was used to compile Iter8. Options \u00b6 -h, --help help for version --short print the version number Options inherited from parent commands \u00b6 -l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\") SEE ALSO \u00b6 iter8 - Kubernetes release optimizer Auto generated by spf13/cobra on 2-Mar-2022 \u00b6","title":"iter8 version"},{"location":"user-guide/commands/iter8_version/#iter8-version","text":"Print Iter8 version information","title":"iter8 version"},{"location":"user-guide/commands/iter8_version/#synopsis","text":"Show the version for Iter8. iter8 version [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_version/#examples","text":"iter8 version # The output will look like this: # version.BuildInfo{Version:\"v0.8.32\", GitCommit:\"fe51cd1e31e6a202cba7aliv9552a6d418ded79a\", GitTreeState:\"clean\", GoVersion:\"go1.17.6\"} # - Version is the semantic version of the release. # - GitCommit is the SHA for the commit that this version was built from. # - GitTreeState is \"clean\" if there are no local code changes when this binary was # built, and \"dirty\" if the binary was built from locally modified code. # - GoVersion is the version of Go that was used to compile Iter8.","title":"Examples"},{"location":"user-guide/commands/iter8_version/#options","text":"-h, --help help for version --short print the version number","title":"Options"},{"location":"user-guide/commands/iter8_version/#options-inherited-from-parent-commands","text":"-l, --logLevel string trace, debug, info, warning, error, fatal, panic (default \"info\")","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_version/#see-also","text":"iter8 - Kubernetes release optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_version/#auto-generated-by-spf13cobra-on-2-mar-2022","text":"","title":"Auto generated by spf13/cobra on 2-Mar-2022"},{"location":"user-guide/topics/chart-docs/","text":"Chart Documentation \u00b6 An Iter8 experiment chart is a Helm chart, and hence inherits the latter's file structure . In particular, the chart contains the following files. Chart.yaml: A YAML file containing information about the chart README.md: A human-readable README file values.yaml: The default configuration values for this chart For example, to download the load-test-grpc chart and view its values.yaml , do as follows: iter8 hub -c load-test-grpc cd load-test-grpc cat values.yaml","title":"Chart Documentation"},{"location":"user-guide/topics/chart-docs/#chart-documentation","text":"An Iter8 experiment chart is a Helm chart, and hence inherits the latter's file structure . In particular, the chart contains the following files. Chart.yaml: A YAML file containing information about the chart README.md: A human-readable README file values.yaml: The default configuration values for this chart For example, to download the load-test-grpc chart and view its values.yaml , do as follows: iter8 hub -c load-test-grpc cd load-test-grpc cat values.yaml","title":"Chart Documentation"}]}