{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Iter8 \u00b6","title":"Home"},{"location":"#iter8","text":"","title":"Iter8"},{"location":"community/","text":"Community meetings \u00b6 Everyone is welcome to join our community meetings. They are on the 3 rd Wednesday of each month from 11:00 AM \u2013 12:00 PM EST/EDT. Here is the meeting link . View the calendar or subscribe ( Google Calendar , iCalendar file ). Feel free to bring discussion topics to the meeting. If you would like to present a demo, please drop us a note in the Iter8 Slack workspace . Our meetings are also recorded and publicly available on our YouTube channel .","title":"Community"},{"location":"community/#community-meetings","text":"Everyone is welcome to join our community meetings. They are on the 3 rd Wednesday of each month from 11:00 AM \u2013 12:00 PM EST/EDT. Here is the meeting link . View the calendar or subscribe ( Google Calendar , iCalendar file ). Feel free to bring discussion topics to the meeting. If you would like to present a demo, please drop us a note in the Iter8 Slack workspace . Our meetings are also recorded and publicly available on our YouTube channel .","title":"Community meetings"},{"location":"contributing/","text":"Overview \u00b6 Welcome! We are delighted that you want to contribute to Iter8! \ud83d\udc96 As you get started, you are in the best position to give us feedback on areas of our project that we need help with including: Problems found during setup of Iter8 Gaps in the \"your first experiment\" tutorial and other documentation Bugs in our test and automation scripts If anything doesn't make sense, or doesn't work when you run it, please open a bug report and let us know! Ways to Contribute \u00b6 We welcome many different types of contributions including: Tutorials Other documentation Builds, CI Tasks from which experiments are composed Bug fixes Web design Communication, social media, blog posts Reviewing pull requests Ask for Help \u00b6 The best ways to reach us with a question is to ask... On the original GitHub issue In the #development channel in the Iter8 Slack workspace During our community meetings Find an Issue \u00b6 Iter8 issues are managed here . Issued labeled good first issue have extra information to help you make your first contribution. Issues labeled help wanted are issues suitable for someone who has already submitted their first pull request and is good to move on to the second one. Sometimes there won\u2019t be any issues with these labels. That\u2019s ok! There is likely still something for you to work on. If you want to contribute but you don\u2019t know where to start or can't find a suitable issue, you can reach out to us over the Iter8 Slack workspace for help finding something to work on. Once you see an issue that you'd like to work on, please post a comment saying that you want to work on it. Something like \"I want to work on this\" is fine. Pull Request Lifecycle \u00b6 Your PR is associated with one (and infrequently, with more than one) GitHub issue . You can start the submission of your PR as soon as this issue has been created. Follow the standard GitHub fork and pull request process when creating and submitting your PR. The associated GitHub issue might need to go through design discussions and may not be ready for development. Your PR might require new tests; these new or existing tests may not yet be running successfully. At this stage, keep your PR as a draft , to signal that it is not yet ready for review. Once design discussions are complete and tests pass, convert the draft PR into a regular PR to signal that it is ready for review. Additionally, post a message in the #development Slack channel of the Iter8 Slack workspace with a link to your PR. This will expedite the review. You can expect an initial review within 1-2 days of submitting a PR, and follow up reviews (if any) to happen over 2-5 days. Use the #development Slack channel of Iter8 Slack workspace to ping/bump when the pull request is ready for further review or if it appears stalled. Iter8 releases happen frequently. Once your PR is merged, you can expect your contribution to show up live in a short amount of time at https://iter8.tools . Sign Your Commits \u00b6 Licensing is important to open source projects. It provides some assurances that the software will continue to be available based under the terms that the author(s) desired. We require that contributors sign off on commits submitted to our project's repositories. The Developer Certificate of Origin (DCO) is a way to certify that you wrote and have the right to contribute the code you are submitting to the project. Read GitHub's documentation on signing your commits . You sign-off by adding the following to your commit messages. Your sign-off must match the Git user and email associated with the commit. This is my commit message Signed-off-by: Your Name <your.name@example.com> Git has a -s command line option to do this automatically: git commit -s -m 'This is my commit message' If you forgot to do this and have not yet pushed your changes to the remote repository, you can amend your commit with the sign-off by running: git commit --amend -s","title":"Contributing"},{"location":"contributing/#overview","text":"Welcome! We are delighted that you want to contribute to Iter8! \ud83d\udc96 As you get started, you are in the best position to give us feedback on areas of our project that we need help with including: Problems found during setup of Iter8 Gaps in the \"your first experiment\" tutorial and other documentation Bugs in our test and automation scripts If anything doesn't make sense, or doesn't work when you run it, please open a bug report and let us know!","title":"Overview"},{"location":"contributing/#ways-to-contribute","text":"We welcome many different types of contributions including: Tutorials Other documentation Builds, CI Tasks from which experiments are composed Bug fixes Web design Communication, social media, blog posts Reviewing pull requests","title":"Ways to Contribute"},{"location":"contributing/#ask-for-help","text":"The best ways to reach us with a question is to ask... On the original GitHub issue In the #development channel in the Iter8 Slack workspace During our community meetings","title":"Ask for Help"},{"location":"contributing/#find-an-issue","text":"Iter8 issues are managed here . Issued labeled good first issue have extra information to help you make your first contribution. Issues labeled help wanted are issues suitable for someone who has already submitted their first pull request and is good to move on to the second one. Sometimes there won\u2019t be any issues with these labels. That\u2019s ok! There is likely still something for you to work on. If you want to contribute but you don\u2019t know where to start or can't find a suitable issue, you can reach out to us over the Iter8 Slack workspace for help finding something to work on. Once you see an issue that you'd like to work on, please post a comment saying that you want to work on it. Something like \"I want to work on this\" is fine.","title":"Find an Issue"},{"location":"contributing/#pull-request-lifecycle","text":"Your PR is associated with one (and infrequently, with more than one) GitHub issue . You can start the submission of your PR as soon as this issue has been created. Follow the standard GitHub fork and pull request process when creating and submitting your PR. The associated GitHub issue might need to go through design discussions and may not be ready for development. Your PR might require new tests; these new or existing tests may not yet be running successfully. At this stage, keep your PR as a draft , to signal that it is not yet ready for review. Once design discussions are complete and tests pass, convert the draft PR into a regular PR to signal that it is ready for review. Additionally, post a message in the #development Slack channel of the Iter8 Slack workspace with a link to your PR. This will expedite the review. You can expect an initial review within 1-2 days of submitting a PR, and follow up reviews (if any) to happen over 2-5 days. Use the #development Slack channel of Iter8 Slack workspace to ping/bump when the pull request is ready for further review or if it appears stalled. Iter8 releases happen frequently. Once your PR is merged, you can expect your contribution to show up live in a short amount of time at https://iter8.tools .","title":"Pull Request Lifecycle"},{"location":"contributing/#sign-your-commits","text":"Licensing is important to open source projects. It provides some assurances that the software will continue to be available based under the terms that the author(s) desired. We require that contributors sign off on commits submitted to our project's repositories. The Developer Certificate of Origin (DCO) is a way to certify that you wrote and have the right to contribute the code you are submitting to the project. Read GitHub's documentation on signing your commits . You sign-off by adding the following to your commit messages. Your sign-off must match the Git user and email associated with the commit. This is my commit message Signed-off-by: Your Name <your.name@example.com> Git has a -s command line option to do this automatically: git commit -s -m 'This is my commit message' If you forgot to do this and have not yet pushed your changes to the remote repository, you can amend your commit with the sign-off by running: git commit --amend -s","title":"Sign Your Commits"},{"location":"news/","text":"News and Announcements \u00b6 Nov 2021: Iter8 at ACM Symposium on Cloud Computing. Full paper here Oct 2021: New Stack blog article by Hai Huang: Progressive Delivery on OpenShift Oct 2021: Iter8 at PREVAIL conference. Video coming soon. Conference details Oct 2021: New Stack blog article by Srinivasan Parthasarathy: Validate Service-Level Objectives of REST APIs Using Iter8 Jul 2021: Blog article by Clive Cox: ML\u200c \u200cProgressive\u200c \u200cRollouts\u200c \u200cwith\u200c \u200cSeldon\u200c \u200cand\u200c \u200cIter8\u200c Jul 2021: Iter8 at Knative meetup May 2021: Iter8 at KubeCon + CloudNativeCon Europe Mar 2021: Iter8 at Knative meetup Mar 2021: Kubeflow blog article by Animesh Singh and Dan Sun: Operationalize, Scale and Infuse Trust in AI Models using KFServing Oct 2020: Medium blog article by Michael Kalantar: Automated Canary Release of Microservices on Kubernetes using Tekton and iter8 Oct 2020: Medium blog article by Kusuma Chalasani: Better Performance with kruize and iter8 for your microservices application Oct 2020: Medium blog article by Srinivasan Parthasarathy: Automated Canary Release of TensorFlow Models on Kubernetes Oct 2020: Medium blog article by Sushma Ravichandran: Iter8: Take a look at the magic under the hood Aug 2020: Medium blog article by Fabio Oliveira: Iter8: Achieving Agility with Control","title":"News"},{"location":"news/#news-and-announcements","text":"Nov 2021: Iter8 at ACM Symposium on Cloud Computing. Full paper here Oct 2021: New Stack blog article by Hai Huang: Progressive Delivery on OpenShift Oct 2021: Iter8 at PREVAIL conference. Video coming soon. Conference details Oct 2021: New Stack blog article by Srinivasan Parthasarathy: Validate Service-Level Objectives of REST APIs Using Iter8 Jul 2021: Blog article by Clive Cox: ML\u200c \u200cProgressive\u200c \u200cRollouts\u200c \u200cwith\u200c \u200cSeldon\u200c \u200cand\u200c \u200cIter8\u200c Jul 2021: Iter8 at Knative meetup May 2021: Iter8 at KubeCon + CloudNativeCon Europe Mar 2021: Iter8 at Knative meetup Mar 2021: Kubeflow blog article by Animesh Singh and Dan Sun: Operationalize, Scale and Infuse Trust in AI Models using KFServing Oct 2020: Medium blog article by Michael Kalantar: Automated Canary Release of Microservices on Kubernetes using Tekton and iter8 Oct 2020: Medium blog article by Kusuma Chalasani: Better Performance with kruize and iter8 for your microservices application Oct 2020: Medium blog article by Srinivasan Parthasarathy: Automated Canary Release of TensorFlow Models on Kubernetes Oct 2020: Medium blog article by Sushma Ravichandran: Iter8: Take a look at the magic under the hood Aug 2020: Medium blog article by Fabio Oliveira: Iter8: Achieving Agility with Control","title":"News and Announcements"},{"location":"roadmap/","text":"Roadmap \u00b6 Iter8 GitHub Action Iter8 Tekton task Readiness checks for K8s resources Examples for experimenting inside K8s A/B(/n) testing example AutoX service for auto launching Iter8 experiments, app version tracking, and business telemetry read-metrics-from-db task adjust-traffic-split task Ability to run multiple loops of an experiment Iter8 experiments & progressive delivery for multi-cluster and edge cloud","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Iter8 GitHub Action Iter8 Tekton task Readiness checks for K8s resources Examples for experimenting inside K8s A/B(/n) testing example AutoX service for auto launching Iter8 experiments, app version tracking, and business telemetry read-metrics-from-db task adjust-traffic-split task Ability to run multiple loops of an experiment Iter8 experiments & progressive delivery for multi-cluster and edge cloud","title":"Roadmap"},{"location":"getting-started/concepts/","text":"Iter8 \u00b6 Kubernetes release optimizer built for DevOps, MLOps, SRE and data science teams. Iter8 experiment \u00b6 Iter8 experiments make it simple to collect performance and business metrics for apps and ML models, assess, compare and validate multiple app/ML model versions, promote the winning version, and maximize business value in each release. Experiment chart \u00b6 Experiment charts are Helm charts with a special structure that contain reusable experiment templates. Iter8 combines experiment charts with user supplied values to generate runnable experiment.yaml files. Iter8 experiment charts enable you to launch powerful release optimization experiments in seconds. Their usage is described in depth in various Iter8 tutorials . Iter8 Hub \u00b6 Iter8 hub refers to the URL of a Helm repo that hosts Iter8 experiment charts. Unless stated otherwise, Iter8 hub refers to the default URL https://iter8-tools.github.io/hub/ . You can host Iter8 experiment charts in any Helm repo, and use them with Iter8. Features at a glance \u00b6 Load testing with SLOs Iter8 experiments can generate requests for HTTP and gRPC services, collect built-in latency and error-related metrics, and validate SLOs. A/B(/n) testing Grow your business with every release. Iter8 experiments can compare multiple versions based on business value and identify a winner. Simple to use Get started with Iter8 in seconds using pre-packaged experiment charts. Run Iter8 experiments locally, inside Kubernetes, or inside your CI/CD/GitOps pipelines. App frameworks Use with any app, serverless, or ML framework. Iter8 works with Kubernetes deployments, statefulsets, Knative services, KServe/Seldon ML deployments, or other custom Kubernetes resource types. Implementation \u00b6 Iter8 is written in go and builds on a few awesome open source projects including: Helm Fortio ghz plotly.js","title":"Concepts"},{"location":"getting-started/concepts/#iter8","text":"Kubernetes release optimizer built for DevOps, MLOps, SRE and data science teams.","title":"Iter8"},{"location":"getting-started/concepts/#iter8-experiment","text":"Iter8 experiments make it simple to collect performance and business metrics for apps and ML models, assess, compare and validate multiple app/ML model versions, promote the winning version, and maximize business value in each release.","title":"Iter8 experiment"},{"location":"getting-started/concepts/#experiment-chart","text":"Experiment charts are Helm charts with a special structure that contain reusable experiment templates. Iter8 combines experiment charts with user supplied values to generate runnable experiment.yaml files. Iter8 experiment charts enable you to launch powerful release optimization experiments in seconds. Their usage is described in depth in various Iter8 tutorials .","title":"Experiment chart"},{"location":"getting-started/concepts/#iter8-hub","text":"Iter8 hub refers to the URL of a Helm repo that hosts Iter8 experiment charts. Unless stated otherwise, Iter8 hub refers to the default URL https://iter8-tools.github.io/hub/ . You can host Iter8 experiment charts in any Helm repo, and use them with Iter8.","title":"Iter8 Hub"},{"location":"getting-started/concepts/#features-at-a-glance","text":"Load testing with SLOs Iter8 experiments can generate requests for HTTP and gRPC services, collect built-in latency and error-related metrics, and validate SLOs. A/B(/n) testing Grow your business with every release. Iter8 experiments can compare multiple versions based on business value and identify a winner. Simple to use Get started with Iter8 in seconds using pre-packaged experiment charts. Run Iter8 experiments locally, inside Kubernetes, or inside your CI/CD/GitOps pipelines. App frameworks Use with any app, serverless, or ML framework. Iter8 works with Kubernetes deployments, statefulsets, Knative services, KServe/Seldon ML deployments, or other custom Kubernetes resource types.","title":"Features at a glance"},{"location":"getting-started/concepts/#implementation","text":"Iter8 is written in go and builds on a few awesome open source projects including: Helm Fortio ghz plotly.js","title":"Implementation"},{"location":"getting-started/help/","text":"Get Help \u00b6 Read Iter8 docs . Join the Iter8 Slack workspace . File an issue or start a discussion on the Iter8 GitHub repo . Attend our community meetings!","title":"Get help"},{"location":"getting-started/help/#get-help","text":"Read Iter8 docs . Join the Iter8 Slack workspace . File an issue or start a discussion on the Iter8 GitHub repo . Attend our community meetings!","title":"Get Help"},{"location":"getting-started/install/","text":"Install Iter8 CLI \u00b6 Brew Binaries Source Go 1.17+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Install a specific version You can install the Iter8 CLI with specific major and minor version numbers. For example, the following command installs the latest stable release of the Iter8 CLI with major 0 and minor 9 . brew tap iter8-tools/iter8 brew install iter8@0.9 Replace ${TAG} below with the latest or any desired Iter8 release tag . For example, export TAG = v0.9.0 darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-darwin-amd64.tar.gz | tar xvz - Move darwin-amd64/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-linux-amd64.tar.gz | tar xvz - Move linux-amd64/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-linux-386.tar.gz | tar xvz - Move linux-386/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-windows-amd64.tar.gz | tar xvz - Move windows-amd64/iter8.exe to any directory in your PATH . Build the Iter8 CLI from source as follows. Go 1.17+ is a pre-requisite. # you can replace master with a specific tag such as v0.9.0 export TAG = master https://github.com/iter8-tools/iter8.git?ref = ${ TAG } cd iter8 make install Install the latest stable release of the Iter8 CLI using go 1.17+ as follows. go install github.com/iter8-tools/iter8@latest You can now run iter8 (from your gopath bin/ directory) Install a specific version You can also install the Iter8 CLI with a specific tag. For example, the following command installs version 0.9.0 of the Iter8 CLI. go install github.com/iter8-tools/iter8@v0.9.0","title":"Install Iter8"},{"location":"getting-started/install/#install-iter8-cli","text":"Brew Binaries Source Go 1.17+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Install a specific version You can install the Iter8 CLI with specific major and minor version numbers. For example, the following command installs the latest stable release of the Iter8 CLI with major 0 and minor 9 . brew tap iter8-tools/iter8 brew install iter8@0.9 Replace ${TAG} below with the latest or any desired Iter8 release tag . For example, export TAG = v0.9.0 darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-darwin-amd64.tar.gz | tar xvz - Move darwin-amd64/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-linux-amd64.tar.gz | tar xvz - Move linux-amd64/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-linux-386.tar.gz | tar xvz - Move linux-386/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-windows-amd64.tar.gz | tar xvz - Move windows-amd64/iter8.exe to any directory in your PATH . Build the Iter8 CLI from source as follows. Go 1.17+ is a pre-requisite. # you can replace master with a specific tag such as v0.9.0 export TAG = master https://github.com/iter8-tools/iter8.git?ref = ${ TAG } cd iter8 make install Install the latest stable release of the Iter8 CLI using go 1.17+ as follows. go install github.com/iter8-tools/iter8@latest You can now run iter8 (from your gopath bin/ directory) Install a specific version You can also install the Iter8 CLI with a specific tag. For example, the following command installs version 0.9.0 of the Iter8 CLI. go install github.com/iter8-tools/iter8@v0.9.0","title":"Install Iter8 CLI"},{"location":"getting-started/your-first-experiment/","text":"Your First Experiment \u00b6 Benchmark an HTTP Service Get started with your first Iter8 experiment by benchmarking an HTTP service. 1. Install Iter8 CLI \u00b6 Brew Binaries Source Go 1.17+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Replace ${TAG} below with the latest or any desired Iter8 release tag . For example, export TAG = v0.9.0 darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-darwin-amd64.tar.gz | tar xvz - Move darwin-amd64/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-linux-amd64.tar.gz | tar xvz - Move linux-amd64/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-linux-386.tar.gz | tar xvz - Move linux-386/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-windows-amd64.tar.gz | tar xvz - Move windows-amd64/iter8.exe to any directory in your PATH . Build Iter8 from source as follows. Go 1.17+ is a pre-requisite. # you can replace master with a specific tag, for example, v0.9.0 export REF = master https://github.com/iter8-tools/iter8.git?ref = $REF cd iter8 make install Install the latest stable release of the Iter8 CLI using go 1.17+ as follows. go install github.com/iter8-tools/iter8@latest You can now run iter8 (from your gopath bin/ directory) 2. Launch experiment \u00b6 We will benchmark the HTTP service whose URL ( url ) is https://httpbin.org/get . The iter8 launch command downloads an experiment chart from Iter8 hub , combines the chart with values to generate the experiment.yaml file, runs the experiment, and writes results into the result.yaml file. Launch the benchmarking experiment as follows. iter8 launch -c load-test-http --set url = https://httpbin.org/get 3. View report \u00b6 View a report containing the metrics collected during this experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html The HTML report looks like this iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 1 Number of completed tasks: 1 Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/http-error-count | 0 .00 built-in/http-error-rate | 0 .00 built-in/http-latency-max ( msec ) | 203 .78 built-in/http-latency-mean ( msec ) | 17 .00 built-in/http-latency-min ( msec ) | 4 .20 built-in/http-latency-p50 ( msec ) | 10 .67 built-in/http-latency-p75 ( msec ) | 12 .33 built-in/http-latency-p90 ( msec ) | 14 .00 built-in/http-latency-p95 ( msec ) | 15 .67 built-in/http-latency-p99 ( msec ) | 202 .84 built-in/http-latency-p99.9 ( msec ) | 203 .69 built-in/http-latency-stddev ( msec ) | 37 .94 built-in/http-request-count | 100 .00 Congratulations! You completed your first Iter8 experiment. Next steps Learn more about benchmarking and validating HTTP services with service-level objectives (SLOs) . Learn more about benchmarking and validating gRPC services with service-level objectives (SLOs) .","title":"Your first experiment"},{"location":"getting-started/your-first-experiment/#your-first-experiment","text":"Benchmark an HTTP Service Get started with your first Iter8 experiment by benchmarking an HTTP service.","title":"Your First Experiment"},{"location":"getting-started/your-first-experiment/#1-install-iter8-cli","text":"Brew Binaries Source Go 1.17+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Replace ${TAG} below with the latest or any desired Iter8 release tag . For example, export TAG = v0.9.0 darwin-amd64 (MacOS) linux-amd64 linux-386 windows-amd64 wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-darwin-amd64.tar.gz | tar xvz - Move darwin-amd64/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-linux-amd64.tar.gz | tar xvz - Move linux-amd64/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-linux-386.tar.gz | tar xvz - Move linux-386/iter8 to any directory in your PATH . wget -qO- https://github.com/iter8-tools/iter8/releases/download/ ${ TAG } /iter8-windows-amd64.tar.gz | tar xvz - Move windows-amd64/iter8.exe to any directory in your PATH . Build Iter8 from source as follows. Go 1.17+ is a pre-requisite. # you can replace master with a specific tag, for example, v0.9.0 export REF = master https://github.com/iter8-tools/iter8.git?ref = $REF cd iter8 make install Install the latest stable release of the Iter8 CLI using go 1.17+ as follows. go install github.com/iter8-tools/iter8@latest You can now run iter8 (from your gopath bin/ directory)","title":"1. Install Iter8 CLI"},{"location":"getting-started/your-first-experiment/#2-launch-experiment","text":"We will benchmark the HTTP service whose URL ( url ) is https://httpbin.org/get . The iter8 launch command downloads an experiment chart from Iter8 hub , combines the chart with values to generate the experiment.yaml file, runs the experiment, and writes results into the result.yaml file. Launch the benchmarking experiment as follows. iter8 launch -c load-test-http --set url = https://httpbin.org/get","title":"2. Launch experiment"},{"location":"getting-started/your-first-experiment/#3-view-report","text":"View a report containing the metrics collected during this experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html The HTML report looks like this iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No task failures: true Total number of tasks: 1 Number of completed tasks: 1 Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/http-error-count | 0 .00 built-in/http-error-rate | 0 .00 built-in/http-latency-max ( msec ) | 203 .78 built-in/http-latency-mean ( msec ) | 17 .00 built-in/http-latency-min ( msec ) | 4 .20 built-in/http-latency-p50 ( msec ) | 10 .67 built-in/http-latency-p75 ( msec ) | 12 .33 built-in/http-latency-p90 ( msec ) | 14 .00 built-in/http-latency-p95 ( msec ) | 15 .67 built-in/http-latency-p99 ( msec ) | 202 .84 built-in/http-latency-p99.9 ( msec ) | 203 .69 built-in/http-latency-stddev ( msec ) | 37 .94 built-in/http-request-count | 100 .00 Congratulations! You completed your first Iter8 experiment. Next steps Learn more about benchmarking and validating HTTP services with service-level objectives (SLOs) . Learn more about benchmarking and validating gRPC services with service-level objectives (SLOs) .","title":"3. View report"},{"location":"tutorials/integrations/istio/","text":"Istio Examples based on Iter8 v0.7 \u00b6 Hybrid (A/B + SLOs) testing SLO validation SLO validation (single version) Progressive traffic shifting Fixed % split","title":"Istio"},{"location":"tutorials/integrations/istio/#istio-examples-based-on-iter8-v07","text":"Hybrid (A/B + SLOs) testing SLO validation SLO validation (single version) Progressive traffic shifting Fixed % split","title":"Istio Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/kserve/","text":"KServe Examples based on Iter8 v0.7 \u00b6 A/B Testing and Progressive Traffic Shift Hybrid (A/B + SLOs) testing Progressive traffic shifting Fixed-%-split Session affinity","title":"Kserve"},{"location":"tutorials/integrations/kserve/#kserve-examples-based-on-iter8-v07","text":"A/B Testing and Progressive Traffic Shift Hybrid (A/B + SLOs) testing Progressive traffic shifting Fixed-%-split Session affinity","title":"KServe Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/linkerd/","text":"Linkerd Examples based on Iter8 v0.7 \u00b6 A/B testing","title":"Linkerd"},{"location":"tutorials/integrations/linkerd/#linkerd-examples-based-on-iter8-v07","text":"A/B testing","title":"Linkerd Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/litmus/","text":"Litmus Chaos Examples based on Iter8 v0.7 \u00b6 SLO Validation with Chaos","title":"Litmus"},{"location":"tutorials/integrations/litmus/#litmus-chaos-examples-based-on-iter8-v07","text":"SLO Validation with Chaos","title":"Litmus Chaos Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/overview/","text":"Integrations \u00b6 The tutorials under the integrations section are maintained by members of the Iter8 community. They may become outdated. If you find that something is not working, please lend a helping hand and fix it in a PR. More integrations and examples are always welcome.","title":"Overview"},{"location":"tutorials/integrations/overview/#integrations","text":"The tutorials under the integrations section are maintained by members of the Iter8 community. They may become outdated. If you find that something is not working, please lend a helping hand and fix it in a PR. More integrations and examples are always welcome.","title":"Integrations"},{"location":"tutorials/integrations/seldon/","text":"Seldon Examples based on Iter8 v0.7 \u00b6 Hybrid (A/B + SLOs) testing Progressive traffic shifting","title":"Seldon"},{"location":"tutorials/integrations/seldon/#seldon-examples-based-on-iter8-v07","text":"Hybrid (A/B + SLOs) testing Progressive traffic shifting","title":"Seldon Examples based on Iter8 v0.7"},{"location":"tutorials/integrations/knative/load-test-grpc/","text":"Benchmark and Validate a Knative gRPC service \u00b6 Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! Update the Knative service deployed above to a gRPC service as follows. kn service update hello \\ --image docker.io/grpc/java-example-hostname:latest \\ --port 50051 \\ --revision-name = grpc 1. Launch experiment \u00b6 We will benchmark and validate SLOs for the Knative gRPC service by launching an Iter8 experiment. iter8 launch -c load-test-grpc \\ --set-string host = \"hello.default.127.0.0.1.sslip.io:50051\" \\ --set-string call = \"helloworld.Greeter.SayHello\" \\ --set-string protoURL = \"https://raw.githubusercontent.com/grpc/grpc-java/master/examples/example-hostname/src/main/proto/helloworld/helloworld.proto\" --set data.name = \"frodo\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency/mean = 400 \\ --set SLOs.latency/p90 = 500 \\ --set SLOs.latency/p '97\\.5' = 600 In the above experiment, the following SLOs are validated for the Knative service. - error rate is 0 - mean latency is under 400 msec - 90 th percentile latency is under 500 msec - 97.5 th percentile latency is under 600 msec 2. Assert outcomes \u00b6 Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos 3. View report \u00b6 View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text","title":"Benchmark and validate gRPC"},{"location":"tutorials/integrations/knative/load-test-grpc/#benchmark-and-validate-a-knative-grpc-service","text":"Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! Update the Knative service deployed above to a gRPC service as follows. kn service update hello \\ --image docker.io/grpc/java-example-hostname:latest \\ --port 50051 \\ --revision-name = grpc","title":"Benchmark and Validate a Knative gRPC service"},{"location":"tutorials/integrations/knative/load-test-grpc/#1-launch-experiment","text":"We will benchmark and validate SLOs for the Knative gRPC service by launching an Iter8 experiment. iter8 launch -c load-test-grpc \\ --set-string host = \"hello.default.127.0.0.1.sslip.io:50051\" \\ --set-string call = \"helloworld.Greeter.SayHello\" \\ --set-string protoURL = \"https://raw.githubusercontent.com/grpc/grpc-java/master/examples/example-hostname/src/main/proto/helloworld/helloworld.proto\" --set data.name = \"frodo\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency/mean = 400 \\ --set SLOs.latency/p90 = 500 \\ --set SLOs.latency/p '97\\.5' = 600 In the above experiment, the following SLOs are validated for the Knative service. - error rate is 0 - mean latency is under 400 msec - 90 th percentile latency is under 500 msec - 97.5 th percentile latency is under 600 msec","title":"1. Launch experiment"},{"location":"tutorials/integrations/knative/load-test-grpc/#2-assert-outcomes","text":"Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos","title":"2. Assert outcomes"},{"location":"tutorials/integrations/knative/load-test-grpc/#3-view-report","text":"View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text","title":"3. View report"},{"location":"tutorials/integrations/knative/load-test-http/","text":"Benchmark and Validate a Knative HTTP service \u00b6 Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! 1. Launch experiment \u00b6 We will benchmark and validate SLOs for the Knative HTTP service by launching an Iter8 experiment. iter8 launch -c load-test-http \\ --set url = http://hello.default.127.0.0.1.sslip.io \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 In the above experiment, the following SLOs are validated for the Knative service. - error rate is 0 - mean latency is under 50 msec - 90 th percentile latency is under 100 msec - 97.5 th percentile latency is under 200 msec 2. Assert outcomes \u00b6 Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos 3. View report \u00b6 View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text","title":"Benchmark and validate HTTP"},{"location":"tutorials/integrations/knative/load-test-http/#benchmark-and-validate-a-knative-http-service","text":"Before you begin Install Iter8 CLI . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World!","title":"Benchmark and Validate a Knative HTTP service"},{"location":"tutorials/integrations/knative/load-test-http/#1-launch-experiment","text":"We will benchmark and validate SLOs for the Knative HTTP service by launching an Iter8 experiment. iter8 launch -c load-test-http \\ --set url = http://hello.default.127.0.0.1.sslip.io \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 In the above experiment, the following SLOs are validated for the Knative service. - error rate is 0 - mean latency is under 50 msec - 90 th percentile latency is under 100 msec - 97.5 th percentile latency is under 200 msec","title":"1. Launch experiment"},{"location":"tutorials/integrations/knative/load-test-http/#2-assert-outcomes","text":"Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos","title":"2. Assert outcomes"},{"location":"tutorials/integrations/knative/load-test-http/#3-view-report","text":"View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text","title":"3. View report"},{"location":"tutorials/load-test-grpc/streaming/","text":"Benchmarking and Validating Streaming gRPC \u00b6 Overview This tutorial describes additional parameters enabled by load-test-grpc experiment while benchmarking and validating streaming gRPC. Before you begin Install Iter8 CLI . Get familiar with the basic usage examples . Run the RouteGuide service in a separate terminal. Choose any language and follow the linked instructions. C# C++ Dart Go Java Kotlin Node Objective-C PHP Python Ruby Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Call data \u00b6 For client streaming or bi-directional calls, the load-test-grpc chart accepts an array of messages, each element representing a single message within the stream call. For example, iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data [ 0 ] .name = \"Joe\" \\ --set data [ 1 ] .name = \"Kate\" \\ --set data [ 2 ] .name = \"Sara\" If a single object is given for data then it is automatically converted to an array with single element. In case of client streaming, load-test-grpc sends all the messages in the input array, and then closes and receives. Stream interval \u00b6 Stream interval duration spreads stream sends by given amount, specified as a Go duration string . This parameter applies to client and bidirectional streaming calls. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data [ 0 ] .name = \"Joe\" \\ --set streamInterval = \"100ms\" Stream call duration \u00b6 This parameter sets the maximum stream call duration. For client streaming and bidirectional calls, load-test-grpc will send messages until this duration expires. For server streaming calls, load-test-grpc will receive messages until the duration has expired. In server streaming calls, expiration of this duration will result in a call cancelled error. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data [ 0 ] .name = \"Joe\" \\ --set streamCallDuration = \"500ms\" Stream call count \u00b6 This parameter sets the maximum number of message sends or receives that will be performed by load-test-grpc in a streaming call, before closing the stream and ending the call. For client streaming and bidirectional calls, this represents the number of messages sent. For server streaming calls load-test-grpc will receive messages until the specified count is reached. Note that in server streaming calls, reaching this count will result in a call cancelled error. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data [ 0 ] .name = \"Joe\" \\ --set streamCallCount = 100 If the data array contains more elements than the count, only messages up to the specified count will be used. If the data array contains fewer elements than the count specified, the data will be iterated over until the specified count is reached.","title":"Streaming gRPC"},{"location":"tutorials/load-test-grpc/streaming/#benchmarking-and-validating-streaming-grpc","text":"Overview This tutorial describes additional parameters enabled by load-test-grpc experiment while benchmarking and validating streaming gRPC. Before you begin Install Iter8 CLI . Get familiar with the basic usage examples . Run the RouteGuide service in a separate terminal. Choose any language and follow the linked instructions. C# C++ Dart Go Java Kotlin Node Objective-C PHP Python Ruby Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service .","title":"Benchmarking and Validating Streaming gRPC"},{"location":"tutorials/load-test-grpc/streaming/#call-data","text":"For client streaming or bi-directional calls, the load-test-grpc chart accepts an array of messages, each element representing a single message within the stream call. For example, iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data [ 0 ] .name = \"Joe\" \\ --set data [ 1 ] .name = \"Kate\" \\ --set data [ 2 ] .name = \"Sara\" If a single object is given for data then it is automatically converted to an array with single element. In case of client streaming, load-test-grpc sends all the messages in the input array, and then closes and receives.","title":"Call data"},{"location":"tutorials/load-test-grpc/streaming/#stream-interval","text":"Stream interval duration spreads stream sends by given amount, specified as a Go duration string . This parameter applies to client and bidirectional streaming calls. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data [ 0 ] .name = \"Joe\" \\ --set streamInterval = \"100ms\"","title":"Stream interval"},{"location":"tutorials/load-test-grpc/streaming/#stream-call-duration","text":"This parameter sets the maximum stream call duration. For client streaming and bidirectional calls, load-test-grpc will send messages until this duration expires. For server streaming calls, load-test-grpc will receive messages until the duration has expired. In server streaming calls, expiration of this duration will result in a call cancelled error. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data [ 0 ] .name = \"Joe\" \\ --set streamCallDuration = \"500ms\"","title":"Stream call duration"},{"location":"tutorials/load-test-grpc/streaming/#stream-call-count","text":"This parameter sets the maximum number of message sends or receives that will be performed by load-test-grpc in a streaming call, before closing the stream and ending the call. For client streaming and bidirectional calls, this represents the number of messages sent. For server streaming calls load-test-grpc will receive messages until the specified count is reached. Note that in server streaming calls, reaching this count will result in a call cancelled error. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data [ 0 ] .name = \"Joe\" \\ --set streamCallCount = 100 If the data array contains more elements than the count, only messages up to the specified count will be used. If the data array contains fewer elements than the count specified, the data will be iterated over until the specified count is reached.","title":"Stream call count"},{"location":"tutorials/load-test-grpc/usage/","text":"Benchmark and Validate gRPC Services \u00b6 Overview Use Iter8's load-test-grpc experiment chart to generate call requests for gRPC services, collect Iter8's built-in latency and error-related metrics, and validate service-level objectives (SLOs). Use-cases: Benchmarking Validation of service level objectives (SLOs) Safe rollouts Continuous delivery (CD) If the gRPC service satisfies SLOs, it may be safely rolled out, for example, from a test environment to production. Note: The parameters supported by load-test-grpc are inherited for the most part from ghz . Before you begin Install Iter8 CLI . Run the Greeter service in a separate terminal. Choose any language and follow the linked instructions. C# C++ Dart Go Java Kotlin Node Objective-C PHP Python Ruby Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Basic example \u00b6 Load test a unary gRPC service as follows by specifying its host , its fully-qualified method name ( call ), and the URL of Protocol Buffer file ( protoURL ) defining the service. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" Metrics and SLOs \u00b6 By default, the following metrics are collected by load-test-grpc : request-count : total number of requests sent error-count : number of error responses error-rate : fraction of error responses latency/mean : mean of observed latency values latency/stddev : standard deviation of observed latency values latency/min : min of observed latency values latency/max : max of observed latency values latency/pX : X th percentile of observed latency values, for X in [50.0, 75.0, 90.0, 95.0, 99.0, 99.9] In addition, any other latency percentiles that are specified as part of SLOs are also collected. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 In the above example, The following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec Report \u00b6 The Iter8 experiment report contains metric values, and SLO validation results. View it as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report Assert \u00b6 Use the iter8 assert subcommand to check if the experiment completed without failures, and if all the SLOs are satisfied. This command will exit with code 0 if the assert conditions are satisfied, and with code 1 otherwise. Assertions are especially useful within CI/CD/GitOps pipelines. iter8 assert -c completed -c nofailure -c slos Load profile \u00b6 Control the characteristics of the load generated by the load-test-grpc experiment by setting the number of requests ( total )/duration ( duration ), the number of requests per second ( rps ), number of connections to use ( connections ), and the number of concurrent request workers to use in each connection ( concurrency ). Number of requests Duration iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" \\ --set total = 500 \\ --set rps = 25 \\ --set concurrency = 50 \\ --set connections = 10 The duration value may be any Go duration string . iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" \\ --set duration = \"20s\" \\ --set rps = 25 \\ --set concurrency = 50 \\ --set connections = 10 When you set total and qps , the duration of the load test is automatically determined. Similarly, when you set duration and qps , the number of requests is automatically determined. If you set both total and duration , the former will be ignored. Call data \u00b6 gRPC calls may include data serialized as Protocol Buffer messages . Supply them as values, or by pointing to JSON or binary files containing the data. Data Data file Data URL Binary data file Binary data URL The protobuf file specifying the gRPC service used in this tutorial defines the following HelloRequest message format: message HelloRequest { string name = 1 ; } Suppose you want include the following HelloRequest message with every call. name : frodo To do so, run the Iter8 experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" Nested data Call data may be nested. For example, consider the data: name : frodo realm : planet : earth location : middle You can set the above data during iter8 launch as follows: --set data.name = \"frodo\" \\ --set data.realm.planet = \"earth\" \\ --set data.realm.location = \"middle\" Suppose the call data you want to send is contained in a local JSON file. Iter8 can use the data contained in it during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set dataFile = \"/the/path/to/data.json\" # \"./data.json\" also works Suppose the call data you want to send is contained in a JSON file and hosted at the url https://location.of/data.json . Iter8 can fetch this JSON file and use the data contained in it during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set dataURL = \"https://location.of/data.json\" Suppose the call data you want to send is contained in a local binary file as a serialized binary message or multiple count-prefixed messages. Iter8 can use the data contained in it during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set binaryDataFile = \"/the/path/to/data.bin\" # \"./data.bin\" also works Suppose that call data you want to send is contained in a binary file as a serialized binary message or multiple count-prefixed messages, and hosted at the url https://location.of/data.bin . Iter8 can fetch this binary file and use the data contained in it during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set binaryDataURL = \"https://location.of/data.bin\" If more than one of the above parameters are specified, the order of precedence is as follows: Data > Data file > Data URL > Binary data file > Binary data URL Call metadata \u00b6 gRPC calls may include metadata which is information about a particular call. Supply them as values, or by pointing to a JSON file containing the metadata. Metadata Metadata file Metadata URL You can supply metadata of type map[string]string (i.e., a map whose keys and values are strings) in the gRPC load test. Suppose you want to use the following metadata. darth : vader lord : sauron volde : mort To do so, run the Iter8 experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadata.darth = \"vader\" \\ --set metadata.lord = \"sauron\" \\ --set metadata.volde = \"mort\" Suppose the call metadata you want to send is contained in a local JSON file. Iter8 can use the metadata contained in it during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadataFile = \"/the/path/to/metadata.json\" # \"./metadata.json\" also works Suppose the call metadata you want to send is contained in a JSON file and hosted at the url https://location.of/metadata.json . Iter8 can fetch this JSON file and use its contents as the metadata during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadataURL = \"https://location.of/metadata.json\" If more than one of the above parameters are specified, the order of precedence is as follows: Metadata > Metadata file > Metadata URL Proto and reflection \u00b6 The gRPC server method signatures and message formats are defined in a .proto source file or a compiled .protoset file. Supply them as follows. Proto file Proto URL Protoset file Protoset URL Reflection Supply the name of a .proto source file. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"/path/to/helloworld.proto\" # \"./helloworld.proto\" also works Supply a URL that hosts a .proto source file. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" Supply the name of a .protoset file that is compiled from .proto source files. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoset = \"./myservice.protoset\" Supply a URL that hosts a .protoset file. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protosetURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.protoset\" In the absence of .proto and .protoset information, the load-test-grpc experiment will attempt to use server reflection . You can supply reflect metadata as values. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set reflectMetadata.clientId = \"5hL64dd0\" \\ --set reflectMetadata.clientMood = \"delightful\"","title":"Basic usage"},{"location":"tutorials/load-test-grpc/usage/#benchmark-and-validate-grpc-services","text":"Overview Use Iter8's load-test-grpc experiment chart to generate call requests for gRPC services, collect Iter8's built-in latency and error-related metrics, and validate service-level objectives (SLOs). Use-cases: Benchmarking Validation of service level objectives (SLOs) Safe rollouts Continuous delivery (CD) If the gRPC service satisfies SLOs, it may be safely rolled out, for example, from a test environment to production. Note: The parameters supported by load-test-grpc are inherited for the most part from ghz . Before you begin Install Iter8 CLI . Run the Greeter service in a separate terminal. Choose any language and follow the linked instructions. C# C++ Dart Go Java Kotlin Node Objective-C PHP Python Ruby Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service . Run the gRPC service .","title":"Benchmark and Validate gRPC Services"},{"location":"tutorials/load-test-grpc/usage/#basic-example","text":"Load test a unary gRPC service as follows by specifying its host , its fully-qualified method name ( call ), and the URL of Protocol Buffer file ( protoURL ) defining the service. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\"","title":"Basic example"},{"location":"tutorials/load-test-grpc/usage/#metrics-and-slos","text":"By default, the following metrics are collected by load-test-grpc : request-count : total number of requests sent error-count : number of error responses error-rate : fraction of error responses latency/mean : mean of observed latency values latency/stddev : standard deviation of observed latency values latency/min : min of observed latency values latency/max : max of observed latency values latency/pX : X th percentile of observed latency values, for X in [50.0, 75.0, 90.0, 95.0, 99.0, 99.9] In addition, any other latency percentiles that are specified as part of SLOs are also collected. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 In the above example, The following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec","title":"Metrics and SLOs"},{"location":"tutorials/load-test-grpc/usage/#report","text":"The Iter8 experiment report contains metric values, and SLO validation results. View it as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report","title":"Report"},{"location":"tutorials/load-test-grpc/usage/#assert","text":"Use the iter8 assert subcommand to check if the experiment completed without failures, and if all the SLOs are satisfied. This command will exit with code 0 if the assert conditions are satisfied, and with code 1 otherwise. Assertions are especially useful within CI/CD/GitOps pipelines. iter8 assert -c completed -c nofailure -c slos","title":"Assert"},{"location":"tutorials/load-test-grpc/usage/#load-profile","text":"Control the characteristics of the load generated by the load-test-grpc experiment by setting the number of requests ( total )/duration ( duration ), the number of requests per second ( rps ), number of connections to use ( connections ), and the number of concurrent request workers to use in each connection ( concurrency ). Number of requests Duration iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" \\ --set total = 500 \\ --set rps = 25 \\ --set concurrency = 50 \\ --set connections = 10 The duration value may be any Go duration string . iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" \\ --set duration = \"20s\" \\ --set rps = 25 \\ --set concurrency = 50 \\ --set connections = 10 When you set total and qps , the duration of the load test is automatically determined. Similarly, when you set duration and qps , the number of requests is automatically determined. If you set both total and duration , the former will be ignored.","title":"Load profile"},{"location":"tutorials/load-test-grpc/usage/#call-data","text":"gRPC calls may include data serialized as Protocol Buffer messages . Supply them as values, or by pointing to JSON or binary files containing the data. Data Data file Data URL Binary data file Binary data URL The protobuf file specifying the gRPC service used in this tutorial defines the following HelloRequest message format: message HelloRequest { string name = 1 ; } Suppose you want include the following HelloRequest message with every call. name : frodo To do so, run the Iter8 experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" Nested data Call data may be nested. For example, consider the data: name : frodo realm : planet : earth location : middle You can set the above data during iter8 launch as follows: --set data.name = \"frodo\" \\ --set data.realm.planet = \"earth\" \\ --set data.realm.location = \"middle\" Suppose the call data you want to send is contained in a local JSON file. Iter8 can use the data contained in it during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set dataFile = \"/the/path/to/data.json\" # \"./data.json\" also works Suppose the call data you want to send is contained in a JSON file and hosted at the url https://location.of/data.json . Iter8 can fetch this JSON file and use the data contained in it during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set dataURL = \"https://location.of/data.json\" Suppose the call data you want to send is contained in a local binary file as a serialized binary message or multiple count-prefixed messages. Iter8 can use the data contained in it during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set binaryDataFile = \"/the/path/to/data.bin\" # \"./data.bin\" also works Suppose that call data you want to send is contained in a binary file as a serialized binary message or multiple count-prefixed messages, and hosted at the url https://location.of/data.bin . Iter8 can fetch this binary file and use the data contained in it during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set binaryDataURL = \"https://location.of/data.bin\" If more than one of the above parameters are specified, the order of precedence is as follows: Data > Data file > Data URL > Binary data file > Binary data URL","title":"Call data"},{"location":"tutorials/load-test-grpc/usage/#call-metadata","text":"gRPC calls may include metadata which is information about a particular call. Supply them as values, or by pointing to a JSON file containing the metadata. Metadata Metadata file Metadata URL You can supply metadata of type map[string]string (i.e., a map whose keys and values are strings) in the gRPC load test. Suppose you want to use the following metadata. darth : vader lord : sauron volde : mort To do so, run the Iter8 experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadata.darth = \"vader\" \\ --set metadata.lord = \"sauron\" \\ --set metadata.volde = \"mort\" Suppose the call metadata you want to send is contained in a local JSON file. Iter8 can use the metadata contained in it during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadataFile = \"/the/path/to/metadata.json\" # \"./metadata.json\" also works Suppose the call metadata you want to send is contained in a JSON file and hosted at the url https://location.of/metadata.json . Iter8 can fetch this JSON file and use its contents as the metadata during the gRPC load test. To do so, run the experiment as follows. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set metadataURL = \"https://location.of/metadata.json\" If more than one of the above parameters are specified, the order of precedence is as follows: Metadata > Metadata file > Metadata URL","title":"Call metadata"},{"location":"tutorials/load-test-grpc/usage/#proto-and-reflection","text":"The gRPC server method signatures and message formats are defined in a .proto source file or a compiled .protoset file. Supply them as follows. Proto file Proto URL Protoset file Protoset URL Reflection Supply the name of a .proto source file. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"/path/to/helloworld.proto\" # \"./helloworld.proto\" also works Supply a URL that hosts a .proto source file. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" Supply the name of a .protoset file that is compiled from .proto source files. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protoset = \"./myservice.protoset\" Supply a URL that hosts a .protoset file. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set protosetURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.protoset\" In the absence of .proto and .protoset information, the load-test-grpc experiment will attempt to use server reflection . You can supply reflect metadata as values. iter8 launch -c load-test-grpc \\ --set host = \"127.0.0.1:50051\" \\ --set call = \"helloworld.Greeter.SayHello\" \\ --set reflectMetadata.clientId = \"5hL64dd0\" \\ --set reflectMetadata.clientMood = \"delightful\"","title":"Proto and reflection"},{"location":"tutorials/load-test-http/usage/","text":"Benchmark and Validate HTTP Services \u00b6 Overview Use Iter8's load-test-http experiment chart to generate call requests for HTTP services, collect Iter8's built-in latency and error-related metrics, and validate service-level objectives (SLOs). Use-cases: Benchmarking Validation of service level objectives (SLOs) Safe rollouts Continuous delivery (CD) If the HTTP service satisfies SLOs, it may be safely rolled out, for example, from a test environment to production. Before you begin Install Iter8 CLI . Run the httpbin service from a separate terminal. docker run -p 80 :80 kennethreitz/httpbin You can also use Podman or other alternatives to Docker in the above command. Basic example \u00b6 Your first experiment provides a basic example of using the load-test-http experiment chart. This tutorial describes various ways to parameterize load-test-http . Metrics and SLOs \u00b6 By default, the following metrics are collected by load-test-http : request-count : total number of requests sent error-count : number of error responses error-rate : fraction of error responses latency-mean : mean of observed latency values latency-stddev : standard deviation of observed latency values latency-min : min of observed latency values latency-max : max of observed latency values latency-pX : X th percentile of observed latency values, for X in [50.0, 75.0, 90.0, 95.0, 99.0, 99.9] In addition, any other latency percentiles that are specified as part of SLOs are also collected. iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/get \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 In the above example, The following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec Report \u00b6 The Iter8 experiment report contains metric values, and SLO validation results. View it as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report Assert \u00b6 The iter8 assert subcommand asserts if experiment result satisfies the specified conditions. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful within CI/CD/GitOps pipelines. Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied Load profile \u00b6 Control the characteristics of the load generated by the load-test-http experiment by setting the number of queries ( numQueries ), duration ( duration ), the number of queries sent per second ( qps ), and the number of parallel connections used to send queries ( connections ). Number of queries Duration iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/get \\ --set numQueries = 200 \\ --set qps = 10 \\ --set connections = 5 The duration value may be any Go duration string . iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/get \\ --set duration = 20s \\ --set qps = 10 \\ --set connections = 5 When you set numQueries and qps , the duration of the load test is automatically determined. Similarly, when you set the duration and qps , the number of queries to be sent is automatically determined. If you set both numQueries and duration , the latter will be ignored. Payload \u00b6 Send any type of content as payload during the load test of HTTP POST endpoints, either by specifying the payload as a string ( payloadStr ), or by specifying a URL for Iter8 to fetch the payload from ( payloadURL ). You can also specify the HTTP Content Type header ( contentType ). string string with contentType JSON from URL image from URL When payloadStr is set, content type is set to application/octet-stream by default. iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" Set content type to text/plain . iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" \\ --set contentType = \"text/plain\" Fetch JSON content from a URL. Use this JSON as payload. Set content type to application/json . iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/post \\ --set payloadURL = https://data.police.uk/api/crimes-street-dates \\ --set contentType = \"application/json\" Fetch jpeg image from a URL. Use this image as payload. Set content type to image/jpeg . iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/post \\ --set payloadURL = https://cdn.pixabay.com/photo/2021/09/08/17/58/poppy-6607526_1280.jpg \\ --set contentType = \"image/jpeg\"","title":"Basic usage"},{"location":"tutorials/load-test-http/usage/#benchmark-and-validate-http-services","text":"Overview Use Iter8's load-test-http experiment chart to generate call requests for HTTP services, collect Iter8's built-in latency and error-related metrics, and validate service-level objectives (SLOs). Use-cases: Benchmarking Validation of service level objectives (SLOs) Safe rollouts Continuous delivery (CD) If the HTTP service satisfies SLOs, it may be safely rolled out, for example, from a test environment to production. Before you begin Install Iter8 CLI . Run the httpbin service from a separate terminal. docker run -p 80 :80 kennethreitz/httpbin You can also use Podman or other alternatives to Docker in the above command.","title":"Benchmark and Validate HTTP Services"},{"location":"tutorials/load-test-http/usage/#basic-example","text":"Your first experiment provides a basic example of using the load-test-http experiment chart. This tutorial describes various ways to parameterize load-test-http .","title":"Basic example"},{"location":"tutorials/load-test-http/usage/#metrics-and-slos","text":"By default, the following metrics are collected by load-test-http : request-count : total number of requests sent error-count : number of error responses error-rate : fraction of error responses latency-mean : mean of observed latency values latency-stddev : standard deviation of observed latency values latency-min : min of observed latency values latency-max : max of observed latency values latency-pX : X th percentile of observed latency values, for X in [50.0, 75.0, 90.0, 95.0, 99.0, 99.9] In addition, any other latency percentiles that are specified as part of SLOs are also collected. iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/get \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 In the above example, The following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec","title":"Metrics and SLOs"},{"location":"tutorials/load-test-http/usage/#report","text":"The Iter8 experiment report contains metric values, and SLO validation results. View it as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report","title":"Report"},{"location":"tutorials/load-test-http/usage/#assert","text":"The iter8 assert subcommand asserts if experiment result satisfies the specified conditions. If assert conditions are satisfied, it exits with code 0 ; else, it exits with code 1 . Assertions are especially useful within CI/CD/GitOps pipelines. Assert that the experiment completed without failures, and all SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos Sample output from assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied","title":"Assert"},{"location":"tutorials/load-test-http/usage/#load-profile","text":"Control the characteristics of the load generated by the load-test-http experiment by setting the number of queries ( numQueries ), duration ( duration ), the number of queries sent per second ( qps ), and the number of parallel connections used to send queries ( connections ). Number of queries Duration iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/get \\ --set numQueries = 200 \\ --set qps = 10 \\ --set connections = 5 The duration value may be any Go duration string . iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/get \\ --set duration = 20s \\ --set qps = 10 \\ --set connections = 5 When you set numQueries and qps , the duration of the load test is automatically determined. Similarly, when you set the duration and qps , the number of queries to be sent is automatically determined. If you set both numQueries and duration , the latter will be ignored.","title":"Load profile"},{"location":"tutorials/load-test-http/usage/#payload","text":"Send any type of content as payload during the load test of HTTP POST endpoints, either by specifying the payload as a string ( payloadStr ), or by specifying a URL for Iter8 to fetch the payload from ( payloadURL ). You can also specify the HTTP Content Type header ( contentType ). string string with contentType JSON from URL image from URL When payloadStr is set, content type is set to application/octet-stream by default. iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" Set content type to text/plain . iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" \\ --set contentType = \"text/plain\" Fetch JSON content from a URL. Use this JSON as payload. Set content type to application/json . iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/post \\ --set payloadURL = https://data.police.uk/api/crimes-street-dates \\ --set contentType = \"application/json\" Fetch jpeg image from a URL. Use this image as payload. Set content type to image/jpeg . iter8 launch -c load-test-http \\ --set url = http://127.0.0.1/post \\ --set payloadURL = https://cdn.pixabay.com/photo/2021/09/08/17/58/poppy-6607526_1280.jpg \\ --set contentType = \"image/jpeg\"","title":"Payload"},{"location":"user-guide/commands/iter8/","text":"iter8 \u00b6 Kubernetes Release Optimizer Synopsis \u00b6 Safely rollout apps. Maximize business value. Use with any app/serverless/ML framework. Simplify CI/CD/GitOps. Get started in seconds. Environment variables: Name Description $LOG_LEVEL Iter8 log level. Values are: Trace, Debug, Info (default), Warning, Error, Fatal and Panic. Options \u00b6 -h, --help help for iter8 SEE ALSO \u00b6 iter8 assert - Assert if experiment result satisfies the specified conditions iter8 gen - Render experiment.yaml file by combining an experiment chart with values. iter8 hub - Download an experiment chart from an Iter8 experiment chart repo iter8 launch - Launch an Iter8 experiment. iter8 report - View report from experiment result iter8 run - Run experiment specified in experiment.yaml. iter8 version - Print Iter8 version information Auto generated by spf13/cobra on 9-Feb-2022 \u00b6","title":"iter8"},{"location":"user-guide/commands/iter8/#iter8","text":"Kubernetes Release Optimizer","title":"iter8"},{"location":"user-guide/commands/iter8/#synopsis","text":"Safely rollout apps. Maximize business value. Use with any app/serverless/ML framework. Simplify CI/CD/GitOps. Get started in seconds. Environment variables: Name Description $LOG_LEVEL Iter8 log level. Values are: Trace, Debug, Info (default), Warning, Error, Fatal and Panic.","title":"Synopsis"},{"location":"user-guide/commands/iter8/#options","text":"-h, --help help for iter8","title":"Options"},{"location":"user-guide/commands/iter8/#see-also","text":"iter8 assert - Assert if experiment result satisfies the specified conditions iter8 gen - Render experiment.yaml file by combining an experiment chart with values. iter8 hub - Download an experiment chart from an Iter8 experiment chart repo iter8 launch - Launch an Iter8 experiment. iter8 report - View report from experiment result iter8 run - Run experiment specified in experiment.yaml. iter8 version - Print Iter8 version information","title":"SEE ALSO"},{"location":"user-guide/commands/iter8/#auto-generated-by-spf13cobra-on-9-feb-2022","text":"","title":"Auto generated by spf13/cobra on 9-Feb-2022"},{"location":"user-guide/commands/iter8_assert/","text":"iter8 assert \u00b6 Assert if experiment result satisfies the specified conditions Synopsis \u00b6 Assert if experiment result satisfies the specified conditions. If assert conditions are satisfied, exit with code 0. Else, exit with code 1. Assertions are especially useful within CI/CD/GitOps pipelines. iter8 assert [flags] Examples \u00b6 # assert that the experiment completed without failures, # and SLOs were satisfied iter8 assert -c completed -c nofailure -c slos # another way to write the above assertion iter8 assert -c completed,nofailure,slos # if the experiment involves multiple app versions, # SLOs can be asserted for individual versions # for example, the following command asserts that # SLOs are satisfied by version numbered 0 iter8 assert -c completed,nofailures,slosby=0 # timeouts are useful for an experiment that may be long running # and may run in the background iter8 assert -c completed,nofailures,slosby=0 -t 5s Options \u00b6 -c, --condition(s); can specify multiple or separate conditions with commas; strings completed | nofailure | slos | slosby=<version number> -h, --help help for assert -t, --timeout duration timeout duration (e.g., 5s) SEE ALSO \u00b6 iter8 - Kubernetes Release Optimizer Auto generated by spf13/cobra on 9-Feb-2022 \u00b6","title":"iter8 assert"},{"location":"user-guide/commands/iter8_assert/#iter8-assert","text":"Assert if experiment result satisfies the specified conditions","title":"iter8 assert"},{"location":"user-guide/commands/iter8_assert/#synopsis","text":"Assert if experiment result satisfies the specified conditions. If assert conditions are satisfied, exit with code 0. Else, exit with code 1. Assertions are especially useful within CI/CD/GitOps pipelines. iter8 assert [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_assert/#examples","text":"# assert that the experiment completed without failures, # and SLOs were satisfied iter8 assert -c completed -c nofailure -c slos # another way to write the above assertion iter8 assert -c completed,nofailure,slos # if the experiment involves multiple app versions, # SLOs can be asserted for individual versions # for example, the following command asserts that # SLOs are satisfied by version numbered 0 iter8 assert -c completed,nofailures,slosby=0 # timeouts are useful for an experiment that may be long running # and may run in the background iter8 assert -c completed,nofailures,slosby=0 -t 5s","title":"Examples"},{"location":"user-guide/commands/iter8_assert/#options","text":"-c, --condition(s); can specify multiple or separate conditions with commas; strings completed | nofailure | slos | slosby=<version number> -h, --help help for assert -t, --timeout duration timeout duration (e.g., 5s)","title":"Options"},{"location":"user-guide/commands/iter8_assert/#see-also","text":"iter8 - Kubernetes Release Optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_assert/#auto-generated-by-spf13cobra-on-9-feb-2022","text":"","title":"Auto generated by spf13/cobra on 9-Feb-2022"},{"location":"user-guide/commands/iter8_gen/","text":"iter8 gen \u00b6 Render experiment.yaml file by combining an experiment chart with values. Synopsis \u00b6 Render experiment.yaml file by combining an experiment chart with values. iter8 gen [flags] Options \u00b6 -c, --chartPath string path to experiment chart folder -h, --help help for gen --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple) SEE ALSO \u00b6 iter8 - Kubernetes Release Optimizer Auto generated by spf13/cobra on 9-Feb-2022 \u00b6","title":"iter8 gen"},{"location":"user-guide/commands/iter8_gen/#iter8-gen","text":"Render experiment.yaml file by combining an experiment chart with values.","title":"iter8 gen"},{"location":"user-guide/commands/iter8_gen/#synopsis","text":"Render experiment.yaml file by combining an experiment chart with values. iter8 gen [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_gen/#options","text":"-c, --chartPath string path to experiment chart folder -h, --help help for gen --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple)","title":"Options"},{"location":"user-guide/commands/iter8_gen/#see-also","text":"iter8 - Kubernetes Release Optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_gen/#auto-generated-by-spf13cobra-on-9-feb-2022","text":"","title":"Auto generated by spf13/cobra on 9-Feb-2022"},{"location":"user-guide/commands/iter8_hub/","text":"iter8 hub \u00b6 Download an experiment chart from an Iter8 experiment chart repo Synopsis \u00b6 Download an experiment chart from an Iter8 experiment chart repo. This is useful for fetching experiments to inspect, modify, launch, or repackage. By default, this command looks for the specified experiment chart in the default Iter8 experiment repo. You can use third party repos by supplying the repo URL flag. The default Iter8 experiment chart repo has the following URL: https://iter8-tools.github.io/hub iter8 hub [flags] Examples \u00b6 # download the load-test-http experiment chart from # the default Iter8 experiment chart repo iter8 hub -c load-test-http # download the great-expectations experiment chart from # the third party experiment chart repo whose URL is # https://great.expectations.pip iter8 hub -c great-expectations -r https://great.expectations.pip Options \u00b6 -c, --chartName string name of the experiment chart -d, --destDir string destination folder where experiment chart is downloaded and unpacked; by default, Iter8 will create and use a temporary folder as destination -h, --help help for hub -r, --repoURL string URL of experiment chart repo (default \"https://iter8-tools.github.io/hub\") SEE ALSO \u00b6 iter8 - Kubernetes Release Optimizer Auto generated by spf13/cobra on 9-Feb-2022 \u00b6","title":"iter8 hub"},{"location":"user-guide/commands/iter8_hub/#iter8-hub","text":"Download an experiment chart from an Iter8 experiment chart repo","title":"iter8 hub"},{"location":"user-guide/commands/iter8_hub/#synopsis","text":"Download an experiment chart from an Iter8 experiment chart repo. This is useful for fetching experiments to inspect, modify, launch, or repackage. By default, this command looks for the specified experiment chart in the default Iter8 experiment repo. You can use third party repos by supplying the repo URL flag. The default Iter8 experiment chart repo has the following URL: https://iter8-tools.github.io/hub iter8 hub [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_hub/#examples","text":"# download the load-test-http experiment chart from # the default Iter8 experiment chart repo iter8 hub -c load-test-http # download the great-expectations experiment chart from # the third party experiment chart repo whose URL is # https://great.expectations.pip iter8 hub -c great-expectations -r https://great.expectations.pip","title":"Examples"},{"location":"user-guide/commands/iter8_hub/#options","text":"-c, --chartName string name of the experiment chart -d, --destDir string destination folder where experiment chart is downloaded and unpacked; by default, Iter8 will create and use a temporary folder as destination -h, --help help for hub -r, --repoURL string URL of experiment chart repo (default \"https://iter8-tools.github.io/hub\")","title":"Options"},{"location":"user-guide/commands/iter8_hub/#see-also","text":"iter8 - Kubernetes Release Optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_hub/#auto-generated-by-spf13cobra-on-9-feb-2022","text":"","title":"Auto generated by spf13/cobra on 9-Feb-2022"},{"location":"user-guide/commands/iter8_launch/","text":"iter8 launch \u00b6 Launch an Iter8 experiment. Synopsis \u00b6 Launch an Iter8 experiment by downloading a chart from an Iter8 experiment chart repo, rendering an experiment.yaml file by combining the chart with values, running the experiment specified in experiment.yaml. iter8 launch [flags] Options \u00b6 -c, --chartName string name of the experiment chart -d, --destDir string destination folder where experiment chart is downloaded and unpacked; by default, Iter8 will create and use a temporary folder as destination --dry render experiment.yaml without running the experiment -h, --help help for launch -r, --repoURL string URL of experiment chart repo (default \"https://iter8-tools.github.io/hub\") --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple) SEE ALSO \u00b6 iter8 - Kubernetes Release Optimizer Auto generated by spf13/cobra on 9-Feb-2022 \u00b6","title":"iter8 launch"},{"location":"user-guide/commands/iter8_launch/#iter8-launch","text":"Launch an Iter8 experiment.","title":"iter8 launch"},{"location":"user-guide/commands/iter8_launch/#synopsis","text":"Launch an Iter8 experiment by downloading a chart from an Iter8 experiment chart repo, rendering an experiment.yaml file by combining the chart with values, running the experiment specified in experiment.yaml. iter8 launch [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_launch/#options","text":"-c, --chartName string name of the experiment chart -d, --destDir string destination folder where experiment chart is downloaded and unpacked; by default, Iter8 will create and use a temporary folder as destination --dry render experiment.yaml without running the experiment -h, --help help for launch -r, --repoURL string URL of experiment chart repo (default \"https://iter8-tools.github.io/hub\") --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple)","title":"Options"},{"location":"user-guide/commands/iter8_launch/#see-also","text":"iter8 - Kubernetes Release Optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_launch/#auto-generated-by-spf13cobra-on-9-feb-2022","text":"","title":"Auto generated by spf13/cobra on 9-Feb-2022"},{"location":"user-guide/commands/iter8_report/","text":"iter8 report \u00b6 View report from experiment result Synopsis \u00b6 View report from experiment result iter8 report [flags] Examples \u00b6 # view text report iter8 report # view html report iter8 report -o html Options \u00b6 -h, --help help for report -o, --outputFormat string text | html (default \"text\") SEE ALSO \u00b6 iter8 - Kubernetes Release Optimizer Auto generated by spf13/cobra on 9-Feb-2022 \u00b6","title":"iter8 report"},{"location":"user-guide/commands/iter8_report/#iter8-report","text":"View report from experiment result","title":"iter8 report"},{"location":"user-guide/commands/iter8_report/#synopsis","text":"View report from experiment result iter8 report [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_report/#examples","text":"# view text report iter8 report # view html report iter8 report -o html","title":"Examples"},{"location":"user-guide/commands/iter8_report/#options","text":"-h, --help help for report -o, --outputFormat string text | html (default \"text\")","title":"Options"},{"location":"user-guide/commands/iter8_report/#see-also","text":"iter8 - Kubernetes Release Optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_report/#auto-generated-by-spf13cobra-on-9-feb-2022","text":"","title":"Auto generated by spf13/cobra on 9-Feb-2022"},{"location":"user-guide/commands/iter8_run/","text":"iter8 run \u00b6 Run experiment specified in experiment.yaml. Synopsis \u00b6 Run experiment specified in experiment.yaml. iter8 run [flags] Options \u00b6 -h, --help help for run SEE ALSO \u00b6 iter8 - Kubernetes Release Optimizer Auto generated by spf13/cobra on 9-Feb-2022 \u00b6","title":"iter8 run"},{"location":"user-guide/commands/iter8_run/#iter8-run","text":"Run experiment specified in experiment.yaml.","title":"iter8 run"},{"location":"user-guide/commands/iter8_run/#synopsis","text":"Run experiment specified in experiment.yaml. iter8 run [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_run/#options","text":"-h, --help help for run","title":"Options"},{"location":"user-guide/commands/iter8_run/#see-also","text":"iter8 - Kubernetes Release Optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_run/#auto-generated-by-spf13cobra-on-9-feb-2022","text":"","title":"Auto generated by spf13/cobra on 9-Feb-2022"},{"location":"user-guide/commands/iter8_version/","text":"iter8 version \u00b6 Print Iter8 version information Synopsis \u00b6 Show the version for Iter8. iter8 version [flags] Examples \u00b6 iter8 version # The output will look like this: # version.BuildInfo{Version:\"v0.8.32\", GitCommit:\"fe51cd1e31e6a202cba7aliv9552a6d418ded79a\", GitTreeState:\"clean\", GoVersion:\"go1.17.6\"} # - Version is the semantic version of the release. # - GitCommit is the SHA for the commit that this version was built from. # - GitTreeState is \"clean\" if there are no local code changes when this binary was # built, and \"dirty\" if the binary was built from locally modified code. # - GoVersion is the version of Go that was used to compile Iter8. Options \u00b6 -h, --help help for version --short print the version number SEE ALSO \u00b6 iter8 - Kubernetes Release Optimizer Auto generated by spf13/cobra on 9-Feb-2022 \u00b6","title":"iter8 version"},{"location":"user-guide/commands/iter8_version/#iter8-version","text":"Print Iter8 version information","title":"iter8 version"},{"location":"user-guide/commands/iter8_version/#synopsis","text":"Show the version for Iter8. iter8 version [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_version/#examples","text":"iter8 version # The output will look like this: # version.BuildInfo{Version:\"v0.8.32\", GitCommit:\"fe51cd1e31e6a202cba7aliv9552a6d418ded79a\", GitTreeState:\"clean\", GoVersion:\"go1.17.6\"} # - Version is the semantic version of the release. # - GitCommit is the SHA for the commit that this version was built from. # - GitTreeState is \"clean\" if there are no local code changes when this binary was # built, and \"dirty\" if the binary was built from locally modified code. # - GoVersion is the version of Go that was used to compile Iter8.","title":"Examples"},{"location":"user-guide/commands/iter8_version/#options","text":"-h, --help help for version --short print the version number","title":"Options"},{"location":"user-guide/commands/iter8_version/#see-also","text":"iter8 - Kubernetes Release Optimizer","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_version/#auto-generated-by-spf13cobra-on-9-feb-2022","text":"","title":"Auto generated by spf13/cobra on 9-Feb-2022"}]}